https://leetcode.com/problems/finding-mk-average/description/

You are given two integers, m and k, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.

The MKAverage can be calculated using these steps:

If the number of the elements in the stream is less than m you should consider the MKAverage to be -1. Otherwise, copy the last m elements of the stream to a separate container.
Remove the smallest k elements and the largest k elements from the container.
Calculate the average value for the rest of the elements rounded down to the nearest integer.
Implement the MKAverage class:

MKAverage(int m, int k) Initializes the MKAverage object with an empty stream and the two integers m and k.
void addElement(int num) Inserts a new element num into the stream.
int calculateMKAverage() Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.
 

Example 1:

Input
["MKAverage", "addElement", "addElement", "calculateMKAverage", "addElement", "calculateMKAverage", "addElement", "addElement", "addElement", "calculateMKAverage"]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
Output
[null, null, null, -1, null, 3, null, null, null, 5]

Explanation
MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // current elements are [3]
obj.addElement(1);        // current elements are [3,1]
obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.
obj.addElement(10);       // current elements are [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].
                          // After removing smallest and largest 1 element the container will be [3].
                          // The average of [3] equals 3/1 = 3, return 3
obj.addElement(5);        // current elements are [3,1,10,5]
obj.addElement(5);        // current elements are [3,1,10,5,5]
obj.addElement(5);        // current elements are [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].
                          // After removing smallest and largest 1 element the container will be [5].
                          // The average of [5] equals 5/1 = 5, return 5



# java


class MKAverage {

    private int m, k;
    private long s;
    private int size1, size3;
    private Deque<Integer> q = new ArrayDeque<>();
    private TreeMap<Integer, Integer> lo = new TreeMap<>();
    private TreeMap<Integer, Integer> mid = new TreeMap<>();
    private TreeMap<Integer, Integer> hi = new TreeMap<>();

    public MKAverage(int m, int k) {
        this.m = m;
        this.k = k;
    }

    public void addElement(int num) {
        if (lo.isEmpty() || num <= lo.lastKey()) {
            lo.merge(num, 1, Integer::sum);
            ++size1;
        } else if (hi.isEmpty() || num >= hi.firstKey()) {
            hi.merge(num, 1, Integer::sum);
            ++size3;
        } else {
            mid.merge(num, 1, Integer::sum);
            s += num;
        }
        q.offer(num);
        if (q.size() > m) {
            int x = q.poll();
            if (lo.containsKey(x)) {
                if (lo.merge(x, -1, Integer::sum) == 0) {
                    lo.remove(x);
                }
                --size1;
            } else if (hi.containsKey(x)) {
                if (hi.merge(x, -1, Integer::sum) == 0) {
                    hi.remove(x);
                }
                --size3;
            } else {
                if (mid.merge(x, -1, Integer::sum) == 0) {
                    mid.remove(x);
                }
                s -= x;
            }
        }
        for (; size1 > k; --size1) {
            int x = lo.lastKey();
            if (lo.merge(x, -1, Integer::sum) == 0) {
                lo.remove(x);
            }
            mid.merge(x, 1, Integer::sum);
            s += x;
        }
        for (; size3 > k; --size3) {
            int x = hi.firstKey();
            if (hi.merge(x, -1, Integer::sum) == 0) {
                hi.remove(x);
            }
            mid.merge(x, 1, Integer::sum);
            s += x;
        }
        for (; size1 < k && !mid.isEmpty(); ++size1) {
            int x = mid.firstKey();
            if (mid.merge(x, -1, Integer::sum) == 0) {
                mid.remove(x);
            }
            s -= x;
            lo.merge(x, 1, Integer::sum);
        }
        for (; size3 < k && !mid.isEmpty(); ++size3) {
            int x = mid.lastKey();
            if (mid.merge(x, -1, Integer::sum) == 0) {
                mid.remove(x);
            }
            s -= x;
            hi.merge(x, 1, Integer::sum);
        }
    }

    public int calculateMKAverage() {
        return q.size() < m ? -1 : (int) (s / (q.size() - k * 2));
    }
}

/**
 * Your MKAverage object will be instantiated and called as such:
 * MKAverage obj = new MKAverage(m, k);
 * obj.addElement(num);
 * int param_2 = obj.calculateMKAverage();
 */


or


class MKAverage {

    private TreeMap<Integer, Integer> counts;
    private Deque<Integer> stream;
    private int m;
    private int k;
    private int totalSum = 0;
    private int totalSize = 0;
    
    
    public MKAverage(int m, int k) {
        counts = new TreeMap<>();
        stream = new LinkedList<>();
        this.m = m;
        this.k = k;
    }
    
    public void addElement(int num) {
        totalSum += num;
        totalSize++;
        stream.add(num);
        if (stream.size() > m) {
            Integer key = stream.removeFirst();
            counts.put(key, counts.get(key) - 1);
            totalSum -= key;
            if (counts.get(key) == 0) counts.remove(key);
        }
        counts.put(num, counts.getOrDefault(num, 0) + 1);
    }
    
    public int calculateMKAverage() {
        if (totalSize < m) return -1;
        
        int key = counts.firstKey();
        int lastKey = counts.lastKey();
        int kSmall = k, kLarge = k;

        int extremeSum = 0;

        System.out.println(counts.toString());
        
        while (kSmall > 0) {
            int toSubtractSmall = Math.min(kSmall, counts.get(key));
            kSmall -= toSubtractSmall;
            extremeSum += key * toSubtractSmall;
            System.out.println(key + toSubtractSmall);
            if (toSubtractSmall == counts.get(key)) key = counts.higherKey(key);
        }

        while (kLarge > 0) {
            int toSubtractLarge = Math.min(kLarge, counts.get(lastKey));
            kLarge -= toSubtractLarge;
            extremeSum += lastKey * toSubtractLarge;
            System.out.println(lastKey + toSubtractLarge);
            if (toSubtractLarge == counts.get(lastKey)) lastKey = counts.lowerKey(lastKey);
        }
        
        int ret = (totalSum - extremeSum) / (m - 2 * k);
        
        return ret;
    }
}

/**
 * Your MKAverage object will be instantiated and called as such:
 * MKAverage obj = new MKAverage(m, k);
 * obj.addElement(num);
 * int param_2 = obj.calculateMKAverage();
 */


or


// lazy deletion  PriorityQueue + Lazy Deletion | O(log M) add, O(1) calculate | Detailed Explanations

class MKAverage {
    PriorityQueue<Integer> left = new PriorityQueue<>((a, b) -> b - a);
    PriorityQueue<Integer> right = new PriorityQueue<>((a, b) -> a - b);
    PriorityQueue<Integer> minMiddle = new PriorityQueue<>((a, b) -> a - b);
    PriorityQueue<Integer> maxMiddle = new PriorityQueue<>((a, b) -> b - a);
    Queue<Integer> vals = new LinkedList<>();
    Map<Integer, Integer> deleteLeft = new HashMap<>(), deleteRight = new HashMap<>(), deleteMinMiddle = new HashMap<>(), deleteMaxMiddle = new HashMap<>();
    
    long sum;
    int m, k;
    boolean flag;
    public MKAverage(int m, int k) {
        this.m = m;
        this.k = k;
        sum = 0;
        flag = false;
    }
    
    public void addElement(int num) {
        vals.offer(num);
        
        if (!flag && vals.size() == m) {
            initialize();
            flag = true;
        }
        else if (flag) {
            int lv = vals.poll();
            update(left, deleteLeft);
            update(right, deleteRight);
            if (!left.isEmpty() && left.peek() >= lv) {
                update(minMiddle, deleteMinMiddle);
                int v = minMiddle.poll();
                deleteMaxMiddle.put(v, deleteMaxMiddle.getOrDefault(v, 0) + 1);
                left.offer(v);
                deleteLeft.put(lv, deleteLeft.getOrDefault(lv, 0) + 1);
                sum -= v;
            }
            else if (!right.isEmpty() && right.peek() <= lv) {
                update(maxMiddle, deleteMaxMiddle);
                int v = maxMiddle.poll();
                deleteMinMiddle.put(v, deleteMinMiddle.getOrDefault(v, 0) + 1);
                right.offer(v);
                deleteRight.put(lv, deleteRight.getOrDefault(lv, 0) + 1);
                sum -= v;
            }
            else {
                deleteMinMiddle.put(lv, deleteMinMiddle.getOrDefault(lv, 0) + 1);
                deleteMaxMiddle.put(lv, deleteMaxMiddle.getOrDefault(lv, 0) + 1);
                sum -= lv;
            }
            
            update(left, deleteLeft);
            update(right, deleteRight);
            if (!left.isEmpty() && left.peek() >= num) {
                int v = left.poll();
                minMiddle.offer(v);
                maxMiddle.offer(v);
                left.offer(num);
                sum += v;
            }
            else if (!right.isEmpty() && right.peek() <= num) {
                int v = right.poll();
                minMiddle.offer(v);
                maxMiddle.offer(v);
                right.offer(num);
                sum += v;
            }
            else {
                minMiddle.offer(num);
                maxMiddle.offer(num);
                sum += num;
            }
        }
    }
    
    public int calculateMKAverage() {
        // System.out.println(sum);
        return flag? (int)(sum / (m - 2 * k)) : -1;
    }
    
    private void initialize() {
        int i;
        for (i = 0; i < m; ++i) {
            int v = vals.poll();
            minMiddle.offer(v);
            maxMiddle.offer(v);
            sum += v;
            vals.offer(v);
        }
        i = 0;
        while (i < k) {
            update(minMiddle, deleteMinMiddle);
            int v = minMiddle.poll();
            left.offer(v);
            deleteMaxMiddle.put(v, deleteMaxMiddle.getOrDefault(v, 0) + 1);
            sum -= v;
            i ++;
        }
        
        i = 0;
        while (i < k) {
            update(maxMiddle, deleteMaxMiddle);
            int v = maxMiddle.poll();
            right.offer(v);
            deleteMinMiddle.put(v, deleteMinMiddle.getOrDefault(v, 0) + 1);
            sum -= v;
            i ++;
        }
    }
    
    private void update(PriorityQueue<Integer> pq, Map<Integer, Integer> delete) {
        while (!pq.isEmpty() && delete.containsKey(pq.peek()) && delete.get(pq.peek()) > 0) {
            int v = pq.poll();
            delete.put(v, delete.get(v) - 1);
            if (delete.get(v) == 0)
                delete.remove(v);
        }
    }
}
