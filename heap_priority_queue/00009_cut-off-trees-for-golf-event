https://leetcode.com/problems/cut-off-trees-for-golf-event/description/


You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an m x n matrix. In this matrix:

0 means the cell cannot be walked through.
1 represents an empty cell that can be walked through.
A number greater than 1 represents a tree in a cell that can be walked through, and this number is the tree's height.
In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree,
you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes 1 (an empty cell).

Starting from the point (0, 0), return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, 
return -1.

Note: The input is generated such that no two trees have the same height, and there is at least one tree needs to be cut off.

 

Example 1:


Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.
Example 2:


Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.
Example 3:

Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6
Explanation: You can follow the same path as Example 1 to cut off all the trees.
Note that you can cut off the first tree at (0, 0) before making any steps.
 

Constraints:

m == forest.length
n == forest[i].length
1 <= m, n <= 50
0 <= forest[i][j] <= 109
Heights of all trees are distinct.



# java

class Solution {
    public int cutOffTree(List<List<Integer>> forest) {
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->(forest.get(a[0]).get(a[1])-forest.get(b[0]).get(b[1])));
        for(int i=0;i<forest.size();i++){
            for(int j=0;j<forest.get(0).size();j++){
                if(forest.get(i).get(j)>1)
                    pq.add(new int[]{i,j});
            }
        }
        int ans=0;
        int curr[]={0,0};
        while(pq.size()>0){
            int[] temp=pq.poll();
            int dis=calcDis(forest,curr,temp);
            if(dis==-1)
                return -1;
            ans+=dis;
            curr=temp;
        }
        return ans;
    }
    int calcDis(List<List<Integer>> forest,int start[],int end[]){
        int n=forest.size(),m=forest.get(0).size();
        boolean vis[][]=new boolean[n][m];
        Queue<int[]> queue=new LinkedList<>();
        queue.add(start);
        vis[start[0]][start[1]]=true;
        int dis=0;
        while(queue.size()>0){
            int len =queue.size();
            while(len-->0){
                int temp[]=queue.remove();
                int r=temp[0],c=temp[1];
                if(r==end[0] && c==end[1])
                    return dis;
                if(r+1<n && !vis[r+1][c] && forest.get(r+1).get(c)!=0){
                    queue.add(new int[]{r+1,c});
                    vis[r+1][c]=true;
                }if(r-1>=0 && !vis[r-1][c] && forest.get(r-1).get(c)!=0){
                    queue.add(new int[]{r-1,c});
                    vis[r-1][c]=true;
                }if(c-1>=0 && !vis[r][c-1] && forest.get(r).get(c-1)!=0){
                    queue.add(new int[]{r,c-1});
                    vis[r][c-1]=true;
                }if(c+1<m && !vis[r][c+1] && forest.get(r).get(c+1)!=0){
                    queue.add(new int[]{r,c+1});
                    vis[r][c+1]=true;
                }
            }
            dis++;
        }
        return -1;
    }
}


or


class Solution {
    static int[] dy = {-1, 0, 1, 0};
    static int[] dx = {0, 1, 0, -1};
    
    public int cutOffTree(List<List<Integer>> forest) {
        int n = forest.size(), m = forest.get(0).size();
        int count = 0;
        
		// Store the height of all trees in a list
        List<Integer> minList = new ArrayList<>();
        for (List<Integer> al: forest)
            for (int val: al) 
                if (val > 1) 
                    minList.add(val);
        
		// Sort the list to have the smallest in the front
        Collections.sort(minList);
		
        int totalSteps = 0;
        int si = 0, sj = 0; // Starting points <i, j>
        
        for (int i = 0; i < minList.size(); i++) {
            int target = minList.get(i);
            boolean hasFound = false;
            boolean[][] visited = new boolean[n][m];
			
            Queue<int[]> q = new LinkedList<>();
            q.offer(new int[]{si, sj});
        
            int steps = -1;
            while (!q.isEmpty() && !hasFound) {
                steps++; // Increment the steps for current move
				
				// Level-Order Traversal
				int size = q.size();
                while (size -- > 0) {
                    int[] curr = q.poll();
					
                    if (visited[curr[0]][curr[1]]) continue;
                    visited[curr[0]][curr[1]] = true;
                    
					// Skip if 0 is encountered
                    if (forest.get(curr[0]).get(curr[1]) == 0) continue;
                    
					if (forest.get(curr[0]).get(curr[1]) == target) {
                        si = curr[0];
                        sj = curr[1];
                        hasFound = true;
                        break;
                    }

					// Typical BFS process
                    for (int j = 0; j < dy.length; j++) {
                        int y = curr[0] + dy[j];
                        int x = curr[1] + dx[j];
						
                        if (y >= n || x >= m || y < 0 || x < 0 || visited[y][x] || forest.get(y).get(x) == 0)   
                            continue;
                        q.offer(new int[]{y, x});
                    }
                }
            }
			// If the target is unreacheable, end the entire process
            if (steps == -1 || !hasFound) return -1;

			totalSteps += steps;
        }
        return totalSteps;
    }
}
