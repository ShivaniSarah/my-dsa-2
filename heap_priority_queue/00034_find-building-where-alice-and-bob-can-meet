https://leetcode.com/problems/find-building-where-alice-and-bob-can-meet/

You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.

If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].

You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.

Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query. If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.

 

Example 1:

Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]
Output: [2,5,-1,5,2]
Explanation: In the first query, Alice and Bob can move to building 2 since heights[0] < heights[2] and heights[1] < heights[2]. 
In the second query, Alice and Bob can move to building 5 since heights[0] < heights[5] and heights[3] < heights[5]. 
In the third query, Alice cannot meet Bob since Alice cannot move to any other building.
In the fourth query, Alice and Bob can move to building 5 since heights[3] < heights[5] and heights[4] < heights[5].
In the fifth query, Alice and Bob are already in the same building.  
For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.
For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.
Example 2:

Input: heights = [5,3,8,2,6,1,4,6], queries = [[0,7],[3,5],[5,2],[3,0],[1,6]]
Output: [7,6,-1,4,6]
Explanation: In the first query, Alice can directly move to Bob's building since heights[0] < heights[7].
In the second query, Alice and Bob can move to building 6 since heights[3] < heights[6] and heights[5] < heights[6].
In the third query, Alice cannot meet Bob since Bob cannot move to any other building.
In the fourth query, Alice and Bob can move to building 4 since heights[3] < heights[4] and heights[0] < heights[4].
In the fifth query, Alice can directly move to Bob's building since heights[1] < heights[6].
For ans[i] != -1, It can be shown that ans[i] is the leftmost building where Alice and Bob can meet.
For ans[i] == -1, It can be shown that there is no building where Alice and Bob can meet.

 

Constraints:

1 <= heights.length <= 5 * 104
1 <= heights[i] <= 109
1 <= queries.length <= 5 * 104
queries[i] = [ai, bi]
0 <= ai, bi <= heights.length - 1

# java


class Solution {
        public int[] leftmostBuildingQueries(int[] A, int[][] queries) {
        int n = A.length, qn = queries.length;
        List<int[]>[] que = new ArrayList[n];
        for (int i = 0; i < n; i++)
            que[i] = new ArrayList();
        PriorityQueue<int[]> h = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        int[] res = new int[qn];
        Arrays.fill(res, -1);
        // Step 1
        for (int qi = 0; qi < qn; qi++) {
            int i = queries[qi][0], j = queries[qi][1];
            if (i < j && A[i] < A[j]) {
                res[qi] = j;
            } else if (i > j && A[i] > A[j]) {
                res[qi] = i;
            } else if (i == j) {
                res[qi] = i;
            } else { // Step 2
                que[Math.max(i, j)].add(new int[]{Math.max(A[i], A[j]), qi});
            }
        }
        // Step 3
        for (int i = 0; i < n; i++) {
            while (!h.isEmpty() && h.peek()[0] < A[i]) {
                res[h.poll()[1]] = i;
            }
            for (int[] q : que[i]) {
                h.add(q);
            }
        }

        return res;
    }
}


or

class Solution {
    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.length, q = queries.length;
        int[] result = new int[q];
        Arrays.fill(result, -1);
        List<List<int[]>> deferred = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            deferred.add(new ArrayList<>());
        }
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        for (int i = 0; i < q; ++i) {
            int a = queries[i][0], b = queries[i][1];
            if (a > b) {
                int temp = a;
                a = b;
                b = temp;
            }
            if (a == b || heights[a] < heights[b]) result[i] = b;
            else deferred.get(b).add(new int[]{heights[a], i});
        }

        for (int i = 0; i < n; ++i) {
            for (int[] query : deferred.get(i)) pq.add(query);
            while (!pq.isEmpty() && pq.peek()[0] < heights[i]) {
                result[pq.poll()[1]] = i;
            }
        }

        return result;
    }
}

or

class BinaryIndexedTree {
    private final int inf = 1 << 30;
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        c = new int[n + 1];
        Arrays.fill(c, inf);
    }

    public void update(int x, int v) {
        while (x <= n) {
            c[x] = Math.min(c[x], v);
            x += x & -x;
        }
    }

    public int query(int x) {
        int mi = inf;
        while (x > 0) {
            mi = Math.min(mi, c[x]);
            x -= x & -x;
        }
        return mi == inf ? -1 : mi;
    }
}

class Solution {
    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int n = heights.length;
        int m = queries.length;
        for (int i = 0; i < m; ++i) {
            if (queries[i][0] > queries[i][1]) {
                queries[i] = new int[] {queries[i][1], queries[i][0]};
            }
        }
        Integer[] idx = new Integer[m];
        for (int i = 0; i < m; ++i) {
            idx[i] = i;
        }
        Arrays.sort(idx, (i, j) -> queries[j][1] - queries[i][1]);
        int[] s = heights.clone();
        Arrays.sort(s);
        int[] ans = new int[m];
        int j = n - 1;
        BinaryIndexedTree tree = new BinaryIndexedTree(n);
        for (int i : idx) {
            int l = queries[i][0], r = queries[i][1];
            while (j > r) {
                int k = n - Arrays.binarySearch(s, heights[j]) + 1;
                tree.update(k, j);
                --j;
            }
            if (l == r || heights[l] < heights[r]) {
                ans[i] = r;
            } else {
                int k = n - Arrays.binarySearch(s, heights[l]);
                ans[i] = tree.query(k);
            }
        }
        return ans;
    }
}


or

import java.util.Arrays;

// BinaryIndexedTree class for range queries and updates
class BinaryIndexedTree {
    // A large number representing `infinity`
    private static final int INFINITY = 1 << 30;
    // The size of the tree
    private int size;
    // Internal storage of the Binary Indexed Tree
    private int[] tree;

    // BinaryIndexedTree constructor
    public BinaryIndexedTree(int size) {
        this.size = size;
        // Initialize the internal storage with 'infinity' values
        tree = new int[size + 1];
        Arrays.fill(tree, INFINITY);
    }

    // Update the tree with value 'v' at the index 'x'
    public void update(int x, int v) {
        while (x <= size) {
            tree[x] = Math.min(tree[x], v);
            // Move to the next index to update
            x += x & -x;
        }
    }

    // Query the tree for the minimum value until index 'x'
    public int query(int x) {
        int minimum = INFINITY;
        while (x > 0) {
            minimum = Math.min(minimum, tree[x]);
            // Move to the previous index to query
            x -= x & -x;
        }
        // If the minimum is INFINITY, return -1, as it implies no update was made
        return minimum == INFINITY ? -1 : minimum;
    }
}

class Solution {
    // Process leftmost building queries
    public int[] leftmostBuildingQueries(int[] heights, int[][] queries) {
        int buildingsLength = heights.length;
        int queriesLength = queries.length;
      
        // Ensure the start of the range is less than the end of the range
        for (int i = 0; i < queriesLength; ++i) {
            if (queries[i][0] > queries[i][1]) {
                queries[i] = new int[] {queries[i][1], queries[i][0]};
            }
        }
      
        // Array of query indices for sorting
        Integer[] indices = new Integer[queriesLength];
        for (int i = 0; i < queriesLength; ++i) {
            indices[i] = i;
        }
      
        // Sort query indices based on the right bound of queries in descending order
        Arrays.sort(indices, (i, j) -> queries[j][1] - queries[i][1]);
      
        // Copy and sort building heights
        int[] sortedHeights = heights.clone();
        Arrays.sort(sortedHeights);
      
        // Initialize result array
        int[] results = new int[queriesLength];
      
        // Initialize Binary Indexed Tree
        BinaryIndexedTree tree = new BinaryIndexedTree(buildingsLength);
      
        // Iterator from right to left on buildings
        int j = buildingsLength - 1;
      
        // Process queries based on sorted indices
        for (int index : indices) {
            int leftBound = queries[index][0], rightBound = queries[index][1];
            // Updating tree
            while (j > rightBound) {
                // Find position in sorted array for the height of building 'j'
                int position = buildingsLength - Arrays.binarySearch(sortedHeights, heights[j]) + 1;
                // Update the tree at position with building index 'j'
                tree.update(position, j);
                --j;
            }
            // Check for direct visibility or use the Binary Indexed Tree to find leftmost building
            if (leftBound == rightBound || heights[leftBound] < heights[rightBound]) {
                results[index] = rightBound;
            } else {
                int k = buildingsLength - Arrays.binarySearch(sortedHeights, heights[leftBound]);
                results[index] = tree.query(k);
            }
        }
        return results;
    }
}
