https://leetcode.com/problems/maximum-number-of-points-from-grid-queries/description/

You are given an m x n integer matrix grid and an array queries of size k.

Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:

If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.
Otherwise, you do not get any points, and you end this process.
After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.

Return the resulting array answer.

 

Example 1:


Input: grid = [[1,2,3],[2,5,7],[3,5,1]], queries = [5,6,2]
Output: [5,8,1]
Explanation: The diagrams above show which cells we visit to get points for each query.
Example 2:


Input: grid = [[5,2,1],[1,1,2]], queries = [3]
Output: [0]
Explanation: We can not get any points because the value of the top left cell is already greater than or equal to 3.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 1000
4 <= m * n <= 105
k == queries.length
1 <= k <= 104
1 <= grid[i][j], queries[i] <= 106


# java

import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {

    public int[] maxPoints(int[][] grid, int[] queries) {
        int queryLength = queries.length;
        // Array to store value and index of each query
        int[][] sortedQueries = new int[queryLength][2];
        // Fill the array with queries and their original indexes
        for (int i = 0; i < queryLength; ++i) {
            sortedQueries[i] = new int[] { queries[i], i };
        }
        // Sort queries based on their values
        Arrays.sort(sortedQueries, (a, b) -> a[0] - b[0]);
      
        // Initialize the answer array to store results for each query
        int[] answers = new int[queryLength];
        // Get the dimensions of the grid
        int rows = grid.length;
        int columns = grid[0].length;
        // Keep track of visited cells
        boolean[][] visited = new boolean[rows][columns];
        // Mark the start cell as visited
        visited[0][0] = true;
      
        // Priority queue to store cell values with coordinates, sorted by value
        PriorityQueue<int[]> queue = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        // Offer the first cell to the priority queue
        queue.offer(new int[] { grid[0][0], 0, 0 });
      
        // Array to help navigate through neighbors of a cell
        int[] directions = new int[] { -1, 0, 1, 0, -1 };
        // Counter to keep the count of cells processed
        int count = 0;
      
        // Process each sorted query
        for (int[] query : sortedQueries) {
            int queryValue = query[0];
            int queryIndex = query[1];
          
            // Poll cells with value less than the current query value
            while (!queue.isEmpty() && queue.peek()[0] < queryValue) {
                int[] cell = queue.poll();
                // Increment the count whenever a cell is polled
                ++count;
              
                // Navigate to neighboring cells
                for (int i = 0; i < 4; ++i) {
                    int newRow = cell[1] + directions[i];
                    int newColumn = cell[2] + directions[i + 1];
                  
                    // If the neighbor is within bounds and not visited yet
                    if (newRow >= 0 && newRow < rows 
                        && newColumn >= 0 && newColumn < columns 
                        && !visited[newRow][newColumn]) {
                        // Mark as visited
                        visited[newRow][newColumn] = true;
                        // Add to queue with values
                        queue.offer(new int[] { grid[newRow][newColumn], newRow, newColumn });
                    }
                }
            }
            // Save counter value in the answer array corresponding to the original query index
            answers[queryIndex] = count;
        }
        // Return the answer array with counts for each query
        return answers;
    }
}



or


class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int k = queries.length;
        int[][] qs = new int[k][2];
        for (int i = 0; i < k; ++i) {
            qs[i] = new int[] {queries[i], i};
        }
        Arrays.sort(qs, (a, b) -> a[0] - b[0]);
        int[] ans = new int[k];
        int m = grid.length, n = grid[0].length;
        boolean[][] vis = new boolean[m][n];
        vis[0][0] = true;
        PriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        q.offer(new int[] {grid[0][0], 0, 0});
        int[] dirs = new int[] {-1, 0, 1, 0, -1};
        int cnt = 0;
        for (var e : qs) {
            int v = e[0];
            k = e[1];
            while (!q.isEmpty() && q.peek()[0] < v) {
                var p = q.poll();
                ++cnt;
                for (int h = 0; h < 4; ++h) {
                    int x = p[1] + dirs[h], y = p[2] + dirs[h + 1];
                    if (x >= 0 && x < m && y >= 0 && y < n && !vis[x][y]) {
                        vis[x][y] = true;
                        q.offer(new int[] {grid[x][y], x, y});
                    }
                }
            }
            ans[k] = cnt;
        }
        return ans;
    }
}


or


class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int rows = grid.length, cols = grid[0].length;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        int n = queries.length;
        int[] result = new int[n];
        int[][] visited = new int[rows][cols];

        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        List<int[]> sortedQueries = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            sortedQueries.add(new int[]{queries[i], i});
        }
        sortedQueries.sort(Comparator.comparingInt(a -> a[0]));

        minHeap.offer(new int[]{grid[0][0], 0, 0});
        visited[0][0] = 1;
        int points = 0;

        for (int[] q : sortedQueries) {
            int queryVal = q[0], queryIdx = q[1];

            while (!minHeap.isEmpty() && minHeap.peek()[0] < queryVal) {
                int[] top = minHeap.poll();
                int row = top[1], col = top[2];
                points++;

                for (int[] dir : directions) {
                    int nr = row + dir[0], nc = col + dir[1];
                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && visited[nr][nc] == 0) {
                        minHeap.offer(new int[]{grid[nr][nc], nr, nc});
                        visited[nr][nc] = 1;
                    }
                }
            }
            result[queryIdx] = points;
        }
        return result;
    }
}


or


import java.util.*;

class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int m = grid.length, n = grid[0].length;
        int[] sortedQueries = queries.clone();
        Arrays.sort(sortedQueries);
        Map<Integer, Integer> queryResult = new HashMap<>();
        int[] answer = new int[queries.length];

        int[][] directions = {{0,1}, {0,-1}, {1,0}, {-1,0}};
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        Set<String> visited = new HashSet<>();

        minHeap.offer(new int[]{grid[0][0], 0, 0});
        visited.add("0,0");

        int points = 0;

        for (int query : sortedQueries) {
            while (!minHeap.isEmpty() && minHeap.peek()[0] < query) {
                int[] cell = minHeap.poll();
                int val = cell[0], r = cell[1], c = cell[2];

                points++;

                for (int[] dir : directions) {
                    int nr = r + dir[0], nc = c + dir[1];
                    String key = nr + "," + nc;

                    if (nr >= 0 && nr < m && nc >= 0 && nc < n && !visited.contains(key)) {
                        visited.add(key);
                        minHeap.offer(new int[]{grid[nr][nc], nr, nc});
                    }
                }
            }
            queryResult.put(query, points);
        }

        for (int i = 0; i < queries.length; i++) {
            answer[i] = queryResult.get(queries[i]);
        }

        return answer;
    }
}

or


class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int m = grid.length, n = grid[0].length;
        int[][] directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};
        boolean[][] visited = new boolean[m][n];
        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        List<Integer> order = new ArrayList<>();

        minHeap.offer(new int[]{grid[0][0], 0, 0});
        visited[0][0] = true;

        while (!minHeap.isEmpty()) {
            int[] top = minHeap.poll();
            int val = top[0], x = top[1], y = top[2];
            order.add(val);

            for (int[] dir : directions) {
                int newX = x + dir[0], newY = y + dir[1];
                if (newX >= 0 && newX < m && newY >= 0 && newY < n && !visited[newX][newY]) {
                    visited[newX][newY] = true;
                    minHeap.offer(new int[]{grid[newX][newY], newX, newY});
                }
            }
        }

        // Convert order[] to prefix maximums
        for (int i = 1; i < order.size(); i++) {
            order.set(i, Math.max(order.get(i), order.get(i - 1)));
        }

        // Process queries using binary search
        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = binarySearch(order, queries[i]);
        }

        return result;
    }

    // Find first index where order[idx] >= query using binary search
    private int binarySearch(List<Integer> order, int target) {
        int left = 0, right = order.size();
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (order.get(mid) < target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}
