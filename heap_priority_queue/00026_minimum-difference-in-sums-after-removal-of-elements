https://leetcode.com/problems/minimum-difference-in-sums-after-removal-of-elements/description/

You are given a 0-indexed integer array nums consisting of 3 * n elements.

You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:

The first n elements belonging to the first part and their sum is sumfirst.
The next n elements belonging to the second part and their sum is sumsecond.
The difference in sums of the two parts is denoted as sumfirst - sumsecond.

For example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.
Return the minimum difference possible between the sums of the two parts after the removal of n elements.

 

Example 1:

Input: nums = [3,1,2]
Output: -1
Explanation: Here, nums has 3 elements, so n = 1. 
Thus we have to remove 1 element from nums and divide the array into two equal parts.
- If we remove nums[0] = 3, the array will be [1,2]. The difference in sums of the two parts will be 1 - 2 = -1.
- If we remove nums[1] = 1, the array will be [3,2]. The difference in sums of the two parts will be 3 - 2 = 1.
- If we remove nums[2] = 2, the array will be [3,1]. The difference in sums of the two parts will be 3 - 1 = 2.
The minimum difference between sums of the two parts is min(-1,1,2) = -1. 
Example 2:

Input: nums = [7,9,5,8,1,3]
Output: 1
Explanation: Here n = 2. So we must remove 2 elements and divide the remaining array into two parts containing two elements each.
If we remove nums[2] = 5 and nums[3] = 8, the resultant array will be [7,9,1,3]. The difference in sums will be (7+9) - (1+3) = 12.
To obtain the minimum difference, we should remove nums[1] = 9 and nums[4] = 1. The resultant array becomes [7,5,8,3]. The difference in sums of the two parts is (7+5) - (8+3) = 1.
It can be shown that it is not possible to obtain a difference smaller than 1.
 

Constraints:

nums.length == 3 * n
1 <= n <= 105
1 <= nums[i] <= 105



# java


class Solution {
    public long minimumDifference(int[] nums) {
        PriorityQueue<Integer> pq_start = new PriorityQueue<>((a,b)->{
            return b - a;
        });
        int n = nums.length, k = n/3, mod = (int)1e9 + 7;
        long sum1 = 0;
        long[] start_sum = new long[n];
        
        for(int i=0; i<n ;i++) {
            sum1 += nums[i];
            pq_start.add(nums[i]);
            if(i >= k) {
                sum1 -= pq_start.poll();
            }
            start_sum[i] = sum1;
        }
        
        pq_start = new PriorityQueue<>((a,b)->{
            return a - b;
        });
        
        sum1 = 0;
        int idx = n - k;
        long ans = Long.MAX_VALUE;
        
        for(int i=n-1; i>=k-1; i--) {
            if(i < idx) {
                ans = Math.min(ans, start_sum[i] - sum1);
            }
            pq_start.add(nums[i]);
            sum1 += nums[i];
            if(i < idx) {
                sum1 -= pq_start.poll();
            }
        }
        
        return ans;
    }
}


or

// prefix priority queue

class Solution {
    
    public long minimumDifference(int[] nums) {
        int n = nums.length / 3;
        Comparator<Integer> maxComparator = new Comparator<Integer>(){
            @Override
            public int compare(Integer i, Integer j){
                return - i.compareTo(j);
            }
        };
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(n, maxComparator);
        long sum = 0;
        
        for (int i = 0; i < n; i++){
            maxHeap.offer(nums[i]);
            sum += nums[i];
        }
        
        long prefix[] = new long[n + 1];
        prefix[0] = sum;
        
        for (int i = 1; i <= n; i++) {
            if (maxHeap.peek() > nums[n + i - 1]) {
                
                prefix[i] = prefix[i - 1] + nums[n + i - 1] - maxHeap.poll();
                maxHeap.offer(nums[n + i - 1]);
            }
            else { prefix[i] = prefix[i - 1]; }
        }
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(n);
        sum = 0;
        
        for (int i = 0; i < n; i++){
            minHeap.offer(nums[nums.length - 1 - i]);
            sum += nums[nums.length - 1 - i];
        }
        
        long ans = prefix[n] - sum;
        for (int i = 0; i < n; i++) {
            
            int num = nums[nums.length - (n + 1) - i];
            if (minHeap.peek() < num) {
                sum -= minHeap.poll() - num;
                minHeap.offer(num);
            }
            
            ans = Math.min(ans, prefix[n - (i + 1)] - sum);
        }
        
        return ans;
        
    }
}


or


class Solution {
    public long minimumDifference(int[] nums) {
        long ans = Long.MAX_VALUE;
        int n = nums.length/3;
        long minSum = 0, maxSum = 0;
        
        PriorityQueue<Integer> maxq = new PriorityQueue<>((a, b) -> nums[b] - nums[a]);
        PriorityQueue<Integer> minq = new PriorityQueue<>((a, b) -> nums[a] - nums[b]);
        
        for (int i = 0; i < n; i++) { maxq.add(i); minSum += nums[i]; }
        for (int i = 3*n - 1; i >= 2 * n; i--) { minq.add(i); maxSum += nums[i]; }
        
        long[] left = new long[n + 1]; left[0] = minSum;
        long[] right = new long[n + 1]; right[n] = maxSum;
        
        for (int i = n; i < 2 * n; i++) {
            if (nums[i] < nums[maxq.peek()]) {
                minSum = minSum - nums[maxq.poll()] + nums[i];
                maxq.add(i);
            }
            left[i - n + 1] = minSum;
        }
        
        for (int i = 2*n - 1; i >= n; i--) {
            if (nums[i] > nums[minq.peek()]) {
                maxSum = maxSum - nums[minq.poll()] + nums[i];
                minq.add(i);
            }
            right[i - n] = maxSum;
        }
        
        for (int i = 0; i <= n; i++) ans = Math.min(ans, left[i] - right[i]);
        
        return ans;
    }
}


or


class Solution {
    public long minimumDifference(int[] nums) {
        PriorityQueue<Integer> pq_start = new PriorityQueue<>((a,b)->{
            return b - a;
        });
        int n = nums.length, k = n/3, mod = (int)1e9 + 7;
        long sum1 = 0;
        long[] start_sum = new long[n];
        
        for(int i=0; i<n ;i++) {
            sum1 += nums[i];
            pq_start.add(nums[i]);
            if(i >= k) {
                sum1 -= pq_start.poll();
            }
            start_sum[i] = sum1;
        }
        
        pq_start = new PriorityQueue<>((a,b)->{
            return a - b;
        });
        
        sum1 = 0;
        int idx = n - k;
        long ans = Long.MAX_VALUE;
        
        for(int i=n-1; i>=k-1; i--) {
            if(i < idx) {
                ans = Math.min(ans, start_sum[i] - sum1);
            }
            pq_start.add(nums[i]);
            sum1 += nums[i];
            if(i < idx) {
                sum1 -= pq_start.poll();
            }
        }
        
        return ans;
    }
}

or

class Solution {
    public long minimumDifference(int[] nums) {
        int totalLength = nums.length; // Total number of elements in nums.
        int subsetSize = totalLength / 3; // Size of the subsets to be created.
        long sum = 0; // Used to store the running sum.
      
        // Array to store the prefix sum for the first 2/3 of the array.
        long[] prefixSums = new long[totalLength + 1];
        // Initialize a max heap to find the largest elements in reverse order.
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
        for (int i = 1; i <= subsetSize * 2; ++i) {
            int element = nums[i - 1];
            sum += element;
            maxHeap.offer(element);
            // If the max heap size exceeds the subset size, remove the largest element.
            if (maxHeap.size() > subsetSize) {
                sum -= maxHeap.poll();
            }
            // Store the running sum in prefixSums for the first 2/3 of the array.
            prefixSums[i] = sum;
        }
      
        sum = 0;
        // Array to store the suffix sum for the last 2/3 of the array.
        long[] suffixSums = new long[totalLength + 1];
        // Initialize a min heap to find the smallest elements in order.
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int i = totalLength; i > subsetSize; --i) {
            int element = nums[i - 1];
            sum += element;
            minHeap.offer(element);
            // If the min heap size exceeds the subset size, remove the smallest element.
            if (minHeap.size() > subsetSize) {
                sum -= minHeap.poll();
            }
            // Store the running sum in suffixSums for the last 2/3 of the array.
            suffixSums[i] = sum;
        }
      
        // Initialize answer with a very large value.
        long answer = Long.MAX_VALUE;
        // Go through the middle 1/3 of the array to find the minimum sum difference.
        for (int i = subsetSize; i <= subsetSize * 2; ++i) {
            answer = Math.min(answer, prefixSums[i] - suffixSums[i + 1]);
        }
        // Return the minimum sum difference.
        return answer;
    }
}

or


class Solution {
    public long minimumDifference(int[] nums) {
        int m = nums.length;
        int n = m / 3;
        long s = 0;
        long[] pre = new long[m + 1];
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int i = 1; i <= n * 2; ++i) {
            int x = nums[i - 1];
            s += x;
            pq.offer(x);
            if (pq.size() > n) {
                s -= pq.poll();
            }
            pre[i] = s;
        }
        s = 0;
        long[] suf = new long[m + 1];
        pq = new PriorityQueue<>();
        for (int i = m; i > n; --i) {
            int x = nums[i - 1];
            s += x;
            pq.offer(x);
            if (pq.size() > n) {
                s -= pq.poll();
            }
            suf[i] = s;
        }
        long ans = 1L << 60;
        for (int i = n; i <= n * 2; ++i) {
            ans = Math.min(ans, pre[i] - suf[i + 1]);
        }
        return ans;
    }
}
