https://leetcode.com/problems/divide-an-array-into-subarrays-with-minimum-cost-ii/

You are given a 0-indexed array of integers nums of length n, and two positive integers k and dist.

The cost of an array is the value of its first element. For example, the cost of [1,2,3] is 1 while the cost of [3,4,1] is 3.

You need to divide nums into k disjoint contiguous subarrays, such that the difference between the starting index of the second subarray and the starting index of the kth subarray should be less than or equal to dist. In other words, if you divide nums into the subarrays nums[0..(i1 - 1)], nums[i1..(i2 - 1)], ..., nums[ik-1..(n - 1)], then ik-1 - i1 <= dist.

Return the minimum possible sum of the cost of these subarrays.

 

Example 1:

Input: nums = [1,3,2,6,4,2], k = 3, dist = 3
Output: 5
Explanation: The best possible way to divide nums into 3 subarrays is: [1,3], [2,6,4], and [2]. This choice is valid because ik-1 - i1 is 5 - 2 = 3 which is equal to dist. The total cost is nums[0] + nums[2] + nums[5] which is 1 + 2 + 2 = 5.
It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 5.
Example 2:

Input: nums = [10,1,2,2,2,1], k = 4, dist = 3
Output: 15
Explanation: The best possible way to divide nums into 4 subarrays is: [10], [1], [2], and [2,2,1]. This choice is valid because ik-1 - i1 is 3 - 1 = 2 which is less than dist. The total cost is nums[0] + nums[1] + nums[2] + nums[3] which is 10 + 1 + 2 + 2 = 15.
The division [10], [1], [2,2,2], and [1] is not valid, because the difference between ik-1 and i1 is 5 - 1 = 4, which is greater than dist.
It can be shown that there is no possible way to divide nums into 4 subarrays at a cost lower than 15.
Example 3:

Input: nums = [10,8,18,9], k = 3, dist = 1
Output: 36
Explanation: The best possible way to divide nums into 4 subarrays is: [10], [8], and [18,9]. This choice is valid because ik-1 - i1 is 2 - 1 = 1 which is equal to dist.The total cost is nums[0] + nums[1] + nums[2] which is 10 + 8 + 18 = 36.
The division [10], [8,18], and [9] is not valid, because the difference between ik-1 and i1 is 3 - 1 = 2, which is greater than dist.
It can be shown that there is no possible way to divide nums into 3 subarrays at a cost lower than 36.
 

Constraints:

3 <= n <= 105
1 <= nums[i] <= 109
3 <= k <= n
k - 2 <= dist <= n - 2



# java


class Solution {
    public long minimumCost(int[] nums, int k, int dist) {
        
        long result = Long.MAX_VALUE, windowSum = 0l;
        int n = nums.length;
        TreeSet<Integer> using = new TreeSet<>((a, b) -> nums[a] == nums[b] ? a - b : nums[a] - nums[b]);
        TreeSet<Integer> waiting = new TreeSet<>((a, b) -> nums[a] == nums[b] ? a - b : nums[a] - nums[b]);
        
        // Add dist + 1 num into the using set
        for(int i = 1; i <= dist + 1; i++){
            using.add(i);
            windowSum += nums[i];
        }
        // We need only k - 1 nums, move others to waiting set because we might need them in the future
        while(using.size() > k - 1){
            int i = using.pollLast();
            windowSum -= nums[i];
            waiting.add(i);
        }
        // windowSum is the sum of k - 1 nums 
        result = Math.min(result, windowSum);
        for(int i = 1; i + dist + 1 < n; i++){
            
            // window slided so add new num to the waiting set
            waiting.add(i + dist + 1);
            
            // i is the left most num in the window, will be removed from window
                
            if(using.contains(i)){
                // i is one of the k - 1 num
                // remove and update windowSum
                // poll one num from waiting set and add
                windowSum -= nums[i];
                using.remove(i);
                int j = waiting.pollFirst();
                windowSum += nums[j];
                using.add(j);
            }else{
                // i is not one of the k - 1 num, it is in the waiting set
                // remove from waiting 
                // check minimum num of the waiting set is lower than maximum num of the using set
                // If so, add to the using set, remove from waiting set
                // update window accordingly
                waiting.remove(i);
                int j1 = waiting.first(), j2 = using.last();
                if(nums[j1] < nums[j2]){
                    windowSum -= nums[j2];
                    using.remove(j2);
                    waiting.add(j2);
                    
                    windowSum += nums[j1];
                    using.add(j1);
                    waiting.remove(j1);
                }
            }
            
            result = Math.min(result, windowSum);
        }
        return result + nums[0];
    }
}


or

class Solution {
    public long minimumCost(int[] nums, int k, int dist) {
        long result = Long.MAX_VALUE, sum = 0L;
        int n = nums.length;
        TreeSet<Integer> set1
            = new TreeSet<>((a, b) -> nums[a] == nums[b] ? a - b : nums[a] - nums[b]);
        TreeSet<Integer> set2
            = new TreeSet<>((a, b) -> nums[a] == nums[b] ? a - b : nums[a] - nums[b]);
        for (int i = 1; i < n; i++) {
            set1.add(i);
            sum += nums[i];
            if (set1.size() >= k) {
                int x = set1.pollLast();
                sum -= nums[x];
                set2.add(x);
            }
            if (i - dist > 0) {
                result = Math.min(result, sum);
                int temp = i - dist;
                if (set1.contains(temp)) {
                    set1.remove(temp);
                    sum -= nums[temp];
                    if (set2.size() > 0) {
                        int y = set2.pollFirst();
                        sum += nums[y];
                        set1.add(y);
                    }
                } else {
                    set2.remove(i - dist);
                }
            }
        }
        return result + nums[0];
    }
}


or


class Solution {

    public long minimumCost(int[] nums, int k, int dist) {
        PriorityQueue<int[]> rest = new PriorityQueue<>(
            (v1, v2) -> Integer.compare(v1[1], v2[1])
        );
        PriorityQueue<int[]> kMin = new PriorityQueue<>(
            (v1, v2) -> {
                int cmp = Integer.compare(v2[1], v1[1]);
                // important for removing elements from the sliding window
                if (cmp == 0) return Integer.compare(v1[0], v2[0]);
                return cmp;
            }
        );
        long kSum = 0;
        for (int i = 1; i < k; i++) {
            kMin.add(new int[] { i, nums[i] });
            kSum += nums[i];
        }
        int end = k;
        long sum = kSum;
        while (end < nums.length) {
            // start of the sliding window
            int minAllowed = end - dist;
            pop(rest, minAllowed);
            rest.add(new int[] { end, nums[end] });
            // sliding window longer than dist
            if (minAllowed > 1) {
                if (nums[minAllowed - 1] < kMin.peek()[1] || minAllowed - 1 == kMin.peek()[0]) {
                    int[] moved = rest.poll();
                    kMin.add(moved);
                    kSum += moved[1] - nums[minAllowed - 1];
                }
            }
            pop(rest, minAllowed);
            pop(kMin, minAllowed);
            // swap elements if nums[end] we included is smaller than one of kMin
            if (rest.size() > 0 && rest.peek()[1] < kMin.peek()[1]) {
                int[] rem = kMin.poll();
                int[] add = rest.poll();
                rest.add(rem);
                kMin.add(add);
                kSum += add[1] - rem[1];
            }
            sum = Math.min(sum, kSum);
            end++;
        }
        return sum + nums[0];
    }

    private void pop(PriorityQueue<int[]> queue, int start) {
        while (queue.size() > 0 && queue.peek()[0] < start) queue.poll();
    }
}


