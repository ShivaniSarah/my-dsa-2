https://leetcode.com/problems/car-fleet-ii/submissions/1599429321/

There are n cars traveling at different speeds in the same direction along a one-lane road. You are given an array cars of length n, where cars[i] = [positioni, speedi] represents:

positioni is the distance between the ith car and the beginning of the road in meters. It is guaranteed that positioni < positioni+1.
speedi is the initial speed of the ith car in meters per second.
For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.

Return an array answer, where answer[i] is the time, in seconds, at which the ith car collides with the next car, or -1 if the car does not collide with the next car. Answers within 10-5 of the actual answers are accepted.

 

Example 1:

Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.
Example 2:

Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [2.00000,1.00000,1.50000,-1.00000]
 

Constraints:

1 <= cars.length <= 105
1 <= positioni, speedi <= 106
positioni < positioni+1


# java


class Solution {
    public double[] getCollisionTimes(int[][] cars) {
        int n = cars.length;
        double[] ans = new double[n];
        Arrays.fill(ans, -1.0);
        Deque<Integer> stk = new ArrayDeque<>();
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.isEmpty()) {
                int j = stk.peek();
                if (cars[i][1] > cars[j][1]) {
                    double t = (cars[j][0] - cars[i][0]) * 1.0 / (cars[i][1] - cars[j][1]);
                    if (ans[j] < 0 || t <= ans[j]) {
                        ans[i] = t;
                        break;
                    }
                }
                stk.pop();
            }
            stk.push(i);
        }
        return ans;
    }
}

or


class Solution {
    public double[] getCollisionTimes(int[][] cars) {
        int numCars = cars.length; // Number of cars
        double[] collisionTimes = new double[numCars]; // Array to store the collision times
        // Initialize collision times with -1.0, indicating no collision
        Arrays.fill(collisionTimes, -1.0);
        Deque<Integer> stack = new ArrayDeque<>(); // Stack to keep track of cars that have not collided yet

        // Traverse the cars array in reverse
        for (int i = numCars - 1; i >= 0; --i) {
            // Keep checking cars until we find a collision or run out of cars to check
            while (!stack.isEmpty()) {
                int nextCarIndex = stack.peek(); // Get the index of the next car in the stack
              
                // If the current car is faster than the next car, calculate the collision time
                if (cars[i][1] > cars[nextCarIndex][1]) {
                    double timeUntilCollision = (double)(cars[nextCarIndex][0] - cars[i][0]) / (cars[i][1] - cars[nextCarIndex][1]);
                    // Only record the collision if it happens before the next car collides with another car
                    if (collisionTimes[nextCarIndex] < 0 || timeUntilCollision <= collisionTimes[nextCarIndex]) {
                        collisionTimes[i] = timeUntilCollision;
                        break;
                    }
                }
                stack.pop(); // Remove the next car from the stack as there won't be a collision with the current car
            }
            stack.push(i); // Add the current car to the stack
        }
        return collisionTimes; // Return the array containing the collision times for each car
    }
}



or


class Solution {
    class Node {
        int id; // car_id
        double time; // the time for collision with the next car
        
        public Node(int _id, double _time) {
            id = _id;
            time = _time;
        }
    }
    public double[] getCollisionTimes(int[][] cars) {
        PriorityQueue<Node> pq = new PriorityQueue<>(200000, (a, b) -> Double.compare(a.time, b.time));
        
        int n = cars.length;
        for (int i = 0; i < n - 1; ++i) {
            if (cars[i][1] > cars[i+1][1]) { // if there could be collision for i-th car and i+1-th car
                pq.offer(new Node(i, (double)(cars[i+1][0] - cars[i][0]) / (double)(cars[i][1] - cars[i+1][1])));
            }
        }
        
        double[] res = new double[n];
        Arrays.fill(res, -1.0);
        TreeSet<Integer> ts = new TreeSet<>(); // used to record all alive cars
        for (int i = 0; i < n; ++i) {
            ts.add(i);
        }
        
        while (!pq.isEmpty()) {
            Node cur = pq.poll();
            if (res[cur.id] != -1.0) // this means such car is already processed in previous steps
                continue;
            res[cur.id] = cur.time;
            if (ts.lower(cur.id) == null) // if there is no previous car, no need for update
                continue;
            int prev = ts.lower(cur.id); // find the previous alive car
            int next = ts.higher(cur.id); // find the next car, since this is the next car of the previous car now
            if (cars[prev][1] > cars[next][1]) { // update the information of previous car
                pq.offer(new Node(prev, (double)(cars[next][0] - cars[prev][0]) / (double)(cars[prev][1] - cars[next][1]))); 
            }
            ts.remove(cur.id); // such car is dead, remove it
        }
        
        return res;
    }
}

// union find


class Solution {
    public double[] getCollisionTimes(int[][] cars) {
        Queue<int[]> queue = new PriorityQueue<int[]>((a, b)-> (Double.compare(((double)cars[a[1]][0] - cars[a[0]][0])/(cars[a[0]][1] - cars[a[1]][1]) ,((double)cars[b[1]][0] - cars[b[0]][0])/(cars[b[0]][1] - cars[b[1]][1]))));
        int[] groups = new int[cars.length];
        int[] parents = new int[cars.length];
        groups[cars.length-1] = cars.length-1;
        parents[cars.length-1] = cars.length-1;
        for(int i = 0; i < cars.length - 1; i++) {
            if(cars[i][1] > cars[i+1][1]) {
                queue.offer(new int[]{i, i+1});
            }
            
            groups[i] = i;
            parents[i] = i;
        }
        
        double[] ans = new double[cars.length];
        Arrays.fill(ans, -1);
        
        while(!queue.isEmpty()) {
            int[] items = queue.poll();
            if(ans[items[0]] != -1) continue;
            
            ans[items[0]] = ((double)cars[items[1]][0]-cars[items[0]][0]) / (cars[items[0]][1] - cars[items[1]][1]);
            
            groups[items[1]] = items[0];
            int prev = groups[items[1]];
            while(prev != groups[prev]) {
                prev = groups[prev];
            }
            
            prev = prev - 1;
            
            parents[items[0]] = items[1];
            int next = parents[items[0]];
            while(next != parents[next]) {
                next = parents[next];
            }
            
            if(prev < 0 || cars[prev][1] <= cars[next][1]) continue;
            
            queue.offer(new int[]{prev, next});
        }
        
        return ans;
    }
}
