https://leetcode.com/problems/sliding-window-median/

The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle values.

For examples, if arr = [2,3,4], the median is 3.
For examples, if arr = [1,2,3,4], the median is (2 + 3) / 2 = 2.5.
You are given an integer array nums and an integer k. There is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the median array for each window in the original array. Answers within 10-5 of the actual value will be accepted.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]
Explanation: 
Window position                Median
---------------                -----
[1  3  -1] -3  5  3  6  7        1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7        3
 1  3  -1  -3 [5  3  6] 7        5
 1  3  -1  -3  5 [3  6  7]       6
Example 2:

Input: nums = [1,2,3,4,2,3,1,4,2], k = 3
Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]
 

Constraints:

1 <= k <= nums.length <= 105
-231 <= nums[i] <= 231 - 1


# java


/**
 * Using TreeSet. (Here time complexity is most optimized)
 * Here, the remove operation in Java is most optimized
 * Very similar to https://leetcode.com/problems/find-median-from-data-stream/
 *
 * Time Complexity: O((N-K)*log K + N*log K) = O(N * log K)
 * Add Elements = O(N*Log K)
 * Remove Elements = O((N-K)*log K) ==> TreeSet.remove() in JAVA is O(log K)
 *
 * Space Complexity: O(K)
 *
 * N = Length of nums array. K = Input k.
 */
class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        if (nums == null || k <= 0) {
            throw new IllegalArgumentException("Input is invalid");
        }

        int len = nums.length;
        double[] result = new double[len - k + 1];
        if (k == 1) {
            for (int i = 0; i < len; i++) {
                result[i] = (double) nums[i];
            }
            return result;
            // return Arrays.stream(nums).asDoubleStream().toArray();
        }

        Comparator<Integer> comparator = (a, b) -> (nums[a] != nums[b] ? Integer.compare(nums[a], nums[b]) : Integer.compare(a, b));
        TreeSet<Integer> smallNums = new TreeSet<>(comparator.reversed());
        TreeSet<Integer> largeNums = new TreeSet<>(comparator);

        for (int i = 0; i < len; i++) {
            if (i >= k) {
                removeElement(smallNums, largeNums, nums, i - k);
            }
            addElement(smallNums, largeNums, i);
            if (i >= k - 1) {
                result[i - (k - 1)] = getMedian(smallNums, largeNums, nums);
            }
        }

        return result;
    }

    private void addElement(TreeSet<Integer> smallNums, TreeSet<Integer> largeNums, int idx) {
        smallNums.add(idx);
        largeNums.add(smallNums.pollFirst());
        if (smallNums.size() < largeNums.size()) {
            smallNums.add(largeNums.pollFirst());
        }
    }

    private void removeElement(TreeSet<Integer> smallNums, TreeSet<Integer> largeNums, int[] nums, int idx) {
        if (largeNums.contains(idx)) {
            largeNums.remove(idx);
            if (smallNums.size() == largeNums.size() + 2) {
                largeNums.add(smallNums.pollFirst());
            }
        } else {
            smallNums.remove(idx);
            if (smallNums.size() < largeNums.size()) {
                smallNums.add(largeNums.pollFirst());
            }
        }
    }

    private double getMedian(TreeSet<Integer> smallNums, TreeSet<Integer> largeNums, int[] nums) {
        if (smallNums.size() == largeNums.size()) {
            return ((double) nums[smallNums.first()] + nums[largeNums.first()]) / 2;
        }
        return nums[smallNums.first()];
    }
}


or 

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        List<Double> resList = new ArrayList<>();
        int n = nums.length;
        int i = 0;
        int j = k - 1;
        List<Integer> temp = new ArrayList<>();
        for (int x = 0; x < k - 1; x++) {
            temp.add(nums[x]);
        }
        Collections.sort(temp);
        while (j < n) {
            int num = nums[j];
            int insertIdx = Collections.binarySearch(temp, num);
            if (insertIdx < 0) {
                insertIdx = -insertIdx - 1;
            }
            temp.add(insertIdx, num);

            if (k % 2 == 1) {
                double median = (double) temp.get(k / 2);
                resList.add(median);
            } else {
                int idx = k / 2;
                double median1 = (double) temp.get(idx);
                double median2 = (double) temp.get(idx - 1);
                resList.add((median1 + median2) / 2);
            }

            int removeIdx = Collections.binarySearch(temp, nums[i]);
            if (removeIdx < 0) {
                removeIdx = -removeIdx - 1;
            }
            temp.remove(removeIdx);

            i++;
            j++;
        }

        double[] resArray = new double[resList.size()];
        for (int x = 0; x < resList.size(); x++) {
            resArray[x] = resList.get(x);
        }

        return resArray;
    }
}


or


class Solution {
    
    public void addElement (List<Integer> list, int num) {
        
        int index = Collections.binarySearch (list, num);
        index = index < 0 ? Math.abs (index) - 1 : index;
        list.add (index, num);
    }
    
    public void removeElement (List<Integer> list, int num) {
        
        int index = Collections.binarySearch (list, num);
        list.remove (index);
    }
    
    public double findMedian (List<Integer> list, int k) {
        
        return k % 2 == 0 ? ((double) list.get (k / 2 - 1) + list.get (k / 2)) / 2 : list.get (k / 2);
    }
    
    public double[] medianSlidingWindow(int[] nums, int k) {
        
        double[] medianArray = new double[nums.length - k + 1];
        List<Integer> list = new ArrayList<> ();
        
        for (int i = 0, j = 0; i < nums.length; i++) {
            addElement (list, nums[i]);
            
            if (i >= k - 1) {
                medianArray[j++] = findMedian (list, k);
                removeElement (list, nums[i - k + 1]);
            }
        }
        
        return medianArray;
    }
}

// Time Complexity: O(N * log K)
// Space Complexity: O(K)

// TC: O(n * k)

or


class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        int len = nums.length, p = 0;
        double[] sol = new double[len - k + 1];
        boolean flag = (k % 2 == 0);
        List<Integer> list = new ArrayList<>();
        
        //Insert first k-1 elements into the Arraylist 
        for (int j = 0; j < k - 1; j++) list.add(nums[j]);
        
        //sort the initial list with k-1 elements, later on we will just add and remove elements from this sorted list
        Collections.sort(list);
        
        for (int i = k - 1; i < len; i++) {
            //Binary search if the element is already present in the list 
            //below function returns index if the element is present else it returns the  -(expected position +1) , yeah thats the negative sign
            int expectedindex = Collections.binarySearch(list, nums[i]);

            if (expectedindex > -1) {
                list.add(expectedindex + 1, nums[i]); // add just next to it
            } 
            else {
                list.add(Math.abs(expectedindex + 1), nums[i]); // add it in its expected position
            }

            //Insert into the sol list the median according to the value of k 
            if (flag) {
                sol[i - k + 1] = list.get((k / 2) - 1) / 2.0 + list.get((k / 2)) / 2.0;
            } else {
                sol[i - k + 1] = list.get((k / 2));
            }

            // when the window slides by one element, we just find its positon in the sorted list and delete it 
            int index = Collections.binarySearch(list, nums[p]);
            list.remove(index);
            p++;
        }

        return sol;
    }
}
