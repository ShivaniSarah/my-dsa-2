
https://leetcode.com/problems/sequentially-ordinal-rank-tracker/description/

A scenic location is represented by its name and attractiveness score, where name is a unique string among all locations and score is an integer. Locations can be ranked from the best to the worst. The higher the score, the better the location. If the scores of two locations are equal, then the location with the lexicographically smaller name is better.

You are building a system that tracks the ranking of locations with the system initially starting with no locations. It supports:

Adding scenic locations, one at a time.
Querying the ith best location of all locations already added, where i is the number of times the system has been queried (including the current query).
For example, when the system is queried for the 4th time, it returns the 4th best location of all locations already added.
Note that the test data are generated so that at any time, the number of queries does not exceed the number of locations added to the system.

Implement the SORTracker class:

SORTracker() Initializes the tracker system.
void add(string name, int score) Adds a scenic location with name and score to the system.
string get() Queries and returns the ith best location, where i is the number of times this method has been invoked (including this invocation).
 

Example 1:

Input
["SORTracker", "add", "add", "get", "add", "get", "add", "get", "add", "get", "add", "get", "get"]
[[], ["bradford", 2], ["branford", 3], [], ["alps", 2], [], ["orland", 2], [], ["orlando", 3], [], ["alpine", 2], [], []]
Output
[null, null, null, "branford", null, "alps", null, "bradford", null, "bradford", null, "bradford", "orland"]

Explanation
SORTracker tracker = new SORTracker(); // Initialize the tracker system.
tracker.add("bradford", 2); // Add location with name="bradford" and score=2 to the system.
tracker.add("branford", 3); // Add location with name="branford" and score=3 to the system.
tracker.get();              // The sorted locations, from best to worst, are: branford, bradford.
                            // Note that branford precedes bradford due to its higher score (3 > 2).
                            // This is the 1st time get() is called, so return the best location: "branford".
tracker.add("alps", 2);     // Add location with name="alps" and score=2 to the system.
tracker.get();              // Sorted locations: branford, alps, bradford.
                            // Note that alps precedes bradford even though they have the same score (2).
                            // This is because "alps" is lexicographically smaller than "bradford".
                            // Return the 2nd best location "alps", as it is the 2nd time get() is called.
tracker.add("orland", 2);   // Add location with name="orland" and score=2 to the system.
tracker.get();              // Sorted locations: branford, alps, bradford, orland.
                            // Return "bradford", as it is the 3rd time get() is called.
tracker.add("orlando", 3);  // Add location with name="orlando" and score=3 to the system.
tracker.get();              // Sorted locations: branford, orlando, alps, bradford, orland.
                            // Return "bradford".
tracker.add("alpine", 2);   // Add location with name="alpine" and score=2 to the system.
tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.
                            // Return "bradford".
tracker.get();              // Sorted locations: branford, orlando, alpine, alps, bradford, orland.
                            // Return "orland".

class SORTracker {
    private TreeSet<Location> locations = new TreeSet<>(); 
    private Location lastReturned = new Location("", Integer.MAX_VALUE); // Last returned (or equivalent)
    
    public void add(String name, int score) {
        Location location = new Location(name, score);
        locations.add(location);
        
		// If the new location is before the last returned, we need to update the pointer
        if (location.compareTo(lastReturned) < 0) {
            lastReturned = locations.lower(lastReturned);
        }
    }
    
    public String get() {
        // Update the pointer
        lastReturned = locations.higher(lastReturned);
        
        return lastReturned.name;
    }
    
    private static class Location implements Comparable<Location> {
        private final String name;
        private final int score;
        
        public Location(String name, int score) {
            this.name = name;
            this.score = score;
        }
        
        public int compareTo(Location l) {
            // Sort by score (desc), then name (asc)
            return score != l.score ? -Integer.compare(score, l.score) : name.compareTo(l.name);
        }
    }
}


or



public class SORTracker {

    private PriorityQueue<Pair> minPq;
    private PriorityQueue<Pair> maxPq;

    public SORTracker() {
        this.minPq = new PriorityQueue<>();
        this.maxPq = new PriorityQueue<>(Comparator.reverseOrder());
    }

    public void add(String name, int score) {
        Pair pair = new Pair(score, name);
        minPq.add(pair);
        maxPq.add(minPq.poll());
    }

    public String get() {
        Pair pair = maxPq.poll();
        minPq.add(pair);
        return pair.name;
    }

    private static class Pair implements Comparable<Pair> {
        int score;
        String name;

        Pair(int score, String name) {
            this.score = score;
            this.name = name;
        }

        @Override
        public int compareTo(Pair o) {
            if (this.score == o.score)
                return o.name.compareTo(this.name);
            return this.score - o.score;
        }
    }
}

or

class SORTracker {
    private TreeSet<Location> locations = new TreeSet<>(); 
    private Location lastReturned = new Location("", Integer.MAX_VALUE); // Last returned (or equivalent)
    
    public void add(String name, int score) {
        Location location = new Location(name, score);
        locations.add(location);
        
		// If the new location is before the last returned, we need to update the pointer
        if (location.compareTo(lastReturned) < 0) {
            lastReturned = locations.lower(lastReturned);
        }
    }
    
    public String get() {
        // Update the pointer
        lastReturned = locations.higher(lastReturned);
        
        return lastReturned.name;
    }
    
    private static class Location implements Comparable<Location> {
        private final String name;
        private final int score;
        
        public Location(String name, int score) {
            this.name = name;
            this.score = score;
        }
        
        public int compareTo(Location l) {
            // Sort by score (desc), then name (asc)
            return score != l.score ? -Integer.compare(score, l.score) : name.compareTo(l.name);
        }
    }
}


or


class SORTracker {
	int index = 0;
	PriorityQueue<pair> maxH = new PriorityQueue<pair>(
			(a, b) -> (a.score == b.score ? a.name.compareTo(b.name) : b.score - a.score));
	PriorityQueue<pair> minH = new PriorityQueue<pair>(
			(a, b) -> (a.score == b.score ? b.name.compareTo(a.name) : a.score - b.score));

	public void add(String name, int score) {
		pair p = new pair();
		p.name = name;
		p.score = score;
		minH.add(p);
		maxH.add(minH.poll());
	}

	public String get() {
		pair p = maxH.poll();
		minH.add(p);
		index++;
		return p.name;
	}

	public class pair {
		String name;
		int score;
	}
}


or


class SORTracker {

    private TreeMap<Integer, List<String>> map;
    private int queryNum;
    
    // Find suitable position for name in the list
    private int getIndex(String name, List<String> list) {
        int l = 0, r = list.size() - 1, m = 0;
        while (l < r) {
            m = l + (r - l) / 2;
            if(name.compareTo(list.get(m)) > 0) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return name.compareTo(list.get(l)) > 0 ? l+1 : l;
    }
    
    public SORTracker() {
        map = new TreeMap<>((a,b) -> (b-a));
        queryNum = 0;
    }
    
    public void add(String name, int score) {
        List<String> list = map.getOrDefault(score, new ArrayList<>());
        int index = (list.size() == 0) ? 0 : getIndex(name, list);
        list.add(index, name);
        map.put(score, list);
    }
    
    public String get() {
        int index = queryNum;
        for (int score: map.keySet()) {
            if (index < map.get(score).size()) {
                queryNum++;
                return map.get(score).get(index);
            }
            index -= map.get(score).size();
        }
        return "";
    }
}
