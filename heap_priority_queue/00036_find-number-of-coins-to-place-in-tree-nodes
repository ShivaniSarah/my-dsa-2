https://leetcode.com/problems/find-number-of-coins-to-place-in-tree-nodes/description/


You are given an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

You are also given a 0-indexed integer array cost of length n, where cost[i] is the cost assigned to the ith node.

You need to place some coins on every node of the tree. The number of coins to be placed at node i can be calculated as:

If size of the subtree of node i is less than 3, place 1 coin.
Otherwise, place an amount of coins equal to the maximum product of cost values assigned to 3 distinct nodes in the subtree of node i. If this product is negative, place 0 coins.
Return an array coin of size n such that coin[i] is the number of coins placed at node i.

 

Example 1:


Input: edges = [[0,1],[0,2],[0,3],[0,4],[0,5]], cost = [1,2,3,4,5,6]
Output: [120,1,1,1,1,1]
Explanation: For node 0 place 6 * 5 * 4 = 120 coins. All other nodes are leaves with subtree of size 1, place 1 coin on each of them.
Example 2:


Input: edges = [[0,1],[0,2],[1,3],[1,4],[1,5],[2,6],[2,7],[2,8]], cost = [1,4,2,3,5,7,8,-4,2]
Output: [280,140,32,1,1,1,1,1,1]
Explanation: The coins placed on each node are:
- Place 8 * 7 * 5 = 280 coins on node 0.
- Place 7 * 5 * 4 = 140 coins on node 1.
- Place 8 * 2 * 2 = 32 coins on node 2.
- All other nodes are leaves with subtree of size 1, place 1 coin on each of them.
Example 3:


Input: edges = [[0,1],[0,2]], cost = [1,2,-2]
Output: [0,1,1]
Explanation: Node 1 and 2 are leaves with subtree of size 1, place 1 coin on each of them. For node 0 the only possible product of cost is 2 * 1 * -2 = -4. Hence place 0 coins on node 0.
 

Constraints:

2 <= n <= 2 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
cost.length == n
1 <= |cost[i]| <= 104
The input is generated such that edges represents a valid tree.



# java


Solution 1: DFS + Sorting


class Solution {
    private int[] cost;
    private List<Integer>[] g;
    private long[] ans;

    public long[] placedCoins(int[][] edges, int[] cost) {
        int n = cost.length;
        this.cost = cost;
        ans = new long[n];
        g = new List[n];
        Arrays.fill(ans, 1);
        Arrays.setAll(g, i -> new ArrayList<>());
        for (int[] e : edges) {
            int a = e[0], b = e[1];
            g[a].add(b);
            g[b].add(a);
        }
        dfs(0, -1);
        return ans;
    }

    private List<Integer> dfs(int a, int fa) {
        List<Integer> res = new ArrayList<>();
        res.add(cost[a]);
        for (int b : g[a]) {
            if (b != fa) {
                res.addAll(dfs(b, a));
            }
        }
        Collections.sort(res);
        int m = res.size();
        if (m >= 3) {
            long x = (long) res.get(m - 1) * res.get(m - 2) * res.get(m - 3);
            long y = (long) res.get(0) * res.get(1) * res.get(m - 1);
            ans[a] = Math.max(0, Math.max(x, y));
        }
        if (m >= 5) {
            res = List.of(res.get(0), res.get(1), res.get(m - 3), res.get(m - 2), res.get(m - 1));
        }
        return res;
    }
}


or


import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

class Solution {
    private int[] nodeCosts;
    private List<Integer>[] graph;
    private long[] maxProduct;

    // Method to calculate the maximum product of any 3 coins placed in the tree
    public long[] placedCoins(int[][] edges, int[] costs) {
        int numNodes = costs.length;
        this.nodeCosts = costs;
        maxProduct = new long[numNodes];
        graph = new List[numNodes];

        // Initialize the maxProduct array with 1 for all nodes (default value)
        Arrays.fill(maxProduct, 1);

        // Initialize adjacency list representation of the graph
        Arrays.setAll(graph, i -> new ArrayList<>());
      
        // Build the undirected graph from the edges input
        for (int[] edge : edges) {
            int nodeA = edge[0], nodeB = edge[1];
            graph[nodeA].add(nodeB);
            graph[nodeB].add(nodeA);
        }

        // Run the depth-first search starting from node 0 without a parent
        dfs(0, -1);

        return maxProduct;
    }

    private List<Integer> dfs(int node, int parent) {
        // Create a list that will hold the costs of node's subtree, including itself
        List<Integer> subtreeCosts = new ArrayList<>();
        subtreeCosts.add(nodeCosts[node]);
      
        // Go through all neighbors of the current node
        for (int neighbor : graph[node]) {
            // Skip the parent to prevent going back through the tree
            if (neighbor != parent) {
                // Add all costs from the subtree to the current node's list
                subtreeCosts.addAll(dfs(neighbor, node));
            }
        }

        // Sort the node costs to easily select the three largest or smallest
        Collections.sort(subtreeCosts);

        // Calculate the product, taking care of possible overflows
        int size = subtreeCosts.size();
        if (size >= 3) {
            // Get the maximum product of the 3 largest or 3 smallest costs
            long product1 = (long) subtreeCosts.get(size - 1) * subtreeCosts.get(size - 2) * subtreeCosts.get(size - 3);
            long product2 = (long) subtreeCosts.get(0) * subtreeCosts.get(1) * subtreeCosts.get(size - 1);
            maxProduct[node] = Math.max(0, Math.max(product1, product2));
        }

        // Trim the list to only include the 5 largest costs if there are more than 5 elements
        if (size >= 5) {
            subtreeCosts = Arrays.asList(
                subtreeCosts.get(0),
                subtreeCosts.get(1),
                subtreeCosts.get(size - 3),
                subtreeCosts.get(size - 2),
                subtreeCosts.get(size - 1)
            );
        }
      
        return subtreeCosts;
    }
}

or


class Solution {
    public long[] placedCoins(int[][] edges, int[] cost) {
        Map<Integer, List<Integer>> map = new HashMap();
        for(int[] edge: edges) {
            map.putIfAbsent(edge[0], new ArrayList());
            map.putIfAbsent(edge[1], new ArrayList());
            map.get(edge[0]).add(edge[1]);
            map.get(edge[1]).add(edge[0]);
        }
        int n = cost.length;
        long[] ans = new long[n];
        Arrays.fill(ans, 0l);
        boolean[] visited = new boolean[n];
        dfs(map, cost, ans, 0, visited);
        return ans;
    }
    
    public List<Integer> dfs(Map<Integer, List<Integer>> map, int[] cost, long[] ans, int curr, boolean[] visited) {
        
        visited[curr] = true;
        
        List<Integer> temp = new ArrayList();
        for(int adj: map.get(curr)) {
            if(!visited[adj])
                temp.addAll(dfs(map, cost, ans, adj, visited));
        }
        temp.add(cost[curr]);
        Collections.sort(temp);
        
        int n = temp.size();
        if(n >= 3) {
            // if first 2 are minus pick them
            long left = (long) temp.get(0) * temp.get(1);
            long right = (long) temp.get(n-3) * temp.get(n-2);
            ans[curr] = Math.max(0, Math.max(left, right) * temp.get(n-1));
        } else {
            ans[curr] = 1;
        }
        
        if(n <= 5) return temp;
        
        return new ArrayList<>(Arrays.asList(temp.get(0), temp.get(1), temp.get(n - 3), temp.get(n - 2), temp.get(n - 1)));
    }
}
