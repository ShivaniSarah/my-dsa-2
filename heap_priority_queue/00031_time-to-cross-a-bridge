https://leetcode.com/problems/time-to-cross-a-bridge/

There are k workers who want to move n boxes from the right (old) warehouse to the left (new) warehouse. You are given the two integers n and k, and a 2D integer array time of size k x 4 where time[i] = [righti, picki, lefti, puti].

The warehouses are separated by a river and connected by a bridge. Initially, all k workers are waiting on the left side of the bridge. To move the boxes, the ith worker can do the following:

Cross the bridge to the right side in righti minutes.
Pick a box from the right warehouse in picki minutes.
Cross the bridge to the left side in lefti minutes.
Put the box into the left warehouse in puti minutes.
The ith worker is less efficient than the jth worker if either condition is met:

lefti + righti > leftj + rightj
lefti + righti == leftj + rightj and i > j
The following rules regulate the movement of the workers through the bridge:

Only one worker can use the bridge at a time.
When the bridge is unused prioritize the least efficient worker (who have picked up the box) on the right side to cross. If not, prioritize the least efficient worker on the left side to cross.
If enough workers have already been dispatched from the left side to pick up all the remaining boxes, no more workers will be sent from the left side.
Return the elapsed minutes at which the last box reaches the left side of the bridge.

 

Example 1:

Input: n = 1, k = 3, time = [[1,1,2,1],[1,1,3,1],[1,1,4,1]]

Output: 6

Explanation:

From 0 to 1 minutes: worker 2 crosses the bridge to the right.
From 1 to 2 minutes: worker 2 picks up a box from the right warehouse.
From 2 to 6 minutes: worker 2 crosses the bridge to the left.
From 6 to 7 minutes: worker 2 puts a box at the left warehouse.
The whole process ends after 7 minutes. We return 6 because the problem asks for the instance of time at which the last worker reaches the left side of the bridge.
Example 2:

Input: n = 3, k = 2, time = [[1,5,1,8],[10,10,10,10]]

Output: 37

Explanation:


The last box reaches the left side at 37 seconds. Notice, how we do not put the last boxes down, as that would take more time, and they are already on the left with the workers.

 

Constraints:

1 <= n, k <= 104
time.length == k
time[i].length == 4
1 <= lefti, picki, righti, puti <= 1000


# java

class Solution {
    public int findCrossingTime(int n, int k, int[][] time) {
        int[][] t = new int[k][5];
        for (int i = 0; i < k; ++i) {
            int[] x = time[i];
            t[i] = new int[] {x[0], x[1], x[2], x[3], i};
        }
        Arrays.sort(t, (a, b) -> {
            int x = a[0] + a[2], y = b[0] + b[2];
            return x == y ? a[4] - b[4] : x - y;
        });
        int cur = 0;
        PriorityQueue<Integer> waitInLeft = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<Integer> waitInRight = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<int[]> workInLeft = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        PriorityQueue<int[]> workInRight = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < k; ++i) {
            waitInLeft.offer(i);
        }
        while (true) {
            while (!workInLeft.isEmpty()) {
                int[] p = workInLeft.peek();
                if (p[0] > cur) {
                    break;
                }
                waitInLeft.offer(workInLeft.poll()[1]);
            }
            while (!workInRight.isEmpty()) {
                int[] p = workInRight.peek();
                if (p[0] > cur) {
                    break;
                }
                waitInRight.offer(workInRight.poll()[1]);
            }
            boolean leftToGo = n > 0 && !waitInLeft.isEmpty();
            boolean rightToGo = !waitInRight.isEmpty();
            if (!leftToGo && !rightToGo) {
                int nxt = 1 << 30;
                if (!workInLeft.isEmpty()) {
                    nxt = Math.min(nxt, workInLeft.peek()[0]);
                }
                if (!workInRight.isEmpty()) {
                    nxt = Math.min(nxt, workInRight.peek()[0]);
                }
                cur = nxt;
                continue;
            }
            if (rightToGo) {
                int i = waitInRight.poll();
                cur += t[i][2];
                if (n == 0 && waitInRight.isEmpty() && workInRight.isEmpty()) {
                    return cur;
                }
                workInLeft.offer(new int[] {cur + t[i][3], i});
            } else {
                int i = waitInLeft.poll();
                cur += t[i][0];
                --n;
                workInRight.offer(new int[] {cur + t[i][1], i});
            }
        }
    }
}


or


import java.util.Arrays;
import java.util.PriorityQueue;

class Solution {
    public int findCrossingTime(int totalPerson, int totalPasses, int[][] times) {
        // Standardize the times array with additional index to maintain original order
        int[][] standardizedTimes = new int[totalPasses][5];
        for (int i = 0; i < totalPasses; ++i) {
            int[] currentPass = times[i];
            standardizedTimes[i] = new int[]{currentPass[0], currentPass[1], currentPass[2], currentPass[3], i};
        }

        // Sort the standardized times based on the sum of arriveLeft + crossToLeft
        // and if they are the same, sort by the original index
        Arrays.sort(standardizedTimes, (a, b) -> {
            int timeA = a[0] + a[2];
            int timeB = b[0] + b[2];
            return timeA == timeB ? a[4] - b[4] : timeA - timeB;
        });
      
        // Initialize the current time
        int currentTime = 0;
      
        // Priority queues for keeping track of the waiting times
        PriorityQueue<Integer> waitingLeft = new PriorityQueue<>((a, b) -> b - a);
        PriorityQueue<Integer> waitingRight = new PriorityQueue<>((a, b) -> b - a);
      
        // Priority queues for keeping track of the work times (i.e. crossing times)
        PriorityQueue<int[]> workingLeft = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        PriorityQueue<int[]> workingRight = new PriorityQueue<>((a, b) -> a[0] - b[0]);
      
        // Initially, fill the waitingLeft queue with all persons
        for (int i = 0; i < totalPasses; ++i) {
            waitingLeft.offer(i);
        }
      
        // Process until there are no persons left to cross or waiting for crossing
        while (true) {
            // Move from workingLeft to waitingLeft if the working time is past
            while (!workingLeft.isEmpty() && workingLeft.peek()[0] <= currentTime) {
                waitingLeft.offer(workingLeft.poll()[1]);
            }
          
            // Move from workingRight to waitingRight if the working time is past
            while (!workingRight.isEmpty() && workingRight.peek()[0] <= currentTime) {
                waitingRight.offer(workingRight.poll()[1]);
            }
          
            // Determine if there are persons to go from left and right
            boolean leftToGo = totalPerson > 0 && !waitingLeft.isEmpty();
            boolean rightToGo = !waitingRight.isEmpty();
          
            // If no one is left to go from either side, find the next event time
            if (!leftToGo && !rightToGo) {
                int nextEventTime = Integer.MAX_VALUE;
                if (!workingLeft.isEmpty()) {
                    nextEventTime = Math.min(nextEventTime, workingLeft.peek()[0]);
                }
                if (!workingRight.isEmpty()) {
                    nextEventTime = Math.min(nextEventTime, workingRight.peek()[0]);
                }
                currentTime = nextEventTime;
                continue;
            }
          
            // Move persons from right to left
            if (rightToGo) {
                int index = waitingRight.poll();
                currentTime += standardizedTimes[index][2];
                // Check for completion condition when no one is left to cross
                if (totalPerson == 0 && waitingRight.isEmpty() && workingRight.isEmpty()) {
                    return currentTime;
                }
                workingLeft.offer(new int[]{currentTime + standardizedTimes[index][3], index});
            } else {
                // Move persons from left to right
                int index = waitingLeft.poll();
                currentTime += standardizedTimes[index][0];
                totalPerson--;
                workingRight.offer(new int[]{currentTime + standardizedTimes[index][1], index});
            }
        }
    }
}


or

class Solution {
    public int findCrossingTime(int n, int k, int[][] time) {
        int ans = 0, free = 0; 
        PriorityQueue<int[]> l = new PriorityQueue<>((a, b)->(a[0]-b[0])); 
        PriorityQueue<int[]> r = new PriorityQueue<>((a, b)->(a[0]-b[0])); 
        PriorityQueue<int[]> ll = new PriorityQueue<>((a, b)->(a[0] != b[0] ? b[0]-a[0] : b[1]-a[1]));
        PriorityQueue<int[]> rr = new PriorityQueue<>((a, b)->(a[0] != b[0] ? b[0]-a[0] : b[1]-a[1])); 
        for (int i = 0; i < time.length; ++i) 
            ll.add(new int[]{time[i][0]+time[i][2], i}); 
        while (n > 0 || r.size() > 0 || rr.size() > 0) {
            if (rr.isEmpty() && (r.isEmpty() || r.peek()[0] > free) && (n == 0 || ll.isEmpty() && (l.isEmpty() || l.peek()[0] > free))) {
                int cand = Integer.MAX_VALUE; 
                if (n > 0 && l.size() > 0) cand = Math.min(cand, l.peek()[0]); 
                if (r.size() > 0) cand = Math.min(cand, r.peek()[0]); 
                free = cand; 
            }
            while (l.size() > 0 && l.peek()[0] <= free) {
                int i = l.poll()[1]; 
                ll.add(new int[] {time[i][0] + time[i][2], i}); 
            }
            while (r.size() > 0 && r.peek()[0] <= free) {
                int i = r.poll()[1]; 
                rr.add(new int[] {time[i][0] + time[i][2], i}); 
            }
            if (rr.size() > 0) {
                int i = rr.poll()[1]; 
                free += time[i][2]; 
                if (n > 0) l.add(new int[] {free+time[i][3], i}); 
                else ans = Math.max(ans, free); 
            } else {
                int i = ll.poll()[1]; 
                free += time[i][0]; 
                r.add(new int[] {free+time[i][1], i}); 
                --n; 
            }
        }
        return ans; 
    }
}

