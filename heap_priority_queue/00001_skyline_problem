https://leetcode.com/problems/the-skyline-problem/


A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array buildings where buildings[i] = [lefti, righti, heighti]:

lefti is the x coordinate of the left edge of the ith building.
righti is the x coordinate of the right edge of the ith building.
heighti is the height of the ith building.
You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height 0.

The skyline should be represented as a list of "key points" sorted by their x-coordinate in the form [[x1,y1],[x2,y2],...]. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate 0 and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, [...,[2 3],[4 5],[7 5],[11 5],[12 7],...] is not acceptable; the three lines of height 5 should be merged into one in the final output as such: [...,[2 3],[4 5],[12 7],...]


Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.
Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.
Example 2:

Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]


# java

// tree map

class Solution {
    // Time complexity: O(n log n)
// Space complexity: O(n)

public List<List<Integer>> getSkyline(int[][] buildings) {
	List<int[]> heights = new ArrayList<>();

	for (int[] building : buildings) {
		heights.add(new int[] { building[0], -building[2] }); 
		heights.add(new int[] { building[1], building[2] });
	}

	Collections.sort(heights, (a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);
	List<List<Integer>> result = new ArrayList<>();

	TreeMap<Integer, Integer> treeMap = new TreeMap<>();
	treeMap.put(0, 1);

	int maxHeight = 0;

	for (int[] height: heights) {
		if (height[1] < 0) {
			treeMap.put(-height[1], treeMap.getOrDefault(-height[1], 0) + 1);
		} else {
			treeMap.put(height[1], treeMap.get(height[1]) - 1);
			if(treeMap.get(height[1]) == 0) 
				treeMap.remove(height[1]);
		}
		
		int currMaxHeight = treeMap.lastKey();

		if (currMaxHeight != maxHeight) {
			result.add(List.of(height[0], currMaxHeight));
			maxHeight = currMaxHeight;
		}
	}

	return result;
}
}

TC: O( n log n )

or

// using priority queue

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
	List<int[]> heights = new ArrayList<>();

	for (int[] building : buildings) {
		heights.add(new int[] { building[0], -building[2] }); 
		heights.add(new int[] { building[1], building[2] });
	}

	Collections.sort(heights, (a, b) -> a[0] != b[0] ? a[0] - b[0] : a[1] - b[1]);
	List<List<Integer>> result = new ArrayList<>();

	Queue<Integer> maxHeap = new PriorityQueue<>((a, b) -> b - a);
	maxHeap.offer(0);

	int maxHeight = 0;

	for (int[] height: heights) {
		if (height[1] < 0) 
			maxHeap.offer(- height[1]);
		else
			maxHeap.remove(height[1]);

		int currMaxHeight = maxHeap.peek();

		if (currMaxHeight != maxHeight) {
			result.add(List.of(height[0], currMaxHeight));
			maxHeight = currMaxHeight;
		}
	}

	return result;
}
}


TC: O(n^2)
Sorting: O(n log n)

Processing: O(nÂ²) (due to inefficient remove() in heap)

ðŸ”¹ Final Time Complexity: O(nÂ²)
ðŸ”¹ Final Space Complexity: O(n)


or


// line sweep + heap


class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        List<int[]> events = new ArrayList<>();
        for (int[] b : buildings) {
            events.add(new int[]{b[0], -b[2]}); // start of building
            events.add(new int[]{b[1], b[2]});  // end of building
        }

        // Sort by x. If x is same, process higher height first
        events.sort((a, b) -> {
            if (a[0] != b[0]) return a[0] - b[0];
            return a[1] - b[1];
        });

        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        maxHeap.add(0); // ground level
        int prevMaxHeight = 0;

        Map<Integer, Integer> toRemove = new HashMap<>();

        for (int[] event : events) {
            int x = event[0], h = event[1];
            if (h < 0) { // start of building
                maxHeap.add(-h);
            } else { // end of building
                toRemove.put(h, toRemove.getOrDefault(h, 0) + 1);
            }

            // Remove heights marked for deletion
            while (!maxHeap.isEmpty() && toRemove.getOrDefault(maxHeap.peek(), 0) > 0) {
                int top = maxHeap.poll();
                toRemove.put(top, toRemove.get(top) - 1);
            }

            int currentMaxHeight = maxHeap.peek();
            if (currentMaxHeight != prevMaxHeight) {
                result.add(Arrays.asList(x, currentMaxHeight));
                prevMaxHeight = currentMaxHeight;
            }
        }

        return result;
    }
}

or

// divide and conquer

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        return divide(buildings, 0, buildings.length - 1);
    }

    private List<List<Integer>> divide(int[][] buildings, int l, int r) {
        List<List<Integer>> res = new ArrayList<>();
        if (l > r) return res;

        if (l == r) {
            int left = buildings[l][0];
            int right = buildings[l][1];
            int height = buildings[l][2];
            res.add(Arrays.asList(left, height));
            res.add(Arrays.asList(right, 0));
            return res;
        }

        int mid = (l + r) / 2;
        List<List<Integer>> leftSkyline = divide(buildings, l, mid);
        List<List<Integer>> rightSkyline = divide(buildings, mid + 1, r);
        return merge(leftSkyline, rightSkyline);
    }

    private List<List<Integer>> merge(List<List<Integer>> left, List<List<Integer>> right) {
        List<List<Integer>> result = new ArrayList<>();
        int h1 = 0, h2 = 0, i = 0, j = 0;

        while (i < left.size() && j < right.size()) {
            List<Integer> point1 = left.get(i);
            List<Integer> point2 = right.get(j);
            int x, maxHeight;

            if (point1.get(0) < point2.get(0)) {
                x = point1.get(0);
                h1 = point1.get(1);
                maxHeight = Math.max(h1, h2);
                i++;
            } else if (point1.get(0) > point2.get(0)) {
                x = point2.get(0);
                h2 = point2.get(1);
                maxHeight = Math.max(h1, h2);
                j++;
            } else {
                x = point1.get(0);
                h1 = point1.get(1);
                h2 = point2.get(1);
                maxHeight = Math.max(h1, h2);
                i++;
                j++;
            }

            if (result.isEmpty() || result.get(result.size() - 1).get(1) != maxHeight) {
                result.add(Arrays.asList(x, maxHeight));
            }
        }

        while (i < left.size()) result.add(left.get(i++));
        while (j < right.size()) result.add(right.get(j++));
        return result;
    }
}

or

// Segment Tree + Compression

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        TreeSet<Integer> coords = new TreeSet<>();
        for (int[] b : buildings) {
            coords.add(b[0]);
            coords.add(b[1]);
        }

        // Coordinate compression
        List<Integer> coordList = new ArrayList<>(coords);
        Map<Integer, Integer> coordIndex = new HashMap<>();
        for (int i = 0; i < coordList.size(); i++) {
            coordIndex.put(coordList.get(i), i);
        }

        int m = coordList.size();
        SegmentTree seg = new SegmentTree(m);

        // Update segment tree with building heights
        for (int[] b : buildings) {
            int l = coordIndex.get(b[0]);
            int r = coordIndex.get(b[1]) - 1;  // right is exclusive in compressed form
            seg.update(l, r, b[2]);
        }

        // Traverse x coords to build skyline
        List<List<Integer>> res = new ArrayList<>();
        int prev = 0;
        for (int i = 0; i < m; i++) {
            int height = seg.query(i);
            if (res.isEmpty() || res.get(res.size() - 1).get(1) != height) {
                res.add(Arrays.asList(coordList.get(i), height));
            }
        }

        return res;
    }

    static class SegmentTree {
        int[] tree, lazy;
        int size;

        SegmentTree(int n) {
            size = n * 4;
            tree = new int[size];
            lazy = new int[size];
        }

        void push(int node, int l, int r) {
            if (lazy[node] != 0) {
                tree[node] = Math.max(tree[node], lazy[node]);
                if (l != r) {
                    lazy[node * 2] = Math.max(lazy[node * 2], lazy[node]);
                    lazy[node * 2 + 1] = Math.max(lazy[node * 2 + 1], lazy[node]);
                }
                lazy[node] = 0;
            }
        }

        void update(int ql, int qr, int val) {
            update(1, 0, size / 4 - 1, ql, qr, val);
        }

        void update(int node, int l, int r, int ql, int qr, int val) {
            push(node, l, r);
            if (r < ql || l > qr) return;
            if (ql <= l && r <= qr) {
                lazy[node] = val;
                push(node, l, r);
                return;
            }
            int mid = (l + r) / 2;
            update(node * 2, l, mid, ql, qr, val);
            update(node * 2 + 1, mid + 1, r, ql, qr, val);
            tree[node] = Math.max(tree[node * 2], tree[node * 2 + 1]);
        }

        int query(int index) {
            return query(1, 0, size / 4 - 1, index);
        }

        int query(int node, int l, int r, int index) {
            push(node, l, r);
            if (l == r) return tree[node];
            int mid = (l + r) / 2;
            if (index <= mid) return query(node * 2, l, mid, index);
            else return query(node * 2 + 1, mid + 1, r, index);
        }
    }
}


or

Binary Indexed Tree or Fenwick Tree way is not suited for this as it is for prefix sum and not for range updates.

or

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        // find unique edges
        Set<Integer> edgeSets = new HashSet<>();
        for (int[] building : buildings) {
            edgeSets.add(building[0]);
            edgeSets.add(building[1]);
        }
        // sort the edges from left to right
        List<Integer> edgeList = new ArrayList<>(edgeSets);
        Collections.sort(edgeList);

        // build a map from edge to its index order
        Map<Integer, Integer> edgeIndexMap = new HashMap<>();
        for (int i = 0; i < edgeList.size(); i++) {
            int edge = edgeList.get(i);
            edgeIndexMap.put(edge, i);
        }

        // for each building, fill all heights between (left, right]
        int[] heights = new int[edgeList.size()];
        for (int[] building : buildings) {
            int left = building[0];
            int right = building[1];
            int height = building[2];

            int leftIndex = edgeIndexMap.get(left);
            int rightIndex = edgeIndexMap.get(right);
            for (int i = leftIndex; i < rightIndex; i++) {
                heights[i] = Math.max(heights[i], height);
            }
        }

        // collect the edge and its height, drop the same heights
        List<List<Integer>> answers = new ArrayList<>();
        int prevHeight = 0;
        for (int i = 0; i < edgeList.size(); i++) {
            int edge = edgeList.get(i);
            int height = heights[i];
            if (prevHeight != height) {
                answers.add(Arrays.asList(edge, height));
            }
            prevHeight = height;
        }
        return answers;
    }
}

TC: O(n * k + k log k)

or

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        TreeMap<Integer, List<int[]>> coor=new TreeMap<>(); //treeset for maintaing sorted coordinates
        for(int[] b: buildings) {
            //add left coordinate
            int arr[]=new int[2];
            List<int[]> l=coor.getOrDefault(b[0], new ArrayList<>());
            arr[0]=b[1]; //right coordinate
            arr[1]=b[2]; //height
            l.add(arr);
            coor.put(b[0], l);
            //add right coordinate
            arr=new int[2];
            l=coor.getOrDefault(b[1], new ArrayList<>());
            arr[0]=b[1]; //right coordinate
            arr[1]=b[2];//height
            l.add(arr);
            coor.put(b[1], l);
        }
        Queue<int[]> pq=new PriorityQueue<>((i, j)->(j[1]-i[1])); //max heap
        List<List<Integer>> ret=new ArrayList<>(); //answer list
        int lastLineHeight=-1; //last height 
        for(Map.Entry<Integer, List<int[]>> e: coor.entrySet()) {
            int x=e.getKey();
            List<int[]> val=e.getValue();
			//adding values in priority queue
            for(int[] a: val) {
                pq.add(a);
            }
            //removing those buildings whose right coordinate is already passed x
            while(!pq.isEmpty() && (pq.peek())[0]<=x) 
                pq.poll();
            
            int cur[]=new int[2];
            if(!pq.isEmpty()) {
                cur=pq.peek(); 
            } else {
			//priority queue is empty so adding 0
                cur[0]=x;
                cur[1]=0;
            }
            List<Integer> ans=new ArrayList<>();
            
            if(lastLineHeight!=cur[1]) { //last line should not be equal to current largest height building
                ans.add(x);
                ans.add(cur[1]);
                lastLineHeight=cur[1];
            }
            if(!ans.isEmpty())
            ret.add(ans);
        }
        return ret; //returning answer
    }
}

or

class Solution {

public List<List<Integer>> getSkyline(int[][] buildings) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        int numOfBuildings = buildings.length;
        // Decreasing order of priority queue
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] a, int[] b){
                return b[2]-a[2];
            }
        });
        
        int x = numOfBuildings==0?Integer.MAX_VALUE:buildings[0][0],next=0;
        pq.offer(new int[]{Integer.MIN_VALUE,Integer.MAX_VALUE,0});
        
        // till atleast one buildings need to be seen
        // or the pq has atleast 1 building
        while(x!=Integer.MAX_VALUE || next<numOfBuildings || pq.size()>1){
            // remove all the peaks out of bounds
            while(pq.size()>1 && pq.peek()[1]<=x){
                // the peak building has become out of bounds, remove it
                pq.poll();
            }
            
            // Add the next building if in bound
            while(next<numOfBuildings && x==buildings[next][0]) pq.offer(buildings[next++]);
            
            // Add current peak building if not equal to last added peak building height
            if(ans.size()==0 || pq.peek()[2]!=ans.get(ans.size()-1).get(1)) ans.add(
                Arrays.asList(new Integer[]{x,pq.peek()[2]})
            );
            
            // The next x position is either when the prev peak goes out of bound
            // or the next building comes into picture(that may or may not change the skyline)
            x = Math.min(pq.peek()[1],next>=numOfBuildings?Integer.MAX_VALUE:buildings[next][0]);
        }
        
        return ans;
    }
}

or


class Solution {
  
    // Function to calculate the skyline of a set of buildings
    public List<int[]> getSkyline(int[][] buildings) {
        Set<Integer> positions = new TreeSet<>(); // TreeSet to hold unique, sorted positions (edges of buildings)
        Map<Integer, Integer> positionIndexMap = new HashMap<>(); // Maps original positions to their index after compression

        // Collect all potential start and end points from the buildings
        for (int[] building : buildings) {
            positions.add(building[0]);
            positions.add(building[1]);
        }

        // Create a map from position to index (for easier access, reduction of positions)
        int index = 0;
        for (int pos : positions) {
            positionIndexMap.put(pos, index++);
        }

        // Create an array to store the maximum height at each position
        int[] heights = new int[positionIndexMap.size()];
      
        // Determine the maximum height for each compressed position
        for (int[] building : buildings) {
            int beginIndex = positionIndexMap.get(building[0]); // Compressed start index
            int endIndex = positionIndexMap.get(building[1]); // Compressed end index
          
            // Set the maximum height within the range of the current building
            for (int i = beginIndex; i < endIndex; ++i) {
                heights[i] = Math.max(heights[i], building[2]);
            }
        }

        List<int[]> result = new ArrayList<>(); // List to hold the skyline points
      
        // Iterator to track positions
        Integer previousPosition = null;
      
        // Construct the result list with actual positions and the corresponding heights
        for (int pos : positions) {
            int mappedIndex = positionIndexMap.get(pos);
            int currentHeight = heights[mappedIndex];

            // Add point to skyline if it is the start or height changes
            if (previousPosition == null || currentHeight != heights[positionIndexMap.get(previousPosition)]) {
                result.add(new int[]{pos, currentHeight});
                previousPosition = pos; // Update the previousPosition after adding to result
            }
        }

        return result; // Return the result skyline
    }
}
