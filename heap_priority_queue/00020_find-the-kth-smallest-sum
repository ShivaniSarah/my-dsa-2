https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/submissions/1599383095/

You are given an m x n matrix mat that has its rows sorted in non-decreasing order and an integer k.

You are allowed to choose exactly one element from each row to form an array.

Return the kth smallest array sum among all possible arrays.

 

Example 1:

Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.
Example 2:

Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17
Example 3:

Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  

# java

class Solution {
	public int kthSmallest(int[][] mat, int k) {
		int[] row = mat[0];

		for (int i = 1; i < mat.length; i++)
			row = kSmallestPairSums(row, mat[i], k);
		return row[k - 1];
	}

	private int[] kSmallestPairSums(int[] nums1, int[] nums2, int k) {
		List<Integer> list = new ArrayList<>();
		Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] + a[1]) - (b[0] + b[1]));

		for (int i = 0; i < k && i < nums1.length; i++)
			minHeap.offer(new int[] {nums1[i], nums2[0], 0});

		for (int i = 0; i < k && !minHeap.isEmpty(); i++) {
			int[] candidate = minHeap.poll();
			list.add(candidate[0] + candidate[1]);
            int nums2Idx = candidate[2];
			if (nums2Idx < nums2.length - 1)
				minHeap.offer(new int[] {candidate[0], nums2[nums2Idx + 1], nums2Idx + 1});
		}
        
		return list.stream().mapToInt(i -> i).toArray();
	}
} 


or


import java.util.*;

class Solution {
    public int kthSmallest(int[][] mat, int k) {
        int m = mat.length;
        int n = Math.min(mat[0].length, k);

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        pq.offer(0);

        for (int i = 0; i < m; i++) {
            PriorityQueue<Integer> nextPq = new PriorityQueue<>(Collections.reverseOrder());
            while (!pq.isEmpty()) {
                int val = pq.poll();
                for (int j = 0; j < n; j++) {
                    nextPq.offer(val + mat[i][j]);
                    if (nextPq.size() > k) {
                        nextPq.poll(); // remove largest
                    }
                }
            }
            pq = nextPq;
        }
        return pq.peek();
    }
}


or


class Solution {
	public int kthSmallest(int[][] mat, int k) {
		int[] row = mat[0];

		for (int i = 1; i < mat.length; i++)
			row = kSmallestPairSums(row, mat[i], k);
		return row[k - 1];
	}

	private int[] kSmallestPairSums(int[] nums1, int[] nums2, int k) {
		List<Integer> list = new ArrayList<>();
		Queue<int[]> minHeap = new PriorityQueue<>((a, b) -> (a[0] + a[1]) - (b[0] + b[1]));

		for (int i = 0; i < k && i < nums1.length; i++)
			minHeap.offer(new int[] {nums1[i], nums2[0], 0});

		for (int i = 0; i < k && !minHeap.isEmpty(); i++) {
			int[] candidate = minHeap.poll();
			list.add(candidate[0] + candidate[1]);
            int nums2Idx = candidate[2];
			if (nums2Idx < nums2.length - 1)
				minHeap.offer(new int[] {candidate[0], nums2[nums2Idx + 1], nums2Idx + 1});
		}
        
		return list.stream().mapToInt(i -> i).toArray();
	}
}

or


class Solution {
    public int kthSmallest(int[][] mat, int k) {
        int m = mat.length, n = mat[0].length;
        List<Integer> pre = new ArrayList<>(k);
        List<Integer> cur = new ArrayList<>(n * k);
        pre.add(0);
        for (int[] row : mat) {
            cur.clear();
            for (int a : pre) {
                for (int b : row) {
                    cur.add(a + b);
                }
            }
            Collections.sort(cur);
            pre.clear();
            for (int i = 0; i < Math.min(k, cur.size()); ++i) {
                pre.add(cur.get(i));
            }
        }
        return pre.get(k - 1);
    }
}

or


class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        // Get the dimensions of the matrix.
        int rows = matrix.length;
        int cols = matrix[0].length;
      
        // Initialize a list to store the previous row's computations.
        List<Integer> previousRowSums = new ArrayList<>(k);
      
        // Initialize a list to store the current row's computations.
        List<Integer> currentRowSums = new ArrayList<>(cols * k);
      
        // Start with 0 as the only element for an empty prefix sum.
        previousRowSums.add(0);
      
        // Iterate through each row of the matrix.
        for (int[] row : matrix) {
            // Clear the current sums list for new calculations.
            currentRowSums.clear();
          
            // Combine each element from the previous list with each element of the current row.
            for (int prevSum : previousRowSums) {
                for (int value : row) {
                    // Add the sum to the current list.
                    currentRowSums.add(prevSum + value);
                }
            }
          
            // Sort the current list to prepare for selecting the smallest k elements.
            Collections.sort(currentRowSums);
          
            // Clear the previous sums list to reuse it for the next iteration.
            previousRowSums.clear();
          
            // Take the first k elements from the current list, or the entire list if it's smaller than k.
            for (int i = 0; i < Math.min(k, currentRowSums.size()); ++i) {
                // Add each of the smallest elements to the previous sums list.
                previousRowSums.add(currentRowSums.get(i));
            }
        }
      
        // Return the k-th smallest sum.
        // Subtract 1 from k because of 0-based indexing in Java lists.
        return previousRowSums.get(k - 1);
    }
}

or

// binary search

import java.util.*;

class Solution {
    public int lessThan(int[][] mat, int sum, int idx, int k) {
        if (sum < 0)
            return 0;
        if (idx == mat.length)
            return 1;

        int ans = 0;
        for (int j = 0; j < mat[0].length; j++) {
            int cnt = lessThan(mat, sum - mat[idx][j], idx + 1, k - ans);
            if (cnt == 0)
                break;
            ans += cnt;
            if (ans > k)
                break;
        }
        return ans;
    }

    public int kthSmallest(int[][] mat, int k) {
        int m = mat.length, n = mat[0].length;
        int left = m, right = 5000 * m, sum = 0;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            int cnt = lessThan(mat, mid, 0, k);
            if (cnt >= k) {
                right = mid - 1;
                sum = mid;
            } else {
                left = mid + 1;
            }
        }
        return sum;
    }
}


When to Prefer One Over the Other?
Scenario	                               Use Priority Queue	Use Binary Search
Small m and k	                                ✅ Best	                 ❌ Slower
Large k (e.g. close to all combinations)       ❌ Inefficient	           ✅ Best
Need exact control over enumeration order	✅	                  ❌ Harder
Rows are very long (n large)	               ❌ Heap explodes	          ✅ Good

Recommended
Use Priority Queue for typical LeetCode constraints (e.g., m ≤ 40, n ≤ 40, k ≤ 2000)

Use Binary Search if:

k is large (e.g., near total combinations),

you can implement an efficient count of valid combinations ≤ sum
