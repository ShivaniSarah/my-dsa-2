https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests/description/

You have k servers numbered from 0 to k-1 that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:

The ith (0-indexed) request arrives.
If all servers are busy, the request is dropped (not handled at all).
If the (i % k)th server is available, assign the request to that server.
Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the ith server is busy, try to assign the request to the (i+1)th server, then the (i+2)th server, and so on.
You are given a strictly increasing array arrival of positive integers, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.

 

Example 1:


Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
Output: [1] 
Explanation: 
All of the servers start out available.
The first 3 requests are handled by the first 3 servers in order.
Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.
Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.
Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.
Example 2:

Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
Output: [0]
Explanation: 
The first 3 requests are handled by first 3 servers.
Request 3 comes in. It is handled by server 0 since the server is available.
Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.
Example 3:

Input: k = 3, arrival = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles a single request, so they are all considered the busiest.
 

Constraints:

1 <= k <= 105
1 <= arrival.length, load.length <= 105
arrival.length == load.length
1 <= arrival[i], load[i] <= 109
arrival is strictly increasing.


# java


class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        int[] counter = new int[k];
        // use a tree to track available servers
        TreeSet<Integer> available = new TreeSet<Integer>();
        for (int num = 0; num < k; num++) {
            available.add(num);
        }
        // use a PQ to maintain the availability at current arrival time
        Queue<int[]> busyServers = new PriorityQueue<>((a, b)->(a[0] - b[0]));
        
        for (int idx = 0; idx < arrival.length; idx++) {
            int curTime = arrival[idx];
            int endTime = curTime + load[idx];
            while (!busyServers.isEmpty() && busyServers.peek()[0] <= curTime) {
                int freedServer = busyServers.poll()[1];
                available.add(freedServer);
            }
            if (available.size() == 0) continue; // all busy
            Integer assignNum = available.ceiling(idx % k);
            if (assignNum == null) {
                assignNum = available.first();
            }
            counter[assignNum]++;
            available.remove(assignNum);
            busyServers.offer(new int[] {endTime, assignNum});
        }
        
        return findMaxesInCounter(counter);
    }
    
    
    
    private List<Integer> findMaxesInCounter(int[] counter) {
        int max = 0;
        for (int i = 0; i < counter.length; i++) {
            max = Math.max(max, counter[i]);
        }
        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < counter.length; i++) {
            if (counter[i] == max) {
                result.add(i);
            }
        }
        return result;
    }
}

or

class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        // Count array to keep track of requests handled by each server
        int[] count = new int[k];
        // Priority queue to manage currently busy servers (end time, server index)
        PriorityQueue<int[]> busyServers = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        // TreeSet to manage available servers
        TreeSet<Integer> availableServers = new TreeSet<>();
        for (int i = 0; i < k; ++i) {
            availableServers.add(i);
        }
        for (int i = 0; i < arrival.length; ++i) {
            int startTime = arrival[i];
            int endTime = startTime + load[i];
            // Release servers that have completed their tasks
            while (!busyServers.isEmpty() && busyServers.peek()[0] <= startTime) {
                availableServers.add(busyServers.poll()[1]);
            }
            // Continue to next request if no servers are available
            if (availableServers.isEmpty()) {
                continue;
            }
            // Find the server with the closest index after i % k
            Integer serverIndex = availableServers.ceiling(i % k);
            // If no such server is found, get the first available server
            if (serverIndex == null) {
                serverIndex = availableServers.first();
            }
            // Increment the request count for this server
            ++count[serverIndex];
            // Add server to busy servers with corresponding end time
            busyServers.offer(new int[] {endTime, serverIndex});
            // Remove this server from the set of available servers
            availableServers.remove(serverIndex);
        }
        // Find the max value in the count array
        int maxCount = 0;
        for (int value : count) {
            maxCount = Math.max(maxCount, value);
        }
        // Collect all servers that have this max request count
        List<Integer> busiestServers = new ArrayList<>();
        for (int i = 0; i < k; ++i) {
            if (count[i] == maxCount) {
                busiestServers.add(i);
            }
        }
        return busiestServers;
    }
}

or

class Solution {
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        int[] cnt = new int[k];
        PriorityQueue<int[]> busy = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        TreeSet<Integer> free = new TreeSet<>();
        for (int i = 0; i < k; ++i) {
            free.add(i);
        }
        for (int i = 0; i < arrival.length; ++i) {
            int start = arrival[i];
            int end = start + load[i];
            while (!busy.isEmpty() && busy.peek()[0] <= start) {
                free.add(busy.poll()[1]);
            }
            if (free.isEmpty()) {
                continue;
            }
            Integer server = free.ceiling(i % k);
            if (server == null) {
                server = free.first();
            }
            ++cnt[server];
            busy.offer(new int[] {end, server});
            free.remove(server);
        }
        int mx = 0;
        for (int v : cnt) {
            mx = Math.max(mx, v);
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; ++i) {
            if (cnt[i] == mx) {
                ans.add(i);
            }
        }
        return ans;
    }
}

or

class ServerInfo {
    private int serverId;
    private int nextAvailableTime;
    
    public ServerInfo (int serverId, int nextAvailableTime) {
        this.serverId = serverId;
        this. nextAvailableTime = nextAvailableTime;
    }   
    
    public int getNextAvailableTime() {
        return this.nextAvailableTime;
    }    
    
    public int getServerId() {
        return this.serverId;
    }
}

class ServerComparator implements Comparator<ServerInfo> {
    public int compare(ServerInfo s1, ServerInfo s2) {
        if (s1.getNextAvailableTime() == s2.getNextAvailableTime())
            return Integer.compare(s1.getServerId(), s2.getServerId());
        return Integer.compare(s1.getNextAvailableTime(), s2.getNextAvailableTime());
    }
}

class Solution {
    
    ServerComparator serverComparator = new ServerComparator();
    
    
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        
        int[] serverRequestsCounter = new int[k];
        
        
        // Initially all servers are idle
        TreeSet<Integer> availableServers = new TreeSet<>();
        for (int serverId=0; serverId<k; serverId++) {
            availableServers.add(serverId);
        }
        
        // Maintain the buzy servers in Priority Queue, when new arrival time comes, free up previous servers
        PriorityQueue<ServerInfo> buzyServers = new PriorityQueue<>(serverComparator);
        
        for (int idx=0; idx<arrival.length; idx++) {
            
            int arrivalTime = arrival[idx];

            while (!buzyServers.isEmpty() 
                   && arrivalTime >= buzyServers.peek().getNextAvailableTime()) {
                
                availableServers.add(buzyServers.poll().getServerId());
                
            }
            
            if (availableServers.isEmpty())
                continue;
            
            // This will give next server Id which is freed up
            Integer assignedServerId = availableServers.ceiling(idx % k);
            
            if (assignedServerId == null) {
                assignedServerId = availableServers.first();
            }
            
            serverRequestsCounter[assignedServerId]++;
            
            // Remove the assigned server from available pool
            availableServers.remove(assignedServerId);
                  
            // Add the assigned server to buzy pool
            buzyServers.add(new ServerInfo(assignedServerId, arrivalTime + load[idx]));
        
        }
        
        return busiestServers(serverRequestsCounter, k);
    }
    
    
    private List<Integer> busiestServers (int[] serverRequestsCounter, int numServers) {
        int maxRequests = 0;
        
        for  (int i=0; i<numServers; i++) {
            maxRequests = Math.max(serverRequestsCounter[i], maxRequests);
        }
        
        List<Integer> busiestServers = new ArrayList<>();
            
        for (int i=0; i<numServers; i++) {
            if (serverRequestsCounter[i] == maxRequests) {
                busiestServers.add(i);
            }
        }
        
        return busiestServers;
    }
}


or


class Solution 
{
    public List<Integer> busiestServers(int k, int[] time, int[] load) 
    {
        PriorityQueue<int[]> q=new PriorityQueue<int[]>((a,b)->((int[])a)[1]-((int[])b)[1]);
        TreeSet<Integer> ptr=new TreeSet<Integer>();
        for(int i=0;i<k;++i)
            ptr.add(i);
        int[] count=new int[k];
        int val=0;
        for(int i=0;i<time.length;++i)
        {
            while(!q.isEmpty()&&q.peek()[1]<=time[i])
                ptr.add(q.poll()[0]);
            int server=i%k;
            int ret=-1;
            if(ptr.isEmpty())
                continue;
            else if(ptr.contains(server))
                ret=server;
            else
            {
                Integer temp=ptr.higher(server);
                if(temp!=null)
                    ret=temp;
                else
                    ret=ptr.first();
            }
            if(ret!=-1)
            {
                val=Math.max(val,++count[ret]);
                ptr.remove(ret);
                q.add(new int[]{ret,time[i]+load[i]});
            }
        }
        List<Integer> ret=new ArrayList<Integer>();
        for(int i=0;i<k;++i)
            if(count[i]==val)
                ret.add(i);
        return ret;
    }
}

or


import java.util.*;

public class Solution {
    public List<Integer> busiestServers(int totalServers, int[] arrivalTimes, int[] taskDurations) {
        int[] serverTaskCount = new int[totalServers];
        TreeSet<Integer> availableServers = new TreeSet<>();
        
        for (int i = 0; i < totalServers; i++) {
            availableServers.add(i);
        }

        PriorityQueue<int[]> inProgressTasks = new PriorityQueue<>((task1, task2) -> task1[0] - task2[0]);

        for (int i = 0; i < arrivalTimes.length; i++) {
            int arrival = arrivalTimes[i];
            int finish = arrival + taskDurations[i];
            
            while (!inProgressTasks.isEmpty() && inProgressTasks.peek()[0] <= arrival) {
                availableServers.add(inProgressTasks.poll()[1]);
            }
            
            if (availableServers.isEmpty()) continue;

            Integer serverAssigned = availableServers.ceiling(i % totalServers);
            if (serverAssigned == null) {
                serverAssigned = availableServers.first();
            }

            serverTaskCount[serverAssigned]++;
            availableServers.remove(serverAssigned);
            inProgressTasks.offer(new int[] {finish, serverAssigned});
        }

        return findMostActiveServers(serverTaskCount);
    }

    private List<Integer> findMostActiveServers(int[] serverTaskCount) {
        int maxTasks = 0;
        for (int count : serverTaskCount) {
            maxTasks = Math.max(maxTasks, count);
        }
        
        List<Integer> busiest = new ArrayList<>();
        for (int i = 0; i < serverTaskCount.length; i++) {
            if (serverTaskCount[i] == maxTasks) {
                busiest.add(i);
            }
        }
        
        return busiest;
    }
}

or


import java.util.*;

public class Solution {
    /**
    *   Keep a min heap for request-endTime sorted on endTime
    *   keep all available servers in treeset (for faster get of ceiling values)
    *   for every time remove completed requests from the heap
    *   then take next available server from set
    *   keep counting freq for each server
    *   at last, create result by iterating over freq map for max freq servers
    */
    
    // O(k + n*k*logk)
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        Map<Integer, Integer> freq = new HashMap<>();
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]); // [time, server]
        TreeSet<Integer> servers = new TreeSet<>();
        int max = 0;
        
        for(int i = 0; i < k; i++) servers.add(i); // O(k)
        
        for(int i = 0; i < arrival.length; i++) { // O(n)
            int t = arrival[i];
            while(!pq.isEmpty() && pq.peek()[0] <= t) servers.add(pq.poll()[1]); // O(klogk)
            
            if(servers.size() == 0) continue;
            Integer s = servers.ceiling(i%k);
            if(s == null) s = servers.first();
            servers.remove(s);
            
            freq.put(s, freq.getOrDefault(s, 0) + 1);
            max = Math.max(max, freq.get(s));
            pq.add(new int[] {t + load[i], s});
        }
                
        List<Integer> res = new ArrayList<>();
        for(int r: freq.keySet()) {
            if(max == freq.get(r)) res.add(r);
        }
        return res;
    }
}

or


class Solution {
    static class Process {
        int end, server;
        Process(int end, int server) {
            this.end = end;
            this.server = server;
        }
    }
    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {
        Queue<Process> minHeap = new PriorityQueue<Process>((p1, p2) -> Integer.compare(p1.end, p2.end));
        
        TreeSet<Integer> availableServers = new TreeSet();
        for (int server = 0; server < k; server++) {
            availableServers.add(server);
        }
        int requests = arrival.length;
        int[] serversUsed = new int[k];
        int max = Integer.MIN_VALUE;
        for (int request = 0; request < requests; request++) {
            while (!minHeap.isEmpty() && minHeap.peek().end <= arrival[request]) {
                Process process = minHeap.remove();
                availableServers.add(process.server);
            }
            
            if (availableServers.isEmpty()) continue;
            Integer nextAvailableServer = availableServers.ceiling(request % k);
            if (nextAvailableServer == null) nextAvailableServer = availableServers.first();
            minHeap.offer(new Process(arrival[request] + load[request], nextAvailableServer));
            serversUsed[nextAvailableServer]++;
            max = Math.max(max, serversUsed[nextAvailableServer]);
            availableServers.remove(nextAvailableServer);
        }
        List<Integer> result = new ArrayList();
        for (int server = 0; server < k; server++) {
            if (serversUsed[server] == max) {
                result.add(server);
            }
        }
        return result;
    }
}
