
https://leetcode.com/problems/maximum-number-of-robots-within-budget/description/


You have n robots. You are given two 0-indexed integer arrays, chargeTimes and runningCosts, both of length n. The ith robot costs chargeTimes[i] units to charge and costs runningCosts[i] units to run. You are also given an integer budget.

The total cost of running k chosen robots is equal to max(chargeTimes) + k * sum(runningCosts), where max(chargeTimes) is the largest charge cost among the k robots and sum(runningCosts) is the sum of running costs among the k robots.

Return the maximum number of consecutive robots you can run such that the total cost does not exceed budget.

 

Example 1:

Input: chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25
Output: 3
Explanation: 
It is possible to run all individual and consecutive pairs of robots within budget.
To obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.
It can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.
Example 2:

Input: chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19
Output: 0
Explanation: No robot can be run that does not exceed the budget, so we return 0.


class Solution {
    public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {
        Deque<Integer> q = new ArrayDeque<>();
        int n = chargeTimes.length;
        long s = 0;
        int j = 0;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int a = chargeTimes[i], b = runningCosts[i];
            while (!q.isEmpty() && chargeTimes[q.getLast()] <= a) {
                q.pollLast();
            }
            q.offer(i);
            s += b;
            while (!q.isEmpty() && chargeTimes[q.getFirst()] + (i - j + 1) * s > budget) {
                if (q.getFirst() == j) {
                    q.pollFirst();
                }
                s -= runningCosts[j++];
            }
            ans = Math.max(ans, i - j + 1);
        }
        return ans;
    }
}

or


class Solution {
  
    // Method to calculate the maximum number of robots that can be activated within the budget
    public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {
        // Queue to store indices of robots to ensure chargeTimes are in non-increasing order from front to back
        Deque<Integer> queue = new ArrayDeque<>();
      
        // Total number of robots
        int numOfRobots = chargeTimes.length;
      
        // Running sum of the costs
        long runningSum = 0;
      
        // Starting index for the current window
        int windowStart = 0;
      
        // Result, i.e., the maximum number of robots that can be activated
        int maxRobots = 0;
      
        // Loop over each robot
        for (int i = 0; i < numOfRobots; ++i) {
            // Current robot's charge time and running cost
            int currentChargeTime = chargeTimes[i];
            int currentRunningCost = runningCosts[i];
          
            // Remove robots from the back of the queue whose charge time is less than or equal to the current one
            while (!queue.isEmpty() && chargeTimes[queue.getLast()] <= currentChargeTime) {
                queue.pollLast();
            }
          
            // Add the current robot to the queue
            queue.offer(i);
          
            // Update the running sum with the current robot's running cost
            runningSum += currentRunningCost;
          
            // If the total cost exceeds the budget, remove robots from the front of the queue
            while (!queue.isEmpty() && chargeTimes[queue.getFirst()] + (i - windowStart + 1) * runningSum > budget) {
                if (queue.getFirst() == windowStart) {
                    queue.pollFirst(); // Remove the robot at the start of the window if it is at the front of the queue
                }
                runningSum -= runningCosts[windowStart++]; // Reduce the running sum and move the window start forward
            }
          
            // Update the result with the maximum number of robots
            maxRobots = Math.max(maxRobots, i - windowStart + 1);
        }
      
        // Return the maximum number of robots
        return maxRobots;
    }
}

or

// Sliding Window + TreeMap

class Solution {
    public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {
        int n = chargeTimes.length;
        long sum = 0;
        int i = 0;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        int maxRobots = 0;

        for (int j = 0; j < n; ++j) {
            sum += runningCosts[j];
            map.put(chargeTimes[j], map.getOrDefault(chargeTimes[j], 0) + 1);

            while (!map.isEmpty() && (long) map.lastKey() + sum * (j - i + 1) > budget) {
                sum -= runningCosts[i];
                int ct = chargeTimes[i];
                int count = map.getOrDefault(ct, 0);
                if (count == 1) {
                    map.remove(ct);
                } else {
                    map.put(ct, count - 1);
                }
                i++;
            }

            maxRobots = Math.max(maxRobots, j - i + 1);
        }

        return maxRobots;
    }
}



or

// Solution 2: Sliding Window + Mono Deque

class Solution {
        public int maximumRobots(int[] times, int[] costs, long budget) {
        long sum = 0;
        int i = 0, n = times.length;
        Deque<Integer> d = new LinkedList<Integer>();
        for (int j = 0; j < n; ++j) {
            sum += costs[j];
            while (!d.isEmpty() && times[d.peekLast()] <= times[j])
                d.pollLast();
            d.addLast(j);
            if (times[d.getFirst()] + (j - i + 1) * sum > budget) {
                if (d.getFirst() == i)
                    d.pollFirst();
                sum -= costs[i++];
            }
        }
        return n - i;
    }
}

or


// sliding window + priority queee


class Solution {
        public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {
    int ans = 0, j = -1;
    long s = 0;
    PriorityQueue<int[]> pq = new PriorityQueue<>((o1, o2) -> Integer.compare(o2[0], o1[0]));
    for (int i = 0; i < runningCosts.length; i++) {
        s += runningCosts[i];
        pq.offer(new int[] {chargeTimes[i], i});
        while (s * (i - j) + removeStale(pq, j) > budget)
            s -= runningCosts[++j];
        ans = Math.max(ans, i - j);
    }
    return ans;
}
private int removeStale(PriorityQueue<int[]> pq, int j) {
    while (!pq.isEmpty() && pq.peek()[1] <= j) pq.poll();
    if (pq.isEmpty()) return 0;
    return pq.peek()[0];
}
}
