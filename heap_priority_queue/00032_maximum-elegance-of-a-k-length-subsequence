https://leetcode.com/problems/maximum-elegance-of-a-k-length-subsequence/description/

You are given a 0-indexed 2D integer array items of length n and an integer k.

items[i] = [profiti, categoryi], where profiti and categoryi denote the profit and category of the ith item respectively.

Let's define the elegance of a subsequence of items as total_profit + distinct_categories2, where total_profit is the sum of all profits in the subsequence, and distinct_categories is the number of distinct categories from all the categories in the selected subsequence.

Your task is to find the maximum elegance from all subsequences of size k in items.

Return an integer denoting the maximum elegance of a subsequence of items with size exactly k.

Note: A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order.

 

Example 1:

Input: items = [[3,2],[5,1],[10,1]], k = 2
Output: 17
Explanation: In this example, we have to select a subsequence of size 2.
We can select items[0] = [3,2] and items[2] = [10,1].
The total profit in this subsequence is 3 + 10 = 13, and the subsequence contains 2 distinct categories [2,1].
Hence, the elegance is 13 + 22 = 17, and we can show that it is the maximum achievable elegance. 
Example 2:

Input: items = [[3,1],[3,1],[2,2],[5,3]], k = 3
Output: 19
Explanation: In this example, we have to select a subsequence of size 3. 
We can select items[0] = [3,1], items[2] = [2,2], and items[3] = [5,3]. 
The total profit in this subsequence is 3 + 2 + 5 = 10, and the subsequence contains 3 distinct categories [1,2,3]. 
Hence, the elegance is 10 + 32 = 19, and we can show that it is the maximum achievable elegance.
Example 3:

Input: items = [[1,1],[2,1],[3,1]], k = 3
Output: 7
Explanation: In this example, we have to select a subsequence of size 3. 
We should select all the items. 
The total profit will be 1 + 2 + 3 = 6, and the subsequence contains 1 distinct category [1]. 
Hence, the maximum elegance is 6 + 12 = 7.  
 

Constraints:

1 <= items.length == n <= 105
items[i].length == 2
items[i][0] == profiti
items[i][1] == categoryi
1 <= profiti <= 109
1 <= categoryi <= n 
1 <= k <= n



# java


class Solution {
        public long findMaximumElegance(int[][] A, int k) {
        Arrays.sort(A, (a, b) -> b[0] - a[0]);
        long res = 0, cur = 0;
        List<Integer> dup = new ArrayList<>();
        Set<Integer> seen = new HashSet<>();
        for (int i = 0; i < A.length; ++i) {
            if (i < k) {
                if (seen.contains(A[i][1])) {
                    dup.add(A[i][0]);
                }
                cur += A[i][0];
            } else if (!seen.contains(A[i][1])) {
                if (dup.isEmpty()) break;
                cur += A[i][0] - dup.remove(dup.size() - 1);
            }
            seen.add(A[i][1]);
            res = Math.max(res, cur + 1L * seen.size() * seen.size());
        }
        return res;
    }
}

or

class Solution {
    long sqr(long x) {
        return x * x;
    }

    public long findMaximumElegance(int[][] items, int k) {
        final int n = items.length;
        Integer[] ind = new Integer[n];
        for (int i = 0; i < n; ++i) {
            ind[i] = i;
        }
        Arrays.sort(ind, new Comparator<Integer>() {
            @Override
            public int compare(Integer x, Integer y) {
                return Integer.compare(items[y][0], items[x][0]);
            }
        });
        Map<Integer, Integer> num = new HashMap<>();
        PriorityQueue<Pair<Integer, Integer>> q = new PriorityQueue<>(new Comparator<Pair<Integer, Integer>>() {
            @Override
            public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {
                return Integer.compare(p2.getKey(), p1.getKey());
            }
        });
        long v = 0;
        for (int i = 0; i < k; ++i) {
            v += items[ind[i]][0];
            num.put(items[ind[i]][1], num.getOrDefault(items[ind[i]][1], 0) + 1);
            q.add(new Pair<>(-items[ind[i]][0], ind[i]));
        }
        long r = v + sqr(num.size());
        for (int i = k; i < n && !q.isEmpty(); ++i) {
            if (num.containsKey(items[ind[i]][1])) {
                continue;
            }
            int x = q.peek().getValue();
            q.poll();
            if (num.get(items[x][1]) == 1) {
                --i;
                continue;
            }
            v += items[ind[i]][0] - items[x][0];
            num.put(items[x][1], num.get(items[x][1]) - 1);
            num.put(items[ind[i]][1], num.getOrDefault(items[ind[i]][1], 0) + 1);
            r = Math.max(r, v + sqr(num.size()));
        }
        return r;
    }
}

or

class Solution {
    public long findMaximumElegance(int[][] arr, int k) {
        int n = arr.length;
        long s = 0, ms = 0, distinct = 0;
        int[] freq = new int[n + 1];
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < k; i++) {
            s += arr[i][0];
            if (freq[arr[i][1]] == 0)
                distinct++;
            if (freq[arr[i][1]] > 0)
                pq.add(new int[] { arr[i][0], arr[i][1] });
            freq[arr[i][1]]++;
            ms = Math.max(s + distinct * distinct, ms);

        }
        for (int i = k; i < n; i++) {
            if (freq[arr[i][1]] == 0) {
                if (!pq.isEmpty()) {
                    s -= pq.poll()[0];
                    s += arr[i][0];
                    distinct++;
                    freq[arr[i][1]]--;
                    ms = Math.max(s + (distinct) * (distinct), ms);
                }
            }
        }
        return ms;
    }
}

or

class Solution {
    public long findMaximumElegance(int[][] items, int k) {
        Arrays.sort(items, (a,b)-> b[0]-a[0]);
        Stack<Integer> duplicates=new Stack<>();
        HashSet<Integer> selected_cats=new HashSet<>(k);

        long total_profit=0, elegance=0, size;
        for(int i=0;i<items.length;i++) {
            if(i<k){
                total_profit+=items[i][0];
                if(selected_cats.contains(items[i][1])) duplicates.add(items[i][0]);
            } else {
                if(duplicates.isEmpty()) break;
                if(!selected_cats.contains(items[i][1]))
                    total_profit+=items[i][0]-duplicates.pop();
            }
            selected_cats.add(items[i][1]);
            elegance=Math.max(elegance, total_profit+(size=selected_cats.size())*size);
        }
        
        return elegance;
    }
}


or


class Solution {
    public long findMaximumElegance(int[][] items, int k) {
        long ans = 0;
        Arrays.sort(items, (a,b)-> b[0]-a[0]);
        Set<Integer> categoriesSeen = new HashSet<>();
        List<Integer> duplicateCategories = new ArrayList<>();
        for(int i=0;i<k;i++){
            ans += items[i][0];
            int currCat = items[i][1];
            if(categoriesSeen.contains(currCat)){
                duplicateCategories.add(items[i][0]);
            }else{
                categoriesSeen.add(currCat);
            }
        }
        long curr = ans;
        ans += 1L*categoriesSeen.size()*categoriesSeen.size();
        
        int n = items.length;
        for(int i=k;i<n;i++){
            int currCat = items[i][1];
            int currVal = items[i][0];
            
            if(categoriesSeen.contains(currCat)){
                continue;
            }
            if(duplicateCategories.size()==0){
                break;
            }
            curr += currVal - duplicateCategories.get(duplicateCategories.size()-1);
            duplicateCategories.remove(duplicateCategories.size()-1);
            categoriesSeen.add(currCat);
            ans = Math.max(ans, curr + 1L*categoriesSeen.size()*categoriesSeen.size());
        }
        return ans;
    }
}

or


class Solution {
    public long findMaximumElegance(int[][] items, int k) {
        Arrays.sort(items, (a, b) -> b[0] - a[0]);
        int n = items.length;
        long tot = 0;
        Set<Integer> vis = new HashSet<>();
        Deque<Integer> dup = new ArrayDeque<>();
        for (int i = 0; i < k; ++i) {
            int p = items[i][0], c = items[i][1];
            tot += p;
            if (!vis.add(c)) {
                dup.push(p);
            }
        }
        long ans = tot + (long) vis.size() * vis.size();
        for (int i = k; i < n; ++i) {
            int p = items[i][0], c = items[i][1];
            if (vis.contains(c) || dup.isEmpty()) {
                continue;
            }
            vis.add(c);
            tot += p - dup.pop();
            ans = Math.max(ans, tot + (long) vis.size() * vis.size());
        }
        return ans;
    }
}
