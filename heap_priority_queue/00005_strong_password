https://leetcode.com/problems/strong-password-checker/



class Solution {
    
    public int strongPasswordChecker(String password) {
        // Convert the password string to a character array for easy iteration.
        char[] c = password.toCharArray();
        int n = c.length;

        // Initialize requirements based on password length.
        int addreq = 0; // Required additions to meet minimum length.
        int delreq = 0; // Required deletions to meet maximum length.
        int fillme = 0; // Requirements for missing types of characters (digits, uppercase, lowercase).
        int nut = 0; // Tracks number of modifications made to reduce repeated sequences.

        // Set requirements based on the current length of the password.
        if (n < 6) addreq = 6 - n;
        if (n > 20) delreq = n - 20;
        
        // Temporary character to store the last processed character.
        char temp = '@';

        // Flags to check presence of digit, uppercase and lowercase characters.
        boolean digitp = false;
        boolean upperp = false;
        boolean lowerp = false;

        int np = 0; // Current sequence length.
        int repchel = 0; // Unused variable, can be removed.

        // Priority queue to store lengths of sequences where characters repeat.
        // It sorts primarily by the sequence length modulo 3, to optimize the number of deletions required.
        Queue<Integer> delqueue = new PriorityQueue<>((a, b) -> a % 3 - b % 3);

        // Iterate through the password to detect character sequences and character types.
        for (char ch : c) {
            if (ch == temp) {
                np++;
            } else {
                if (np >= 3) {
                    delqueue.offer(np);
                }
                np = 1;
                temp = ch;
            }

            // Check and update the presence of digit, uppercase, and lowercase.
            if (!digitp && Character.isDigit(ch)) digitp = true;
            if (!upperp && Character.isUpperCase(ch)) upperp = true;
            if (!lowerp && Character.isLowerCase(ch)) lowerp = true;
        }

        // Offer the last sequence to the queue if it's a repeating sequence.
        if (np >= 3) {
            delqueue.offer(np);
        }
        
        // Increment `fillme` for each missing character type.
        if (!digitp) fillme++;
        if (!upperp) fillme++;
        if (!lowerp) fillme++;

        // Process deletions from sequences to try to meet the max length requirement.
        while (delreq > 0 && !delqueue.isEmpty()) {
            int l = delqueue.peek();
            int tobedeleted = l % 3 + 1;
            if (tobedeleted > delreq) break;
            else {
                delreq -= tobedeleted;
                l -= tobedeleted;
                delqueue.poll();
                nut += tobedeleted;
                if (l >= 3) delqueue.offer(l);
            }
        }

        // Calculate the total replacement required for leftover sequences.
        int repreq = 0;
        while (!delqueue.isEmpty()) {
            repreq += delqueue.poll() / 3;
        }

        // The total number of operations needed is the sum of deletions, max of additions/replacements, and filling missing character types.
        return nut + delreq + Math.max(fillme, Math.max(addreq, repreq));
    }
}

or


import java.util.PriorityQueue;

public class Solution {
    public int strongPasswordChecker(String password) {
        int length = password.length();
        int shortOf = Math.max(0, 6 - length);
        int exceedsOn = Math.max(0, length - 20);

        boolean hasLower = false, hasUpper = false, hasDigit = false;
        PriorityQueue<Integer> repeated = new PriorityQueue<>((a, b) -> (a % 3 - b % 3));

        char prev = 0;
        int rc = 0;

        for (int i = 0; i < length; i++) {
            char c = password.charAt(i);
            hasLower |= Character.isLowerCase(c);
            hasUpper |= Character.isUpperCase(c);
            hasDigit |= Character.isDigit(c);

            if (i > 0 && c == prev) {
                rc++;
            } else {
                if (rc >= 2) repeated.offer(rc + 1);
                rc = 0;
            }
            prev = c;
        }
        if (rc >= 2) repeated.offer(rc + 1);

        int steps = 0;

        // Handle inserts for short passwords
        while (shortOf > 0) {
            shortOf--;
            if (!hasLower) hasLower = true;
            else if (!hasDigit) hasDigit = true;
            else if (!hasUpper) hasUpper = true;
            repeated.clear();  // Inserting breaks repetitions
            steps++;
        }

        // Handle deletions for long passwords
        while (exceedsOn > 0) {
            if (!repeated.isEmpty()) {
                int r = repeated.poll();
                r--;
                exceedsOn--;
                if (r >= 3) repeated.offer(r);
                steps++;
            } else {
                steps += exceedsOn;
                exceedsOn = 0;
            }
        }

        // Replace for missing character types
        while (!hasLower || !hasUpper || !hasDigit) {
            if (!hasLower) hasLower = true;
            else if (!hasDigit) hasDigit = true;
            else if (!hasUpper) hasUpper = true;

            if (!repeated.isEmpty()) {
                int r = repeated.poll();
                r -= 3;
                if (r >= 3) repeated.offer(r);
            }
            steps++;
        }

        // Replace remaining repeated patterns
        while (!repeated.isEmpty()) {
            int r = repeated.poll();
            r -= 3;
            if (r >= 3) repeated.offer(r);
            steps++;
        }

        return steps;
    }
}

or


class Solution {
   
    public int strongPasswordChecker(String s) {
    int res = 0, a = 1, A = 1, d = 1;
    char[] carr = s.toCharArray();
    int[] arr = new int[carr.length];
        
    for (int i = 0; i < arr.length;) {
        if (Character.isLowerCase(carr[i])) a = 0;
        if (Character.isUpperCase(carr[i])) A = 0;
        if (Character.isDigit(carr[i])) d = 0;
            
        int j = i;
        while (i < carr.length && carr[i] == carr[j]) i++;
        arr[j] = i - j;
    }
        
    int total_missing = (a + A + d);

    if (arr.length < 6) {
        res += total_missing + Math.max(0, 6 - (arr.length + total_missing));
            
    } else {
        int over_len = Math.max(arr.length - 20, 0), left_over = 0;
        res += over_len;
            
        for (int k = 1; k < 3; k++) {
            for (int i = 0; i < arr.length && over_len > 0; i++) {
                if (arr[i] < 3 || arr[i] % 3 != (k - 1)) continue;
                arr[i] -= Math.min(over_len, k);
                over_len -= k;
            }
        }
            
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= 3 && over_len > 0) {
                int need = arr[i] - 2;
                arr[i] -= over_len;
                over_len -= need;
            }
                
            if (arr[i] >= 3) left_over += arr[i] / 3;
        }
            
        res += Math.max(total_missing, left_over);
    }
        
    return res;
}
}


or


class Solution {
    public int strongPasswordChecker(String password) {
        int types = countTypes(password);
        int n = password.length();
        if (n < 6) {
            return Math.max(6 - n, 3 - types);
        }
        char[] chars = password.toCharArray();
        if (n <= 20) {
            int replace = 0;
            int cnt = 0;
            char prev = '~';
            for (char curr : chars) {
                if (curr == prev) {
                    ++cnt;
                } else {
                    replace += cnt / 3;
                    cnt = 1;
                    prev = curr;
                }
            }
            replace += cnt / 3;
            return Math.max(replace, 3 - types);
        }
        int replace = 0, remove = n - 20;
        int remove2 = 0;
        int cnt = 0;
        char prev = '~';
        for (char curr : chars) {
            if (curr == prev) {
                ++cnt;
            } else {
                if (remove > 0 && cnt >= 3) {
                    if (cnt % 3 == 0) {
                        --remove;
                        --replace;
                    } else if (cnt % 3 == 1) {
                        ++remove2;
                    }
                }
                replace += cnt / 3;
                cnt = 1;
                prev = curr;
            }
        }
        if (remove > 0 && cnt >= 3) {
            if (cnt % 3 == 0) {
                --remove;
                --replace;
            } else if (cnt % 3 == 1) {
                ++remove2;
            }
        }
        replace += cnt / 3;

        int use2 = Math.min(Math.min(replace, remove2), remove / 2);
        replace -= use2;
        remove -= use2 * 2;

        int use3 = Math.min(replace, remove / 3);
        replace -= use3;
        remove -= use3 * 3;
        return (n - 20) + Math.max(replace, 3 - types);
    }

    private int countTypes(String s) {
        int a = 0, b = 0, c = 0;
        for (char ch : s.toCharArray()) {
            if (Character.isLowerCase(ch)) {
                a = 1;
            } else if (Character.isUpperCase(ch)) {
                b = 1;
            } else if (Character.isDigit(ch)) {
                c = 1;
            }
        }
        return a + b + c;
    }
}
