https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/description/


1761. Minimum Degree of a Connected Trio in a Graph
Hard
Topics
Companies
Hint
You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.

 

Example 1:


Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.
Example 2:


Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
Output: 0
Explanation: There are exactly three trios:
1) [1,4,3] with degree 0.
2) [2,5,6] with degree 2.
3) [5,6,7] with degree 2.
 

Constraints:

2 <= n <= 400
edges[i].length == 2
1 <= edges.length <= n * (n-1) / 2
1 <= ui, vi <= n
ui != vi
There are no repeated edges.


# java


class Solution {
  public int minTrioDegree(int n, int[][] edges) {
    int ans = Integer.MAX_VALUE;
    Set<Integer>[] graph = new Set[n];
    int[] degrees = new int[n];

    for (int i = 0; i < n; ++i)
      graph[i] = new HashSet<>();

    for (int[] edge : edges) {
      final int u = edge[0] - 1;
      final int v = edge[1] - 1;
      // Store the mapping from `min(u, v)` to `max(u, v)` to speed up.
      graph[Math.min(u, v)].add(Math.max(u, v));
      ++degrees[u];
      ++degrees[v];
    }

    for (int u = 0; u < n; u++)
      for (final int v : graph[u])
        for (final int w : graph[u])
          if (graph[v].contains(w))
            ans = Math.min(ans, degrees[u] + degrees[v] + degrees[w] - 6);

    return ans == Integer.MAX_VALUE ? -1 : ans;
  }
}


or


class Solution {
    public int minTrioDegree(int n, int[][] edges) {
        boolean[][] g = new boolean[n][n];
        int[] deg = new int[n];
        for (var e : edges) {
            int u = e[0] - 1, v = e[1] - 1;
            g[u][v] = true;
            g[v][u] = true;
            ++deg[u];
            ++deg[v];
        }
        int ans = 1 << 30;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (g[i][j]) {
                    for (int k = j + 1; k < n; ++k) {
                        if (g[i][k] && g[j][k]) {
                            ans = Math.min(ans, deg[i] + deg[j] + deg[k] - 6);
                        }
                    }
                }
            }
        }
        return ans == 1 << 30 ? -1 : ans;
    }
}


or

// beat

class Solution {
public int minTrioDegree(int n, int[][] edges) {
	// to store edge information
    boolean[][] graph = new boolean[n+1][n+1];
	//to store inDegrees to a node(NOTE: here inDegree and outDegree are same because it is Undirected graph)
    int[] inDegree = new int[n+1];
    
    for(int[] edge : edges) {
        graph[edge[0]][edge[1]] = true;
        graph[edge[1]][edge[0]] = true;
        
        inDegree[edge[0]]++;
        inDegree[edge[1]]++;
    }
    
    int result = Integer.MAX_VALUE;
    for(int i=1; i<=n; i++) {
        for(int j=i+1; j<=n; j++) {
            if(graph[i][j]) {
                for(int k=j+1; k<=n; k++) {
                    if(graph[i][k] && graph[j][k]) {
                        result = Math.min(result, inDegree[i] + inDegree[j] + inDegree[k] - 6);
                    }
                }
            }
        }
    }
    
    
    return result == Integer.MAX_VALUE ? -1 : result;
}
}

or

class Solution {
    public int minTrioDegree(int n, int[][] edges) {
        int minimumDegree = Integer.MAX_VALUE;
        
        // arrange the array edges such that if e[0] > e[1], swap e[1] and e[0]
        for (int [] e : edges) {
            if (e[0] > e[1]) {
                int temp = e[0];
                e[0] = e[1];
                e[1] = temp;
            }
        }
        // now sort the edges. 2 conditions to check
        // if e1[0] == e2[0] then sort based on e1[1] and e2[1]
        // else do the sorting based on e1[0] and e2[0]
        Arrays.sort(edges, (e1, e2) -> e1[0] == e2[0] ? e1[1] - e2[1] : e1[0] - e2[0]);
        
        // build the graph and we dont want to consider duplicates, so use a set to track the neighbours
        Map<Integer, Set<Integer>> graph = new HashMap<>();
        for (int [] e : edges) {
            graph.computeIfAbsent(e[0], x -> new HashSet<>()).add(e[1]);
            graph.computeIfAbsent(e[1], x -> new HashSet<>()).add(e[0]);
        }
        
        // again go through the edges
        // e[0] = first e[1] = second now from i = second + 1 to n -> where third = i, then check
        // if graph have third
        // if the third have neighbours first in it.
        // if the third have neighbours second in it.
        // if it holds true, then compute each of the size eg : graph.get(first).size() + secondSize + thirdSize - 6
        // then greedily consider the value for degree
        
        for (int [] e : edges) {
            int first = e[0];
            int second = e[1];
            for (int i = second + 1; i<=n; i++) {
                int third = i;
                if (graph.containsKey(third) && graph.get(third).contains(first) && graph.get(third).contains(second)) {
                    int currentDegree = graph.get(first).size() + graph.get(second).size() + graph.get(third).size() - 6;
                    minimumDegree = Math.min(minimumDegree, currentDegree);
                }
            }
        }
        
        // for the last check if our minimumDegree is still Integer.MAX_Value return -1 else return minimumDegree
        return minimumDegree == Integer.MAX_VALUE ? -1 : minimumDegree;
    }
}

