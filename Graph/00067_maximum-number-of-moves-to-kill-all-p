https://leetcode.com/problems/maximum-number-of-moves-to-kill-all-pawns/description/


3283. Maximum Number of Moves to Kill All Pawns
Hard
Topics
Companies
Hint
There is a 50 x 50 chessboard with one knight and some pawns on it. You are given two integers kx and ky where (kx, ky) denotes the position of the knight, and a 2D array positions where positions[i] = [xi, yi] denotes the position of the pawns on the chessboard.

Alice and Bob play a turn-based game, where Alice goes first. In each player's turn:

The player selects a pawn that still exists on the board and captures it with the knight in the fewest possible moves. Note that the player can select any pawn, it might not be one that can be captured in the least number of moves.
In the process of capturing the selected pawn, the knight may pass other pawns without capturing them. Only the selected pawn can be captured in this turn.
Alice is trying to maximize the sum of the number of moves made by both players until there are no more pawns on the board, whereas Bob tries to minimize them.

Return the maximum total number of moves made during the game that Alice can achieve, assuming both players play optimally.

Note that in one move, a chess knight has eight possible positions it can move to, as illustrated below. Each move is two cells in a cardinal direction, then one cell in an orthogonal direction.



 

Example 1:

Input: kx = 1, ky = 1, positions = [[0,0]]

Output: 4

Explanation:



The knight takes 4 moves to reach the pawn at (0, 0).

Example 2:

Input: kx = 0, ky = 2, positions = [[1,1],[2,2],[3,3]]

Output: 8

Explanation:



Alice picks the pawn at (2, 2) and captures it in two moves: (0, 2) -> (1, 4) -> (2, 2).
Bob picks the pawn at (3, 3) and captures it in two moves: (2, 2) -> (4, 1) -> (3, 3).
Alice picks the pawn at (1, 1) and captures it in four moves: (3, 3) -> (4, 1) -> (2, 2) -> (0, 3) -> (1, 1).
Example 3:

Input: kx = 0, ky = 0, positions = [[1,2],[2,4]]

Output: 3

Explanation:

Alice picks the pawn at (2, 4) and captures it in two moves: (0, 0) -> (1, 2) -> (2, 4). Note that the pawn at (1, 2) is not captured.
Bob picks the pawn at (1, 2) and captures it in one move: (2, 4) -> (1, 2).
 

Constraints:

0 <= kx, ky <= 49
1 <= positions.length <= 15
positions[i].length == 2
0 <= positions[i][0], positions[i][1] <= 49
All positions[i] are unique.
The input is generated such that positions[i] != [kx, ky] for all 0 <= i < positions.length.


# java


class Solution {
    private Integer[][][] f;
    private Integer[][][] dist;
    private int[][] positions;
    private final int[] dx = {1, 1, 2, 2, -1, -1, -2, -2};
    private final int[] dy = {2, -2, 1, -1, 2, -2, 1, -1};

    public int maxMoves(int kx, int ky, int[][] positions) {
        int n = positions.length;
        final int m = 50;
        dist = new Integer[n + 1][m][m];
        this.positions = positions;
        for (int i = 0; i <= n; ++i) {
            int x = i < n ? positions[i][0] : kx;
            int y = i < n ? positions[i][1] : ky;
            Deque<int[]> q = new ArrayDeque<>();
            q.offer(new int[] {x, y});
            for (int step = 1; !q.isEmpty(); ++step) {
                for (int k = q.size(); k > 0; --k) {
                    var p = q.poll();
                    int x1 = p[0], y1 = p[1];
                    for (int j = 0; j < 8; ++j) {
                        int x2 = x1 + dx[j], y2 = y1 + dy[j];
                        if (x2 >= 0 && x2 < m && y2 >= 0 && y2 < m && dist[i][x2][y2] == null) {
                            dist[i][x2][y2] = step;
                            q.offer(new int[] {x2, y2});
                        }
                    }
                }
            }
        }
        f = new Integer[n + 1][1 << n][2];
        return dfs(n, (1 << n) - 1, 1);
    }

    private int dfs(int last, int state, int k) {
        if (state == 0) {
            return 0;
        }
        if (f[last][state][k] != null) {
            return f[last][state][k];
        }
        int res = k == 1 ? 0 : Integer.MAX_VALUE;
        for (int i = 0; i < positions.length; ++i) {
            int x = positions[i][0], y = positions[i][1];
            if ((state >> i & 1) == 1) {
                int t = dfs(i, state ^ (1 << i), k ^ 1) + dist[last][x][y];
                res = k == 1 ? Math.max(res, t) : Math.min(res, t);
            }
        }
        return f[last][state][k] = res;
    }
}


or


class Solution {
  public int maxMoves(int kx, int ky, int[][] positions) {
    final int n = positions.length;
    List<int[]> positionsList = new ArrayList<>(List.of(positions));
    positionsList.add(new int[] {kx, ky});
    Map<Integer, Integer> hashedPositionToIndex = new HashMap<>();
    // dist[i][j] := the minimum distance from positions[i] to positions[j]
    int[][] dist = new int[n + 1][n + 1];

    for (int i = 0; i < positionsList.size(); ++i) {
      final int x = positionsList.get(i)[0];
      final int y = positionsList.get(i)[1];
      hashedPositionToIndex.put(hash(x, y), i);
    }

    for (int sourceIndex = 0; sourceIndex < n + 1; ++sourceIndex)
      bfs(positionsList, sourceIndex, hashedPositionToIndex, dist);

    int MAX_MASK = 1 << (n + 1);
    // dp[i][mask][turn] := the maximum (Alice) or the minimum (Bob) cost to
    // kill all pawns, where i is the current pawn, mask is the set of pawns
    // that have been killed, and turn is the current player's turn (0 for Alice
    // and 1 for Bob)
    int[][][] dp = new int[n + 1][1 << (n + 1)][2];

    for (int i = 0; i < n + 1; ++i)
      for (int mask = 0; mask < MAX_MASK - 1; ++mask)
        dp[i][mask] = new int[] {-MAX, MAX};

    for (int mask = MAX_MASK - 2; mask >= 0; --mask)
      for (int i = 0; i < n + 1; ++i)
        for (int turn = 0; turn < 2; ++turn)
          for (int j = 0; j < n; ++j) {
            if ((mask >> j & 1) == 1)
              continue;
            final int moves = dist[i][j] + dp[j][mask | 1 << j][1 - turn];
            dp[i][mask][turn] = turn == 0 ? Math.max(dp[i][mask][turn], moves) //
                                          : Math.min(dp[i][mask][turn], moves);
          }

    // Returns the maximum cost to kill all pawns, i.e., the original positions
    // array without the knight (kx, ky).
    return dp[n][1 << n][0];
  }

  private static final int SIZE = 50;
  private static final int MAX = 1_000_000;
  private static final int[][] DIRS = {{1, 2},   {2, 1},   {2, -1}, {1, -2},
                                       {-1, -2}, {-2, -1}, {-2, 1}, {-1, 2}};

  private int hash(int x, int y) {
    return x * SIZE + y;
  }

  // Computes the distance between positions[sourceIndex] and other positions.
  private void bfs(List<int[]> positions, int sourceIndex,
                   Map<Integer, Integer> hashedPositionToIndex, int[][] dist) {
    final int sx = positions.get(sourceIndex)[0];
    final int sy = positions.get(sourceIndex)[1];
    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>(List.of(new Pair<>(sx, sy)));
    boolean[][] seen = new boolean[SIZE][SIZE];
    seen[sx][sy] = true;
    int seenPositions = 0;

    for (int step = 0; !q.isEmpty() && seenPositions < positions.size(); ++step)
      for (int sz = q.size(); sz > 0; --sz) {
        final int i = q.peek().getKey();
        final int j = q.poll().getValue();
        final int hashedPosition = hash(i, j);
        if (hashedPositionToIndex.containsKey(hashedPosition)) {
          dist[sourceIndex][hashedPositionToIndex.get(hashedPosition)] = step;
          ++seenPositions;
        }
        for (int[] dir : DIRS) {
          final int x = i + dir[0];
          final int y = j + dir[1];
          if (x < 0 || x >= SIZE || y < 0 || y >= SIZE)
            continue;
          if (seen[x][y])
            continue;
          q.offer(new Pair<>(x, y));
          seen[x][y] = true;
        }
      }
  }
}


or

class Solution {

    public int maxMoves(int kx, int ky, int[][] positions) {
        HashMap<List<Integer>, Integer> map = new HashMap<>();
        for (int i = 0; i < positions.length; i++) {
            map.put(List.of(positions[i][0], positions[i][1]), i);
        }
        int[][] d = new int[positions.length + 1][positions.length + 1];
        maxMoves(List.of(kx, ky), map, d[positions.length]);
        for (int i = 0; i < positions.length; i++) {
            maxMoves(List.of(positions[i][0], positions[i][1]), map, d[i]);
        }
        return maxMoves(positions.length, 0, d, true, new int[positions.length + 1][1 << positions.length]);
    }

    private void maxMoves(List<Integer> list, HashMap<List<Integer>, Integer> map, int[] d) {
        ArrayDeque<List<Integer>> deque = new ArrayDeque<>(List.of(list));
        HashSet<List<Integer>> set = new HashSet<>();
        for (int i = 0, c = d.length; c > 1; i++) {
            for (int j = deque.size(); j > 0; j--) {
                List<Integer> poll = deque.poll();
                if (!set.contains(poll)) {
                    set.add(poll);
                    if (map.containsKey(poll)) {
                        d[map.get(poll)] = i;
                        c--;
                    }
                    if (poll.get(0) >= 0 && poll.get(0) < 50 && poll.get(1) >= 0 && poll.get(1) < 50) {
                        for (int[] k : new int[][] { { -2, -1 }, { -2, 1 }, { -1, -2 }, { -1, 2 }, { 1, -2 }, { 1, 2 }, { 2, -1 }, { 2, 1 } }) {
                            deque.offer(List.of(poll.get(0) + k[0], poll.get(1) + k[1]));
                        }
                    }
                }
            }
        }
    }

    private int maxMoves(int k, int curr, int[][] d, boolean flag, int[][] dp) {
        if (curr + 1 == 1 << d.length - 1) {
            return 0;
        } else if (dp[k][curr] == 0) {
            dp[k][curr] = flag ? 0 : Integer.MAX_VALUE;
            for (int i = 0; i < d.length - 1; i++) {
                if ((1 << i & curr) == 0) {
                    int next = maxMoves(i, 1 << i | curr, d, !flag, dp) + d[k][i];
                    dp[k][curr] = flag ? Math.max(dp[k][curr], next) : Math.min(dp[k][curr], next);
                }
            }
        }
        return dp[k][curr];
    }
}


or



class Solution {
    private static final int[][] KNIGHT_MOVES = {
        {-2, -1}, {-2, 1}, {-1, -2}, {-1, 2},
        {1, -2}, {1, 2}, {2, -1}, {2, 1}
    };
    private static final int BOARD_SIZE = 50;

    public int maxMoves(int kx, int ky, int[][] positions) {
        int[][] distances = new int[positions.length][positions.length];
        for (int i = 0; i < positions.length; i++) {
            for (int j = 0; j < positions.length; j++) {
                distances[i][j] = minMoves(positions[i][0], positions[i][1], positions[j][0], positions[j][1]);
            }
        }
        
        int[] initialDist = new int[positions.length];
        for (int i = 0; i < positions.length; i++) {
            initialDist[i] = minMoves(kx, ky, positions[i][0], positions[i][1]);
        }
        
        return dfs(initialDist, distances, (1 << positions.length) - 1, -1, true, new HashMap<>());
    }

    private int dfs(int[] initialDist, int[][] distances, int mask, int last, boolean isAlice, Map<Long, Integer> memo) {
        if (mask == 0) return 0;
        
        long key = ((long) mask << 33) | ((long) last << 1) | (isAlice ? 1 : 0);
        if (memo.containsKey(key)) return memo.get(key);
        
        int res = isAlice ? Integer.MIN_VALUE : Integer.MAX_VALUE;
        for (int i = 0; i < initialDist.length; i++) {
            if ((mask & (1 << i)) != 0) {
                int newMask = mask ^ (1 << i);
                int dist = (last == -1) ? initialDist[i] : distances[last][i];
                int subRes = dfs(initialDist, distances, newMask, i, !isAlice, memo);
                if (isAlice) {
                    res = Math.max(res, subRes + dist);
                } else {
                    res = Math.min(res, subRes + dist);
                }
            }
        }
        
        memo.put(key, res);
        return res;
    }

    private int minMoves(int startX, int startY, int endX, int endY) {
        Queue<int[]> queue = new LinkedList<>();
        boolean[][] visited = new boolean[BOARD_SIZE][BOARD_SIZE];
        queue.offer(new int[]{startX, startY, 0});
        visited[startX][startY] = true;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0], y = current[1], moves = current[2];

            if (x == endX && y == endY) {
                return moves;
            }

            for (int[] move : KNIGHT_MOVES) {
                int newX = x + move[0];
                int newY = y + move[1];
                if (isValid(newX, newY) && !visited[newX][newY]) {
                    queue.offer(new int[]{newX, newY, moves + 1});
                    visited[newX][newY] = true;
                }
            }
        }

        return -1; // Should never reach here if input is valid
    }

    private boolean isValid(int x, int y) {
        return x >= 0 && x < BOARD_SIZE && y >= 0 && y < BOARD_SIZE;
    }
}


or


class Solution {
    int[][] DIRECTIONS = {{-2, -1}, {-1, -2}, {1, -2}, {2, -1}, {2, 1}, {1, 2}, {-1, 2}, {-2, 1}};
    int[][] dist;
    int[][] memo;
    int np;

    int bfs(int startX, int startY, int targetX, int targetY) {
        boolean[][] vis = new boolean[50][50];
        Queue<int[]> q = new LinkedList<>();
        q.offer(new int[] {startX, startY, 0});
        vis[startX][startY] = true;
        while (!q.isEmpty()) {
            int[] cur = q.poll();
            int x = cur[0], y = cur[1], moves = cur[2];

            if (x == targetX && y == targetY) {
                return moves;
            }

            for (int[] dir : DIRECTIONS) {
                int nx = x + dir[0], ny = y + dir[1];
                if (nx >= 0 && nx < 50 && ny >= 0 && ny < 50 && !vis[nx][ny]) {
                    vis[nx][ny] = true;
                    q.offer(new int[] {nx, ny, moves + 1});
                }
            }
        }

        return Integer.MAX_VALUE; 
    }

    int helper(int mask, int last, boolean turn) {
        if (mask == (1 << np) - 1) {
            return 0;
        }

        if (memo[mask][last] != -1) {
            return memo[mask][last];
        }

        int res;
        if (turn) {
            res = Integer.MIN_VALUE; 
            for (int next = 0; next < np; next++) {
                if ((mask & (1 << next)) == 0) {
                    res = Math.max(res, dist[last][next] + helper(mask | (1 << next), next, false));
                }
            }
        } else {
            res = Integer.MAX_VALUE; 
            for (int next = 0; next < np; next++) {
                if ((mask & (1 << next)) == 0) { 
                    res = Math.min(res, dist[last][next] + helper(mask | (1 << next), next, true));
                }
            }
        }

        memo[mask][last] = res;
        return res;
    }

    public int maxMoves(int kx, int ky, int[][] positions) {
        np = positions.length;
        dist = new int[np + 1][np];
        memo = new int[1 << np][np];

        for (int i = 0; i < (1 << np); i++) {
            Arrays.fill(memo[i], -1);
        }

        for (int i = 0; i < np; i++) {
            dist[np][i] = bfs(kx, ky, positions[i][0], positions[i][1]);
        }

        for (int i = 0; i < np; i++) {
            for (int j = i + 1; j < np; j++) {
                int d = bfs(positions[i][0], positions[i][1], positions[j][0], positions[j][1]);
                dist[i][j] = d;
                dist[j][i] = d;
            }
        }

        int res = Integer.MIN_VALUE;
        for (int i = 0; i < np; i++) {
            res = Math.max(res, dist[np][i] + helper(1 << i, i, false));
        }

        return res;
    }
}

