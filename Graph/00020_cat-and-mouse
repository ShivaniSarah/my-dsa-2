https://leetcode.com/problems/cat-and-mouse/description/

913. Cat and Mouse
Hard
Topics
Companies
A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.

The mouse starts at node 1 and goes first, the cat starts at node 2 and goes second, and there is a hole at node 0.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].

Additionally, it is not allowed for the Cat to travel to the Hole (node 0).

Then, the game can end in three ways:

If ever the Cat occupies the same node as the Mouse, the Cat wins.
If ever the Mouse reaches the Hole, the Mouse wins.
If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.
Given a graph, and assuming both players play optimally, return

1 if the mouse wins the game,
2 if the cat wins the game, or
0 if the game is a draw.
 

Example 1:


Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0
Example 2:


Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1
 

Constraints:

3 <= graph.length <= 50
1 <= graph[i].length < graph.length
0 <= graph[i][j] < graph.length
graph[i][j] != i
graph[i] is unique.
The mouse and the cat can always move. 


# java


class Solution {
    private int n;
    private int[][] g;
    private int[][][] res;
    private int[][][] degree;

    private static final int HOLE = 0, MOUSE_START = 1, CAT_START = 2;
    private static final int MOUSE_TURN = 0, CAT_TURN = 1;
    private static final int MOUSE_WIN = 1, CAT_WIN = 2, TIE = 0;

    public int catMouseGame(int[][] graph) {
        n = graph.length;
        g = graph;
        res = new int[n][n][2];
        degree = new int[n][n][2];
        for (int i = 0; i < n; ++i) {
            for (int j = 1; j < n; ++j) {
                degree[i][j][MOUSE_TURN] = g[i].length;
                degree[i][j][CAT_TURN] = g[j].length;
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j : g[HOLE]) {
                --degree[i][j][CAT_TURN];
            }
        }
        Deque<int[]> q = new ArrayDeque<>();
        for (int j = 1; j < n; ++j) {
            res[0][j][MOUSE_TURN] = MOUSE_WIN;
            res[0][j][CAT_TURN] = MOUSE_WIN;
            q.offer(new int[] {0, j, MOUSE_TURN});
            q.offer(new int[] {0, j, CAT_TURN});
        }
        for (int i = 1; i < n; ++i) {
            res[i][i][MOUSE_TURN] = CAT_WIN;
            res[i][i][CAT_TURN] = CAT_WIN;
            q.offer(new int[] {i, i, MOUSE_TURN});
            q.offer(new int[] {i, i, CAT_TURN});
        }
        while (!q.isEmpty()) {
            int[] state = q.poll();
            int t = res[state[0]][state[1]][state[2]];
            List<int[]> prevStates = getPrevStates(state);
            for (var prevState : prevStates) {
                int pm = prevState[0], pc = prevState[1], pt = prevState[2];
                if (res[pm][pc][pt] == TIE) {
                    boolean win
                        = (t == MOUSE_WIN && pt == MOUSE_TURN) || (t == CAT_WIN && pt == CAT_TURN);
                    if (win) {
                        res[pm][pc][pt] = t;
                        q.offer(prevState);
                    } else {
                        if (--degree[pm][pc][pt] == 0) {
                            res[pm][pc][pt] = t;
                            q.offer(prevState);
                        }
                    }
                }
            }
        }
        return res[MOUSE_START][CAT_START][MOUSE_TURN];
    }

    private List<int[]> getPrevStates(int[] state) {
        List<int[]> pre = new ArrayList<>();
        int m = state[0], c = state[1], t = state[2];
        int pt = t ^ 1;
        if (pt == CAT_TURN) {
            for (int pc : g[c]) {
                if (pc != HOLE) {
                    pre.add(new int[] {m, pc, pt});
                }
            }
        } else {
            for (int pm : g[m]) {
                pre.add(new int[] {pm, c, pt});
            }
        }
        return pre;
    }
}


or


enum State { DRAW, MOUSE_WIN, CAT_WIN }

class Solution {
  public int catMouseGame(int[][] graph) {
    final int n = graph.length;
    // result of (cat, mouse, move)
    // move := 0 (mouse) / 1 (cat)
    int[][][] states = new int[n][n][2];
    int[][][] outDegree = new int[n][n][2];
    Queue<int[]> q = new ArrayDeque<>();

    for (int cat = 0; cat < n; ++cat)
      for (int mouse = 0; mouse < n; ++mouse) {
        outDegree[cat][mouse][0] = graph[mouse].length;
        outDegree[cat][mouse][1] =
            graph[cat].length - (Arrays.stream(graph[cat]).anyMatch(v -> v == 0) ? 1 : 0);
      }

    // Start from the states s.t. the winner can be determined.
    for (int cat = 1; cat < n; ++cat)
      for (int move = 0; move < 2; ++move) {
        // Mouse is in the hole.
        states[cat][0][move] = State.MOUSE_WIN.ordinal();
        q.offer(new int[] {cat, 0, move, State.MOUSE_WIN.ordinal()});
        // Cat catches mouse.
        states[cat][cat][move] = State.CAT_WIN.ordinal();
        q.offer(new int[] {cat, cat, move, State.CAT_WIN.ordinal()});
      }

    while (!q.isEmpty()) {
      final int cat = q.peek()[0];
      final int mouse = q.peek()[1];
      final int move = q.peek()[2];
      final int state = q.poll()[3];
      if (cat == 2 && mouse == 1 && move == 0)
        return state;
      final int prevMove = move ^ 1;
      for (final int prev : graph[prevMove == 0 ? mouse : cat]) {
        final int prevCat = prevMove == 0 ? cat : prev;
        if (prevCat == 0) // invalid
          continue;
        final int prevMouse = prevMove == 0 ? prev : mouse;
        // The state has been determined.
        if (states[prevCat][prevMouse][prevMove] > 0)
          continue;
        if (prevMove == 0 && state == State.MOUSE_WIN.ordinal() ||
            prevMove == 1 && state == State.CAT_WIN.ordinal() ||
            --outDegree[prevCat][prevMouse][prevMove] == 0) {
          states[prevCat][prevMouse][prevMove] = state;
          q.offer(new int[] {prevCat, prevMouse, prevMove, state});
        }
      }
    }

    return states[2][1][0];
  }
}


or



class Solution {
    public static final int HOLE = 0, MOUSE_START = 1, CAT_START = 2;
    public static final int MOUSE_TURN = 0, CAT_TURN = 1;
    public static final int UNKNOWN = 0, MOUSE_WIN = 1, CAT_WIN = 2;
    private int n;
    private int[][] graph;
    private int[][][] degrees;
    private int[][][] results;

    public int catMouseGame(int[][] graph) {
        this.n = graph.length;
        this.graph = graph;
        this.degrees = new int[n][n][2];
        this.results = new int[n][n][2];
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < n; j++) {
                degrees[i][j][MOUSE_TURN] = graph[i].length;
                degrees[i][j][CAT_TURN] = graph[j].length;
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j : graph[HOLE]) {
                degrees[i][j][CAT_TURN]--;
            }
        }
        Queue<int[]> queue = new ArrayDeque<int[]>();
        for (int i = 1; i < n; i++) {
            results[i][i][MOUSE_TURN] = CAT_WIN;
            results[i][i][CAT_TURN] = CAT_WIN;
            queue.offer(new int[]{i, i, MOUSE_TURN});
            queue.offer(new int[]{i, i, CAT_TURN});
        }
        for (int j = 1; j < n; j++) {
            results[HOLE][j][MOUSE_TURN] = MOUSE_WIN;
            results[HOLE][j][CAT_TURN] = MOUSE_WIN;
            queue.offer(new int[]{HOLE, j, MOUSE_TURN});
            queue.offer(new int[]{HOLE, j, CAT_TURN});
        }
        while (!queue.isEmpty()) {
            int[] state = queue.poll();
            int mouse = state[0], cat = state[1], turn = state[2];
            int result = results[mouse][cat][turn];
            List<int[]> prevStates = getPrevStates(mouse, cat, turn);
            for (int[] prevState : prevStates) {
                int prevMouse = prevState[0], prevCat = prevState[1], prevTurn = prevState[2];
                if (results[prevMouse][prevCat][prevTurn] == UNKNOWN) {
                    boolean winState = (result == MOUSE_WIN && prevTurn == MOUSE_TURN) || (result == CAT_WIN && prevTurn == CAT_TURN);
                    if (winState) {
                        results[prevMouse][prevCat][prevTurn] = result;
                        queue.offer(new int[]{prevMouse, prevCat, prevTurn});
                    } else {
                        degrees[prevMouse][prevCat][prevTurn]--;
                        if (degrees[prevMouse][prevCat][prevTurn] == 0) {
                            results[prevMouse][prevCat][prevTurn] = result;
                            queue.offer(new int[]{prevMouse, prevCat, prevTurn});
                        }
                    }
                }
            }
        }
        return results[MOUSE_START][CAT_START][MOUSE_TURN];
    }

    private List<int[]> getPrevStates(int mouse, int cat, int turn) {
        List<int[]> prevStates = new ArrayList<int[]>();
        int prevTurn = turn == MOUSE_TURN ? CAT_TURN : MOUSE_TURN;
        if (prevTurn == CAT_TURN) {
            for (int prevCat : graph[cat]) {
                if (prevCat != HOLE) {
                    prevStates.add(new int[]{mouse, prevCat, prevTurn});
                }
            }
        } else {
            for (int prevMouse : graph[mouse]) {
                prevStates.add(new int[]{prevMouse, cat, prevTurn});
            }
        }
        return prevStates;
    }
}


or


class Solution {
static final int MOUSE_TURN = 0, CAT_TURN = 1;
static final int DRAW = 0, MOUSE_WIN = 1, CAT_WIN = 2;    
    public int catMouseGame(int[][] graph) {
        int n = graph.length;
        int[][][] degrees = new int[n][n][2];
        for (int mousePos = 0; mousePos < n; mousePos++) {
            for (int catPos = 1; catPos < n; catPos++) {
                degrees[mousePos][catPos][0] = graph[mousePos].length;
                degrees[mousePos][catPos][1] = graph[catPos].length;
            }
        }
        for (int catPos : graph[0]) {
            for (int mousePos = 0; mousePos < n; mousePos++)
                degrees[mousePos][catPos][1]--;
            }
            int[][][] dp = new int[n][n][2];
            Queue<int[]> que = new ArrayDeque<>();
            for(int catPos = 1; catPos < n; catPos++){
                for(int turn = 0; turn <= 1; turn++){
                    dp[0][catPos][turn] = 1;
                    que.offer(new int[]{0, catPos, turn, 1});
                    dp[catPos][catPos][turn] = 2;
                    que.offer(new int[]{catPos, catPos, turn, 2});
                }
            }
            while(!que.isEmpty()){
                int[] cur = que.poll();
                int mousePos = cur[0], catPos = cur[1], turn = cur[2], result = cur[3];
                if(turn == 0){
                    if(mousePos == 1 && catPos == 2)
                    return result;
                    for(int v : graph[catPos]){
                        if(v == 0 || dp[mousePos][v][1] != 0)
                        continue;
                        if(result == 2 || --degrees[mousePos][v][1] == 0){
                            dp[mousePos][v][1] = result;
                            que.offer(new int[]{mousePos, v, 1, result});
                        }
                    }
                } else {
                    for(int v : graph[mousePos]){
                        if(dp[v][catPos][0] != 0)
                        continue;
                        if(result == 1 || --degrees[v][catPos][0] == 0){
                            dp[v][catPos][0] = result;
                            que.offer(new int[]{v, catPos, 0, result});
                        }
                    }
                }
            }
        return dp[1][2][0];        
    }
}


or



class Solution {
    private int M;
    Integer memo[][][];
    public int catMouseGame(int[][] graph) {
        int n = graph.length;
        M = 4*n + 200; // randomly chosen max move
        memo = new Integer[n+1][n+1][M+1];
        return dp(1, 2, 0, graph);
    }

    int dp(int m, int c, int moves, int[][] graph) {
        if(moves > M) return 0;
        if(c == m) return 2;
        if(m == 0) return 1;
        if(memo[m][c][moves] != null) return memo[m][c][moves];
        if(moves % 2 == 0){
            boolean draw = false;
            for(int nei : graph[m]) {
                int ans = dp(nei, c, moves+1, graph);
                if(ans == 1) return memo[m][c][moves] = 1;
                if(ans == 0)draw = true;
            }
            return memo[m][c][moves] = draw ? 0 : 2;
        }else {
            boolean draw = false;
            for(int nei : graph[c]) {
                if(nei == 0) continue;
                int ans = dp(m, nei, moves+1, graph);
                if(ans == 2) return memo[m][c][moves] = 2;
                if(ans == 0)draw = true;
            }
            return memo[m][c][moves] = draw ? 0 : 1;
        }
    }
}



or


import java.util.*;

class Solution {
    private int[][][] state;

    public int catMouseGame(int[][] graph) {
        int n = graph.length;
        state = new int[n][n][2];
        for (int[][] arr : state) {
            for (int[] subArr : arr) {
                Arrays.fill(subArr, -1);
            }
        }
        
        dfs(graph, 1, 2, 0);

        List<int[]> revisit = new ArrayList<>();
        int lastRound = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < 2; k++) {
                    if (state[i][j][k] == 0) {
                        int[] v = {i, j, k};
                        revisit.add(v);
                    }
                }
            }
        }

        while (lastRound != revisit.size() && revisit.size() != 0) {
            lastRound = revisit.size();
            for (int[] v : revisit) {
                state[v[0]][v[1]][v[2]] = -1;
                dfs(graph, v[0], v[1], v[2]);
            }
            revisit.clear();
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    for (int k = 0; k < 2; k++) {
                        if (state[i][j][k] == 0) {
                            int[] v = {i, j, k};
                            revisit.add(v);
                        }
                    }
                }
            }
        }

        if (state[1][2][0] == -1) {
            return 0;
        } else {
            return state[1][2][0];
        }
    }

    private int dfs(int[][] graph, int mouse, int cat, int turn) {
        if (state[mouse][cat][turn] != -1) {
            return state[mouse][cat][turn];
        }
        if (mouse == 0) {
            state[mouse][cat][turn] = 1;
            return 1;
        }
        if (mouse == cat) {
            state[mouse][cat][turn] = 2;
            return 2;
        }
        state[mouse][cat][turn] = 0;

        if (turn == 0) { // Mouse's turn
            boolean isDraw = false;
            for (int i = 0; i < graph[mouse].length; i++) {
                int nextTurn = dfs(graph, graph[mouse][i], cat, turn + 1);
                if (nextTurn == 1) {
                    isDraw = false;
                    state[mouse][cat][turn] = 1;
                    return 1;
                }
                if (nextTurn == 0) {
                    isDraw = true;
                }
            }
            if (isDraw) {
                state[mouse][cat][turn] = 0;
                return 0;
            }
            state[mouse][cat][turn] = 2;
            return 2;
        } else { // Cat's turn
            boolean isDraw = false;
            for (int i = 0; i < graph[cat].length; i++) {
                if (graph[cat][i] != 0) {
                    int nextTurn = dfs(graph, mouse, graph[cat][i], turn - 1);
                    if (nextTurn == 2) {
                        isDraw = false;
                        state[mouse][cat][turn] = 2;
                        return 2;
                    }
                    if (nextTurn == 0) {
                        isDraw = true;
                    }
                }
            }
            if (isDraw) {
                state[mouse][cat][turn] = 0;
                return 0;
            }
            state[mouse][cat][turn] = 1;
            return 1;
        }
    }
}
