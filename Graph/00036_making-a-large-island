https://leetcode.com/problems/making-a-large-island/description/


827. Making A Large Island
Hard
Topics
Companies
You are given an n x n binary matrix grid. You are allowed to change at most one 0 to be 1.

Return the size of the largest island in grid after applying this operation.

An island is a 4-directionally connected group of 1s.

 

Example 1:

Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.
Example 2:

Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.
Example 3:

Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 500
grid[i][j] is either 0 or 1.


# java


class Solution {
  public int largestIsland(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    int maxSize = 0;
    // sizes[i] := the size of the i-th connected component (starting from 2)
    List<Integer> sizes = new ArrayList<>(List.of(0, 0));

    // For each 1 in the grid, paint all the connected 1s with the next
    // available color (2, 3, and so on). Also, remember the size of the island
    // we just painted with that color.
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (grid[i][j] == 1) {
          sizes.add(paint(grid, i, j, sizes.size())); // Paint 2, 3, ...
        }

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (grid[i][j] == 0) {
          Set<Integer> neighborIds =
              new HashSet<>(Arrays.asList(getId(grid, i - 1, j), getId(grid, i + 1, j),
                                          getId(grid, i, j + 1), getId(grid, i, j - 1)));
          maxSize = Math.max(maxSize, 1 + getSize(grid, neighborIds, sizes));
        }

    return maxSize == 0 ? m * n : maxSize;
  }

  private int paint(int[][] grid, int i, int j, int id) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return 0;
    if (grid[i][j] != 1)
      return 0;
    grid[i][j] = id; // grid[i][j] is part of the id-th connected component.
    return 1 + paint(grid, i + 1, j, id) + paint(grid, i - 1, j, id) + paint(grid, i, j + 1, id) +
        paint(grid, i, j - 1, id);
  }

  // Gets the id of grid[i][j] and returns 0 if it's out-of-bounds.
  private int getId(int[][] grid, int i, int j) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return 0; // Invalid
    return grid[i][j];
  }

  private int getSize(int[][] grid, Set<Integer> neighborIds, List<Integer> sizes) {
    int size = 0;
    for (final int neighborId : neighborIds)
      size += sizes.get(neighborId);
    return size;
  }
}


or


class Solution {
    private int n;
    private int[] p;
    private int[] size;
    private int ans = 1;
    private int[] dirs = new int[] {-1, 0, 1, 0, -1};

    public int largestIsland(int[][] grid) {
        n = grid.length;
        p = new int[n * n];
        size = new int[n * n];
        for (int i = 0; i < p.length; ++i) {
            p[i] = i;
            size[i] = 1;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    for (int k = 0; k < 4; ++k) {
                        int x = i + dirs[k], y = j + dirs[k + 1];
                        if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 1) {
                            int pa = find(x * n + y), pb = find(i * n + j);
                            if (pa == pb) {
                                continue;
                            }
                            p[pa] = pb;
                            size[pb] += size[pa];
                            ans = Math.max(ans, size[pb]);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    int t = 1;
                    Set<Integer> vis = new HashSet<>();
                    for (int k = 0; k < 4; ++k) {
                        int x = i + dirs[k], y = j + dirs[k + 1];
                        if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 1) {
                            int root = find(x * n + y);
                            if (!vis.contains(root)) {
                                vis.add(root);
                                t += size[root];
                            }
                        }
                    }
                    ans = Math.max(ans, t);
                }
            }
        }
        return ans;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }
}


or


class Solution {
	 UnionFind uf;
    public int largestIsland(int[][] grid) {
        int n=grid.length;
        uf=new UnionFind(n*n);
        int ans=0;
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]==0) continue;
                int curr=i*n+j;
                
                uf.add(curr);
                for(int neigh:neighbors(grid,i,j))
                    uf.union(curr,neigh);
                
                int p=uf.find(curr);
                ans=Math.max(ans,uf.size[p]);
            }
        }
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]==1) continue;
                Set<Integer> neighParents=new HashSet<>();
                for(int neigh: neighbors(grid,i,j))
                    neighParents.add(uf.find(neigh));
                
                int size=1;
                for(int s:neighParents)
                    size+=uf.size[s];
                ans=Math.max(ans,size);
            }
        }
        return ans;
		}
    
    int [][]dirs={{0,1},{1,0},{0,-1},{-1,0}};
    
    List<Integer> neighbors(int [][]grid,int i,int j) {
        int n=grid.length;
        List<Integer> list=new ArrayList<>();
        for(int []dir:dirs) {
            int x=i+dir[0],y=j+dir[1];
            if(x<0 || y<0 || x>=n || y>=n || !uf.contains(x*n+y))
                continue;
            list.add(x*n+y);
        }
        return list;
    }
    
    class UnionFind {
        int []parent,size;
        
        UnionFind(int n) {
            parent=new int[n];
            Arrays.fill(parent,-1);
            size=new int[n];
        }
        
        boolean contains(int u) {
            return parent[u]>=0;
        }
        
        void add(int u) {
            if(contains(u)) return;
            parent[u]=u;
            size[u]=1;
        }
        
        int find(int u) {
            if(parent[u]==u) return u;
            parent[u]=find(parent[u]); //path compression
            return parent[u];
        }
        
        boolean union(int u,int v) {
            int pu=find(u),pv=find(v);
            if(pu==pv) return false;
            if(size[pu]<=size[pv]) { //merge smaller component
                parent[pu]=pv;
                size[pv]+=size[pu];
            }
            else {
                parent[pv]=pu;
                size[pu]+=size[pv];
            }
            return true;
        }
    }
}


or


class Solution {
    
    int [][]dirs={{0,1},{1,0},{0,-1},{-1,0}};
    Map<Integer,Integer> component=new HashMap<>();
    
    void paint(int [][]grid,int i,int j,int color) {
        if(i<0 || j<0 || i>=grid.length || j>=grid.length || grid[i][j]!=1) return;
        grid[i][j]=color;
        component.put(color,component.getOrDefault(color,0)+1);
        for(int []dir:dirs)
            paint(grid,i+dir[0],j+dir[1],color);
    }
    
    public int largestIsland(int [][]grid) {
        int n=grid.length,ans=0,color=2;
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]==0) continue;
                paint(grid,i,j,color);
                if(component.containsKey(color))
                    ans=Math.max(ans,component.get(color));
                color++;
            }
        }
        
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++) {
                if(grid[i][j]!=0) continue;
                Set<Integer> neigh=new HashSet<>();
                for(int []dir:dirs) {
                    int x=i+dir[0],y=j+dir[1];
                    if(x<0 || y<0 || x>=n || y>=n || grid[x][y]==0) continue;
                    neigh.add(grid[x][y]);
                }
                
                int size=1;
                for(int s:neigh)
                    size+=component.get(s);
                
                ans=Math.max(ans,size);
            }
        }
        return ans;
    }
}
