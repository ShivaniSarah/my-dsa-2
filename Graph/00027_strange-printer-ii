https://leetcode.com/problems/strange-printer-ii/description/


1591. Strange Printer II
Hard
Topics
Companies
Hint
There is a strange printer with the following two special requirements:

On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.
Once the printer has used a color for the above operation, the same color cannot be used again.
You are given a m x n matrix targetGrid, where targetGrid[row][col] is the color in the position (row, col) of the grid.

Return true if it is possible to print the matrix targetGrid, otherwise, return false.

 

Example 1:


Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true
Example 2:


Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true
Example 3:

Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.
 

Constraints:

m == targetGrid.length
n == targetGrid[i].length
1 <= m, n <= 60
1 <= targetGrid[row][col] <= 60



# java


class Solution {
    public boolean isPrintable(int[][] targetGrid) {
        Map<Integer, int[]> boundsMap = new HashMap<Integer, int[]>();
        int rows = targetGrid.length, columns = targetGrid[0].length;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                int color = targetGrid[i][j];
                if (!boundsMap.containsKey(color))
                    boundsMap.put(color, new int[]{i, i, j, j});
                else {
                    int[] bounds = boundsMap.get(color);
                    bounds[0] = Math.min(bounds[0], i);
                    bounds[1] = Math.max(bounds[1], i);
                    bounds[2] = Math.min(bounds[2], j);
                    bounds[3] = Math.max(bounds[3], j);
                    boundsMap.put(color, bounds);
                }
            }
        }
        Set<Integer> keySet = boundsMap.keySet();
        Map<Integer, List<Integer>> greaterMap = new HashMap<Integer, List<Integer>>();
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < columns; j++) {
                int color = targetGrid[i][j];
                List<Integer> list = greaterMap.getOrDefault(color, new ArrayList<Integer>());
                for (int key : keySet) {
                    if (key != color) {
                        int[] bounds = boundsMap.get(key);
                        if (i >= bounds[0] && i <= bounds[1] && j >= bounds[2] && j <= bounds[3])
                            list.add(key);
                    }
                }
                greaterMap.put(color, list);
            }
        }
        Map<Integer, Integer> indegreeMap = new HashMap<Integer, Integer>();
        for (int color : keySet) {
            List<Integer> nextColors = greaterMap.getOrDefault(color, new ArrayList<Integer>());
            for (int nextColor : nextColors) {
                int indegree = indegreeMap.getOrDefault(nextColor, 0) + 1;
                indegreeMap.put(nextColor, indegree);
            }
        }
        Set<Integer> visited = new HashSet<Integer>();
        Queue<Integer> queue = new LinkedList<Integer>();
        for (int color : keySet) {
            int indegree = indegreeMap.getOrDefault(color, 0);
            if (indegree == 0) {
                visited.add(color);
                queue.offer(color);
            }
        }
        while (!queue.isEmpty()) {
            int color = queue.poll();
            List<Integer> nextColors = greaterMap.getOrDefault(color, new ArrayList<Integer>());
            for (int nextColor : nextColors) {
                int indegree = indegreeMap.getOrDefault(nextColor, 0) - 1;
                if (indegree == 0) {
                    indegreeMap.remove(nextColor);
                    visited.add(nextColor);
                    queue.offer(nextColor);
                } else
                    indegreeMap.put(nextColor, indegree);
            }
        }
        return visited.size() == keySet.size();
    }
}


or


enum State { INIT, VISITING, VISITED }

class Solution {
  public boolean isPrintable(int[][] targetGrid) {
    final int MAX_COLOR = 60;
    final int m = targetGrid.length;
    final int n = targetGrid[0].length;
    // graph[u] := {v1, v2} means v1 and v2 cover u
    Set<Integer>[] graph = new HashSet[MAX_COLOR + 1];

    for (int color = 1; color <= MAX_COLOR; ++color) {
      // Get the rectangle of the current color.
      int minI = m;
      int minJ = n;
      int maxI = -1;
      int maxJ = -1;
      for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
          if (targetGrid[i][j] == color) {
            minI = Math.min(minI, i);
            minJ = Math.min(minJ, j);
            maxI = Math.max(maxI, i);
            maxJ = Math.max(maxJ, j);
          }
      // Add any color covering the current as the children.
      graph[color] = new HashSet<>();
      for (int i = minI; i <= maxI; ++i)
        for (int j = minJ; j <= maxJ; ++j)
          if (targetGrid[i][j] != color) {
            graph[color].add(targetGrid[i][j]);
          }
    }

    State[] states = new State[MAX_COLOR + 1];

    for (int color = 1; color <= MAX_COLOR; ++color)
      if (hasCycle(graph, color, states))
        return false;

    return true;
  }

  private boolean hasCycle(Set<Integer>[] graph, int u, State[] states) {
    if (states[u] == State.VISITING)
      return true;
    if (states[u] == State.VISITED)
      return false;
    states[u] = State.VISITING;
    for (int v : graph[u])
      if (hasCycle(graph, v, states))
        return true;
    states[u] = State.VISITED;
    return false;
  }
}


or


class Solution {
    private Set<Integer>[] graph;
    private int m, n;
    private final int maxColor = 60;
    public boolean isPrintable(int[][] targetGrid) {
        m = targetGrid.length;
        n = targetGrid[0].length;
        graph = new HashSet[maxColor + 1];
        for(int color = 1; color <= maxColor; ++color) {
            int minI = m, minJ = n;
            int maxI = -1, maxJ = -1;
            for(int i = 0; i < m; i++) {
                for(int j = 0; j < n; j++) {
                    if(targetGrid[i][j] == color) {
                        minI = Math.min(minI, i);
                        minJ = Math.min(minJ, j);
                        maxI = Math.max(maxI, i);
                        maxJ = Math.max(maxJ, j);
                    }
                }
            }
            graph[color] = new HashSet<>();
            for(int i = minI; i <= maxI; ++i) {
                for(int j = minJ; j <= maxJ; ++j) {
                    if(targetGrid[i][j] != color) {
                        graph[color].add(targetGrid[i][j]);
                    }
                }
            }
        }
        int[] indegree = new int[maxColor + 1];
        Queue<Integer> q = new ArrayDeque<>();
        for(int color = 1; color <= maxColor; ++color) {
            for(Integer containedColor : graph[color]) indegree[containedColor]++;
        }
        for(int color = 1; color <= maxColor; ++color) {
            if(indegree[color] == 0) {
                q.offer(color);
            }
        }
        int topoLength = 0;
        while(!q.isEmpty()) {
            Integer color = q.poll();
            topoLength++;
            for(Integer containedColor : graph[color]) {
                if(--indegree[containedColor] == 0) {
                    q.offer(containedColor);
                }
            }
        }
        return topoLength == maxColor;
    }
}


or


