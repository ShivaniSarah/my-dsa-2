https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid/description/

Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

 

Example 1:


Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).
The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.
Example 2:


Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).
Example 3:


Input: grid = [[1,2],[4,3]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 100
1 <= grid[i][j] <= 4


# java

# BFS strategy using a deque

// bfs

class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        Deque<int[]> dq = new ArrayDeque<>();
        dq.offerFirst(new int[]{0, 0});
        dist[0][0] = 0;
        int[] dx = {0, 0, 1, -1}, dy = {1, -1, 0, 0};
        
        while (!dq.isEmpty()) {
            int[] curr = dq.pollFirst();
            int x = curr[0], y = curr[1];
            int curDir = grid[x][y] - 1;
            for (int dir = 0; dir < 4; dir++) {
                int nx = x + dx[dir], ny = y + dy[dir];
                if (nx >= 0 && ny >= 0 && nx < m && ny < n) {
                    int cost = dist[x][y] + (dir == curDir ? 0 : 1);
                    if (cost < dist[nx][ny]) {
                        dist[nx][ny] = cost;
                        if (dir == curDir) {
                            dq.offerFirst(new int[]{nx, ny});
                        } else {
                            dq.offerLast(new int[]{nx, ny});
                        }
                    }
                }
            }
        }
        return dist[m - 1][n - 1];
    }
}

or 

class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        boolean[][] vis = new boolean[m][n];
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[] {0, 0, 0});
        int[][] dirs = { {0, 0}, {0, 1}, {0, -1}, {1, 0}, {-1, 0} };
        while (!q.isEmpty()) {
            int[] p = q.poll();
            int i = p[0], j = p[1], d = p[2];
            if (i == m - 1 && j == n - 1) {
                return d;
            }
            if (vis[i][j]) {
                continue;
            }
            vis[i][j] = true;
            for (int k = 1; k <= 4; ++k) {
                int x = i + dirs[k][0], y = j + dirs[k][1];
                if (x >= 0 && x < m && y >= 0 && y < n) {
                    if (grid[i][j] == k) {
                        q.offerFirst(new int[] {x, y, d});
                    } else {
                        q.offer(new int[] {x, y, d + 1});
                    }
                }
            }
        }
        return -1;
    }
}


or


class Solution {
    public int minCost(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] minCost=new int[m][n];
        for(int i=0; i<m; i++){
            Arrays.fill(minCost[i], Integer.MAX_VALUE);
        }

        Deque<int[]> dque=new ArrayDeque<>();
        dque.offerFirst(new int[]{0,0});
        minCost[0][0]=0;
        
        int[][] direction={ {0,1}, {0,-1}, {1,0}, {-1,0} };

        while(!dque.isEmpty()){
            int[] arr=dque.pollFirst();
            int r=arr[0];
            int c=arr[1];

            //Visited adjacent cells
            for(int i=0; i<4; i++){
                int nr=r+direction[i][0];
                int nc=c+direction[i][1];
                int cost=(grid[r][c]!=(i+1))?1:0;

                if( nr>=0 && nr<m && nc>=0 && nc<n && minCost[r][c]+cost<minCost[nr][nc]){
                    minCost[nr][nc]=minCost[r][c]+cost;

                    if(cost==1){
                        dque.offerLast(new int[]{nr,nc});
                    }else{
                        dque.offerFirst(new int[]{nr,nc});
                    }                   
                }
            }
        }

        return minCost[m-1][n-1];
    }
}      

or



// dijikstra


import java.util.*;

class Solution {

    private final int[][] directions = {{0,0}, {0,1}, {0,-1}, {1,0}, {-1,0}};
    private int M, N;

    private boolean isValid(int R, int C) {
        return R >= 0 && C >= 0 && R < M && C < N;
    }

    // O(K log K) time, O(K) space where K = M * N
    public int minCost(int[][] grid) {
        M = grid.length;
        N = grid[0].length;

        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        minHeap.offer(new int[]{0, 0, 0}); // cost, row, col

        int[][] minimumCost = new int[M][N];
        for (int[] row : minimumCost) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        minimumCost[0][0] = 0;

        while (!minHeap.isEmpty()) {
            int[] info = minHeap.poll();
            int currentCost = info[0];
            int R = info[1];
            int C = info[2];

            if (R == M - 1 && C == N - 1)
                return currentCost;

            for (int dir = 1; dir <= 4; dir++) {
                int cellVal = grid[R][C];
                int newR = R + directions[dir][0];
                int newC = C + directions[dir][1];
                int newCost = (dir == cellVal) ? currentCost : currentCost + 1;

                if (isValid(newR, newC) && minimumCost[newR][newC] > newCost) {
                    minimumCost[newR][newC] = newCost;
                    minHeap.offer(new int[]{newCost, newR, newC});
                }
            }
        }

        return -1;
    }
}
