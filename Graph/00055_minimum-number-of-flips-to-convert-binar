https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix/description/


1284. Minimum Number of Flips to Convert Binary Matrix to Zero Matrix
Hard
Topics
Companies
Hint
Given a m x n binary matrix mat. In one step, you can choose one cell and flip it and all the four neighbors of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighbors if they share one edge.

Return the minimum number of steps required to convert mat to a zero matrix or -1 if you cannot.

A binary matrix is a matrix with all cells equal to 0 or 1 only.

A zero matrix is a matrix with all cells equal to 0.

 

Example 1:


Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.
Example 2:

Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We do not need to change it.
Example 3:

Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix cannot be a zero matrix.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 3
mat[i][j] is either 0 or 1.



# java



class Solution {
  public int minFlips(int[][] mat) {
    final int m = mat.length;
    final int n = mat[0].length;
    final int hash = getHash(mat, m, n);
    if (hash == 0)
      return 0;

    final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    Queue<Integer> q = new ArrayDeque<>(List.of(hash));
    Set<Integer> seen = new HashSet<>(Arrays.asList(hash));

    for (int step = 1; !q.isEmpty(); ++step) {
      for (int sz = q.size(); sz > 0; --sz) {
        final int curr = q.poll();
        for (int i = 0; i < m; ++i) {
          for (int j = 0; j < n; ++j) {
            int next = curr ^ 1 << (i * n + j);
            // Flie the four neighbors.
            for (int[] dir : DIRS) {
              final int x = i + dir[0];
              final int y = j + dir[1];
              if (x < 0 || x == m || y < 0 || y == n)
                continue;
              next ^= 1 << (x * n + y);
            }
            if (next == 0)
              return step;
            if (seen.contains(next))
              continue;
            q.offer(next);
            seen.add(next);
          }
        }
      }
    }

    return -1;
  }

  private int getHash(int[][] mat, int m, int n) {
    int hash = 0;
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        if (mat[i][j] == 1)
          hash |= 1 << (i * n + j);
    return hash;
  }
}



or


class Solution {
    public int minFlips(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        int state = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (mat[i][j] == 1) {
                    state |= 1 << (i * n + j);
                }
            }
        }
        Deque<Integer> q = new ArrayDeque<>();
        q.offer(state);
        Set<Integer> vis = new HashSet<>();
        vis.add(state);
        int ans = 0;
        int[] dirs = {0, -1, 0, 1, 0, 0};
        while (!q.isEmpty()) {
            for (int t = q.size(); t > 0; --t) {
                state = q.poll();
                if (state == 0) {
                    return ans;
                }
                for (int i = 0; i < m; ++i) {
                    for (int j = 0; j < n; ++j) {
                        int nxt = state;
                        for (int k = 0; k < 5; ++k) {
                            int x = i + dirs[k], y = j + dirs[k + 1];
                            if (x < 0 || x >= m || y < 0 || y >= n) {
                                continue;
                            }
                            if ((nxt & (1 << (x * n + y))) != 0) {
                                nxt -= 1 << (x * n + y);
                            } else {
                                nxt |= 1 << (x * n + y);
                            }
                        }
                        if (!vis.contains(nxt)) {
                            vis.add(nxt);
                            q.offer(nxt);
                        }
                    }
                }
            }
            ++ans;
        }
        return -1;
    }
}


or


// 2 ms. 74.36%
class Solution {
    private static final int[][] dir = {{-1, 0}, {0, -1}, {0, 0}, {0, 1}, {1, 0}};
    public int minFlips(int[][] mat) {
        int m = mat.length, n = mat[0].length, start = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                start |= mat[i][j] << (i * n + j);
            }
        }
        if(start == 0) return 0;
        boolean[] visited = new boolean[1 << (m * n)];
        Deque<Integer> Q = new LinkedList<>();
        visited[start] = true;
        Q.add(start);
        int res = 0;
        while(!Q.isEmpty()) {
            res++;
            int size = Q.size();
            while(size-- > 0) {
                int cur = Q.poll();
                for(int i = 0; i < m; i++) {
                    for(int j = 0; j < n; j++) {
                        int next = cur;
                        for(int[] d: dir) {
                            int x = i + d[0], y = j + d[1];
                            if(x >= 0 && x < m && y >= 0 && y < n) {
                                next ^= 1 << (x * n + y);
                            }
                        }
                        if(!visited[next]) {
                            if(next == 0) return res;
                            visited[next] = true;
                            Q.add(next);
                        }
                    }
                }
            }
        }
        return -1;
    }
}

or

// 6 ms. 29.74%
class Solution {
    private static final int[][] dir = {{-1, 0}, {0, -1}, {0, 0}, {0, 1}, {1, 0}};
    public int minFlips(int[][] mat) {
        int m = mat.length, n = mat[0].length, start = 0;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                start |= mat[i][j] << (i * n + j);
            }
        }
        if(start == 0) return 0;
        int[] visited = new int[1 << (m * n)];
        Deque<Integer> Q = new LinkedList<>();
        visited[0] = start;
        Q.add(0);
        int res = 0;
        while(!Q.isEmpty()) {
            res++;
            int size = Q.size();
            while(size-- > 0) {
                int cur = Q.poll();
                for(int i = 0; i < m; i++) {
                    for(int j = 0; j < n; j++) {
                        if((cur & (1 << (i * n + j))) == 0) {
                            int next = cur | (1 << (i * n + j)), state = visited[cur];
                            for(int[] d: dir) {
                                int x = i + d[0], y = j + d[1];
                                if(x >= 0 && x < m && y >= 0 && y < n) {
                                    state ^= 1 << (x * n + y);
                                }
                            }
                            if(state == 0) return res;
                            visited[next] = state;
                            Q.add(next);
                        }
                    }
                }
            }
        }
        return -1;
    }
}

or

// best


// 0 ms. 100%
class Solution {
    private static final int[][] dir = {{-1, 0}, {0, -1}, {0, 0}, {0, 1}, {1, 0}};
    private void flip(int[][] A, int i, int j) {
        for(int[] d: dir) {
            int x = i + d[0], y = j + d[1];
            if(x >= 0 && x < A.length && y >= 0 && y < A[0].length) {
                A[x][y] ^= 1;
            }
        }
    }
    private int helper(int[][] A, int col, int count) {
        if(col < A[0].length) {
            flip(A, 0, col);
            int res = helper(A, col + 1, count + 1);
            flip(A, 0, col);
            return Math.min(res, helper(A, col + 1, count));
        }
        int m = A.length, n = A[0].length;
        int[][] B = new int[m][];
        for(int i = 0; i < m; i++) {
            B[i] = A[i].clone();
        }
        for(int i = 1; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(B[i - 1][j] == 1) {
                    flip(B, i, j);
                    count++;
                }
            }
        }
        for(int j = 0; j < n; j++) {
            if(B[m - 1][j] == 1) return Integer.MAX_VALUE;
        }
        return count;
    }
    public int minFlips(int[][] mat) {
        int res = helper(mat, 0, 0);
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}


or

// best

class Solution {
    int n,m;
    public int minFlips(int[][] mat) {
        n=mat.length;m=mat[0].length;
        int ans=sol(mat,0,0,0);
        return ans==Integer.MAX_VALUE?-1:ans;
    }
    public int sol(int[][] mat,int i,int j,int c){
        if(j==m){
            j=0;
            i++;
        }
        if(i==n){
            return isValid(mat)?c:Integer.MAX_VALUE;
        }
        int x=sol(mat,i,j+1,c);
        flip(mat,i,j);
        int y=sol(mat,i,j+1,c+1);
        flip(mat,i,j);
        return Math.min(x,y);
    }
    public boolean isValid(int[][] mat){
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==1) return false;
            }
        }
        return true;
    }
    public void flip(int[][] mat,int i,int j){
        mat[i][j]^=1;
        if(i>0) mat[i-1][j]^=1;
        if(i<n-1) mat[i+1][j]^=1;
        if(j>0) mat[i][j-1]^=1;
        if(j<m-1) mat[i][j+1]^=1;
    }
}

