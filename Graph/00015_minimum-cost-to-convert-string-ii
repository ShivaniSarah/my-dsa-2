https://leetcode.com/problems/minimum-cost-to-convert-string-ii/description/


2977. Minimum Cost to Convert String II
Hard
Topics
Companies
Hint
You are given two 0-indexed strings source and target, both of length n and consisting of lowercase English characters. You are also given two 0-indexed string arrays original and changed, and an integer array cost, where cost[i] represents the cost of converting the string original[i] to the string changed[i].

You start with the string source. In one operation, you can pick a substring x from the string, and change it to y at a cost of z if there exists any index j such that cost[j] == z, original[j] == x, and changed[j] == y. You are allowed to do any number of operations, but any pair of operations must satisfy either of these two conditions:

The substrings picked in the operations are source[a..b] and source[c..d] with either b < c or d < a. In other words, the indices picked in both operations are disjoint.
The substrings picked in the operations are source[a..b] and source[c..d] with a == c and b == d. In other words, the indices picked in both operations are identical.
Return the minimum cost to convert the string source to the string target using any number of operations. If it is impossible to convert source to target, return -1.

Note that there may exist indices i, j such that original[j] == original[i] and changed[j] == changed[i].

 

Example 1:

Input: source = "abcd", target = "acbe", original = ["a","b","c","c","e","d"], changed = ["b","c","b","e","b","e"], cost = [2,5,5,1,2,20]
Output: 28
Explanation: To convert "abcd" to "acbe", do the following operations:
- Change substring source[1..1] from "b" to "c" at a cost of 5.
- Change substring source[2..2] from "c" to "e" at a cost of 1.
- Change substring source[2..2] from "e" to "b" at a cost of 2.
- Change substring source[3..3] from "d" to "e" at a cost of 20.
The total cost incurred is 5 + 1 + 2 + 20 = 28. 
It can be shown that this is the minimum possible cost.
Example 2:

Input: source = "abcdefgh", target = "acdeeghh", original = ["bcd","fgh","thh"], changed = ["cde","thh","ghh"], cost = [1,3,5]
Output: 9
Explanation: To convert "abcdefgh" to "acdeeghh", do the following operations:
- Change substring source[1..3] from "bcd" to "cde" at a cost of 1.
- Change substring source[5..7] from "fgh" to "thh" at a cost of 3. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation.
- Change substring source[5..7] from "thh" to "ghh" at a cost of 5. We can do this operation because indices [5,7] are disjoint with indices picked in the first operation, and identical with indices picked in the second operation.
The total cost incurred is 1 + 3 + 5 = 9.
It can be shown that this is the minimum possible cost.
Example 3:

Input: source = "abcdefgh", target = "addddddd", original = ["bcd","defgh"], changed = ["ddd","ddddd"], cost = [100,1578]
Output: -1
Explanation: It is impossible to convert "abcdefgh" to "addddddd".
If you select substring source[1..3] as the first operation to change "abcdefgh" to "adddefgh", you cannot select substring source[3..7] as the second operation because it has a common index, 3, with the first operation.
If you select substring source[3..7] as the first operation to change "abcdefgh" to "abcddddd", you cannot select substring source[1..3] as the second operation because it has a common index, 3, with the first operation.
 

Constraints:

1 <= source.length == target.length <= 1000
source, target consist only of lowercase English characters.
1 <= cost.length == original.length == changed.length <= 100
1 <= original[i].length == changed[i].length <= source.length
original[i], changed[i] consist only of lowercase English characters.
original[i] != changed[i]
1 <= cost[i] <= 106



# java


class Node {
    Node[] children = new Node[26];
    int v = -1;
}

class Solution {
    private final long inf = 1L << 60;
    private Node root = new Node();
    private int idx;

    private long[][] g;
    private char[] s;
    private char[] t;
    private Long[] f;

    public long minimumCost(
        String source, String target, String[] original, String[] changed, int[] cost) {
        int m = cost.length;
        g = new long[m << 1][m << 1];
        s = source.toCharArray();
        t = target.toCharArray();
        for (int i = 0; i < g.length; ++i) {
            Arrays.fill(g[i], inf);
            g[i][i] = 0;
        }
        for (int i = 0; i < m; ++i) {
            int x = insert(original[i]);
            int y = insert(changed[i]);
            g[x][y] = Math.min(g[x][y], cost[i]);
        }
        for (int k = 0; k < idx; ++k) {
            for (int i = 0; i < idx; ++i) {
                if (g[i][k] >= inf) {
                    continue;
                }
                for (int j = 0; j < idx; ++j) {
                    g[i][j] = Math.min(g[i][j], g[i][k] + g[k][j]);
                }
            }
        }
        f = new Long[s.length];
        long ans = dfs(0);
        return ans >= inf ? -1 : ans;
    }

    private int insert(String w) {
        Node node = root;
        for (char c : w.toCharArray()) {
            int i = c - 'a';
            if (node.children[i] == null) {
                node.children[i] = new Node();
            }
            node = node.children[i];
        }
        if (node.v < 0) {
            node.v = idx++;
        }
        return node.v;
    }

    private long dfs(int i) {
        if (i >= s.length) {
            return 0;
        }
        if (f[i] != null) {
            return f[i];
        }
        long res = s[i] == t[i] ? dfs(i + 1) : inf;
        Node p = root, q = root;
        for (int j = i; j < s.length; ++j) {
            p = p.children[s[j] - 'a'];
            q = q.children[t[j] - 'a'];
            if (p == null || q == null) {
                break;
            }
            if (p.v < 0 || q.v < 0) {
                continue;
            }
            long t = g[p.v][q.v];
            if (t < inf) {
                res = Math.min(res, t + dfs(j + 1));
            }
        }
        return f[i] = res;
    }
}


or


class Solution {
  public long minimumCost(String source, String target, String[] original, String[] changed,
                          int[] cost) {
    Set<Integer> subLengths = getSubLengths(original);
    Map<String, Integer> subToId = getSubToId(original, changed);
    final int subCount = subToId.size();
    // dist[u][v] := the minimum distance to change the substring with id u to
    // the substring with id v
    long[][] dist = new long[subCount][subCount];
    Arrays.stream(dist).forEach(A -> Arrays.fill(A, Long.MAX_VALUE));
    // dp[i] := the minimum cost to change the first i letters of `source` into
    // `target`, leaving the suffix untouched
    long[] dp = new long[source.length() + 1];
    Arrays.fill(dp, Long.MAX_VALUE);

    for (int i = 0; i < cost.length; ++i) {
      final int u = subToId.get(original[i]);
      final int v = subToId.get(changed[i]);
      dist[u][v] = Math.min(dist[u][v], (long) cost[i]);
    }

    for (int k = 0; k < subCount; ++k)
      for (int i = 0; i < subCount; ++i)
        if (dist[i][k] < Long.MAX_VALUE)
          for (int j = 0; j < subCount; ++j)
            if (dist[k][j] < Long.MAX_VALUE)
              dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);

    dp[0] = 0;

    for (int i = 0; i < source.length(); ++i) {
      if (dp[i] == Long.MAX_VALUE)
        continue;
      if (target.charAt(i) == source.charAt(i))
        dp[i + 1] = Math.min(dp[i + 1], dp[i]);
      for (int subLength : subLengths) {
        if (i + subLength > source.length())
          continue;
        String subSource = source.substring(i, i + subLength);
        String subTarget = target.substring(i, i + subLength);
        if (!subToId.containsKey(subSource) || !subToId.containsKey(subTarget))
          continue;
        final int u = subToId.get(subSource);
        final int v = subToId.get(subTarget);
        if (dist[u][v] < Long.MAX_VALUE)
          dp[i + subLength] = Math.min(dp[i + subLength], dp[i] + dist[u][v]);
      }
    }

    return dp[source.length()] == Long.MAX_VALUE ? -1 : dp[source.length()];
  }

  private Map<String, Integer> getSubToId(String[] original, String[] changed) {
    Map<String, Integer> subToId = new HashMap<>();
    for (final String s : original)
      subToId.putIfAbsent(s, subToId.size());
    for (final String s : changed)
      subToId.putIfAbsent(s, subToId.size());
    return subToId;
  }

  private Set<Integer> getSubLengths(String[] original) {
    Set<Integer> subLengths = new HashSet<>();
    for (final String s : original)
      subLengths.add(s.length());
    return subLengths;
  }
}


or

import java.util.*;

public class Solution {
    private Map<String, Integer> indices;
    private List<List<Long>> costs;

    private void assignIndices(List<String> original, List<String> changed) {
        Set<String> distinctStrings = new HashSet<>(original);
        distinctStrings.addAll(changed);

        int index = 0;
        for (String str : distinctStrings) {
            indices.put(str, index++);
        }
    }

    private void buildGraph(List<String> original, List<String> changed, List<Integer> cost, Map<String, Integer> indices, List<List<Pair<Integer, Integer>>> graph) {
        int n = original.size();

        for (int i = 0; i < n; ++i) {
            int u = indices.get(original.get(i));
            int v = indices.get(changed.get(i));
            int w = cost.get(i);
            graph.get(u).add(new Pair<>(v, w));
        }
    }

    private List<Long> dijkstra(List<List<Pair<Integer, Integer>>> graph, int source, int n) {
        List<Long> dist = new ArrayList<>(Collections.nCopies(n, 1000000000000L));
        dist.set(source, 0L);

        PriorityQueue<Pair<Integer, Integer>> pq = new PriorityQueue<>(Comparator.comparingInt(p -> -p.first));
        pq.add(new Pair<>(0, source));

        while (!pq.isEmpty()) {
            int u = pq.peek().second;
            int cost = -pq.peek().first;
            pq.poll();

            if (cost > dist.get(u)) continue;

            for (Pair<Integer, Integer> neighbor : graph.get(u)) {
                int v = neighbor.first;
                int edgeCost = neighbor.second;

                if (dist.get(u) + edgeCost < dist.get(v)) {
                    dist.set(v, dist.get(u) + edgeCost);
                    pq.add(new Pair<>(-dist.get(v).intValue(), v));
                }
            }
        }

        return dist;
    }

    private List<List<Long>> minCostMatrix(List<String> original, List<String> changed, List<Integer> cost) {
        assignIndices(original, changed);
        int n = indices.size();

        // Build graph with integer indices
        List<List<Pair<Integer, Integer>>> graph = new ArrayList<>(n);
        for (int i = 0; i < n; ++i) {
            graph.add(new ArrayList<>());
        }
        buildGraph(original, changed, cost, indices, graph);

        // Initialize cost matrix with all distances set to infinity
        List<List<Long>> costMatrix = new ArrayList<>(n);
        for (int i = 0; i < n; ++i) {
            costMatrix.add(new ArrayList<>(Collections.nCopies(n, 1000000000000L)));
        }

        // Run Dijkstra's algorithm for each node
        for (int i = 0; i < n; ++i) {
            List<Long> distances = dijkstra(graph, i, n);

            // Update the cost matrix
            for (int j = 0; j < n; ++j) {
                costMatrix.get(i).set(j, distances.get(j));
            }
        }

        return costMatrix;
    }

    private long minCost(String source, String target) {
        int n = source.length();

        // Collect unique lengths present in the indices map
        Set<Integer> uniqueLengths = new HashSet<>(indices.size());
        for (Map.Entry<String, Integer> entry : indices.entrySet()) {
            uniqueLengths.add(entry.getKey().length());
        }

        // Initialize dp array
       
       List<Long> dp = new ArrayList<>(Collections.nCopies(n + 1, 1e12).stream().map(Double::longValue).collect(Collectors.toList()));


        // Base case: converting an empty string to an empty string costs 0
        dp.set(0, 0L);

        for (int i = 1; i <= n; ++i) {
            for (int len : uniqueLengths) {
                if (i - len >= 0) {
                    String substrSource = source.substring(i - len, i);
                    String substrTarget = target.substring(i - len, i);

                    if (substrSource.equals(substrTarget)) {
                        dp.set(i, Math.min(dp.get(i), dp.get(i - len)));
                    } else if (indices.containsKey(substrSource) && indices.containsKey(substrTarget)) {
                        int u = indices.get(substrSource);
                        int v = indices.get(substrTarget);
                        dp.set(i, Math.min(dp.get(i), dp.get(i - len) + costs.get(u).get(v)));
                    }
                }
            }
            if (source.charAt(i - 1) == target.charAt(i - 1))
                dp.set(i, Math.min(dp.get(i), dp.get(i - 1)));
        }

        return (dp.get(n) >= 1e12) ? -1 : dp.get(n);
    }

    public long minimumCost(String source, String target, String[] original, String[] changed, int[] cost) {
        indices = new HashMap<>();
        costs = minCostMatrix(Arrays.asList(original), Arrays.asList(changed), Arrays.stream(cost).boxed().collect(Collectors.toList()));
        return minCost(source, target);
    }

    // Pair class for simplicity
    static class Pair<A, B> {
        A first;
        B second;

        public Pair(A first, B second) {
            this.first = first;
            this.second = second;
        }
    }
}


or


