https://leetcode.com/problems/sliding-puzzle/


773. Sliding Puzzle
Hard
Topics
Companies
Hint
On an 2 x 3 board, there are five tiles labeled from 1 to 5, and an empty square represented by 0. A move consists of choosing 0 and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the board is [[1,2,3],[4,5,0]].

Given the puzzle board board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.

 

Example 1:


Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.
Example 2:


Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.
Example 3:


Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.
An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
 

Constraints:

board.length == 2
board[i].length == 3
0 <= board[i][j] <= 5
Each value board[i][j] is unique.


# java


class Solution {
  public int slidingPuzzle(int[][] board) {
    final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    final int m = 2;
    final int n = 3;
    final String goal = "123450";
    StringBuilder startSb = new StringBuilder();

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        startSb.append((char) ('0' + board[i][j]));

    final String start = startSb.toString();
    if (start.equals(goal))
      return 0;

    Queue<String> q = new ArrayDeque<>(List.of(start));
    Set<String> seen = new HashSet<>(Arrays.asList(start));

    for (int step = 1; !q.isEmpty(); ++step)
      for (int sz = q.size(); sz > 0; --sz) {
        final String s = q.poll();
        final int zeroIndex = s.indexOf("0");
        final int i = zeroIndex / n;
        final int j = zeroIndex % n;
        for (int[] dir : DIRS) {
          final int x = i + dir[0];
          final int y = j + dir[1];
          if (x < 0 || x == m || y < 0 || y == n)
            continue;
          final int swappedIndex = x * n + y;
          StringBuilder sb = new StringBuilder(s);
          sb.setCharAt(zeroIndex, s.charAt(swappedIndex));
          sb.setCharAt(swappedIndex, s.charAt(zeroIndex));
          final String t = sb.toString();
          if (t.equals(goal))
            return step;
          if (!seen.contains(t)) {
            q.offer(t);
            seen.add(t);
          }
        }
      }

    return -1;
  }
}


or


class Solution {
    private int m = 2;
    private int n = 3;

    public int slidingPuzzle(int[][] board) {
        String start = "";
        String end = "123450";
        String seq = "";
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                start += board[i][j];
                if (board[i][j] != 0) {
                    seq += board[i][j];
                }
            }
        }
        if (!check(seq)) {
            return -1;
        }
        PriorityQueue<Pair<Integer, String>> q
            = new PriorityQueue<>(Comparator.comparingInt(Pair::getKey));
        Map<String, Integer> dist = new HashMap<>();
        dist.put(start, 0);
        q.offer(new Pair<>(f(start), start));
        int[] dirs = {-1, 0, 1, 0, -1};
        while (!q.isEmpty()) {
            String state = q.poll().getValue();
            int step = dist.get(state);
            if (end.equals(state)) {
                return step;
            }
            int p1 = state.indexOf("0");
            int i = p1 / n, j = p1 % n;
            char[] s = state.toCharArray();
            for (int k = 0; k < 4; ++k) {
                int x = i + dirs[k], y = j + dirs[k + 1];
                if (x >= 0 && x < m && y >= 0 && y < n) {
                    int p2 = x * n + y;
                    swap(s, p1, p2);
                    String next = String.valueOf(s);
                    if (!dist.containsKey(next) || dist.get(next) > step + 1) {
                        dist.put(next, step + 1);
                        q.offer(new Pair<>(step + 1 + f(next), next));
                    }
                    swap(s, p1, p2);
                }
            }
        }
        return -1;
    }

    private void swap(char[] arr, int i, int j) {
        char t = arr[i];
        arr[i] = arr[j];
        arr[j] = t;
    }

    private int f(String s) {
        int ans = 0;
        for (int i = 0; i < m * n; ++i) {
            if (s.charAt(i) != '0') {
                int num = s.charAt(i) - '1';
                ans += Math.abs(i / n - num / n) + Math.abs(i % n - num % n);
            }
        }
        return ans;
    }

    private boolean check(String s) {
        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                if (s.charAt(i) > s.charAt(j)) {
                    ++cnt;
                }
            }
        }
        return cnt % 2 == 0;
    }
}


or


class Solution {
    public int slidingPuzzle(int[][] board) {
        // Directions for possible swaps based on '0' position
        int[][] dir = {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};
        String target = "123450";
        Set<String> vis = new HashSet<>(); // Track visited configurations
        Queue<String> q = new LinkedList<>();
        String start = "";

        // Convert 2D board to a single string
        for (int[] row : board) {
            for (int col : row) {
                start += col;
            }
        }

        q.offer(start);
        vis.add(start);
        int step = 0;

        // Perform BFS
        while (!q.isEmpty()) {
            int size = q.size();
            while (size-- > 0) {
                String current = q.poll();

                // Check if target is reached
                if (current.equals(target)) return step;

                int zero = current.indexOf('0'); // Find position of '0'

                // Generate next moves
                for (int move : dir[zero]) {
                    StringBuilder next = new StringBuilder(current);
                    char temp = next.charAt(zero);
                    next.setCharAt(zero, next.charAt(move));
                    next.setCharAt(move, temp);

                    if (!vis.contains(next.toString())) { // Add unvisited states to the queue
                        vis.add(next.toString());
                        q.offer(next.toString());
                    }
                }
            }
            step++;
        }
        return -1; // Return -1 if target is unreachable
    }
}


or


/**
 * Double-Ended BFS + Bit Manipulation
 *
 * Find possible zero moves for each zero location. Use this to find next states
 * of current state. Perform Double-Ended BFS to find the total number of moves.
 *
 * To save space, we are using a single integer to represent a state. Since our
 * number is between 0 & 5, it will take maximum 3 bits for each number. Thus we
 * will need only 18 bits to store each state.
 *
 * Time Complexity: O(V + E).
 * V = Number of possible states = (M*N)!.
 * E = 3 * V, because there can be a maximum of 3 edges from each vertex.
 * Total TC = O((MN)! + 3*(MN)!) = O((MN)!) = O(4 * 6!)
 *
 * Space Complexity: O((MN)!) to save each state in begin, end and visited
 * collections = O(6!)
 *
 * M = Number of rows. N = Number of cols.
 */
class Solution {
    // 3-Bit Binary representation of 123450
    private static final int FINAL_STATE = 0b001010011100101000;
    // Possible destination of zero. Here DIRS[0] represents the most significant
    // 3-Bit number in the state. And, DIRS[5] represents the least significant
    // 3-Bit number in the state.
    private static final int[][] DIRS = { { 1, 3 }, { 0, 2, 4 }, { 1, 5 }, { 0, 4 }, { 1, 3, 5 }, { 2, 4 } };

    public int slidingPuzzle(int[][] board) {
        if (board == null || board.length != 2 || board[0].length != 3) {
            throw new IllegalArgumentException("Input board is invalid");
        }

        int zeroIdx = -1;
        int curState = 0;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                // Inserting the num at the end of integer
                curState = (curState << 3) | board[i][j];
                if (board[i][j] == 0) {
                    zeroIdx = i * 3 + j;
                }
            }
        }

        if (FINAL_STATE == curState) {
            return 0;
        }

        HashSet<Integer> visited = new HashSet<>();
        int moves = 0;

        HashMap<Integer, Integer> begin = new HashMap<>();
        begin.put(curState, zeroIdx);
        visited.add(curState);

        HashMap<Integer, Integer> end = new HashMap<>();
        end.put(FINAL_STATE, 5);
        visited.add(FINAL_STATE);

        while (!begin.isEmpty()) {
            if (begin.size() > end.size()) {
                HashMap<Integer, Integer> tempSet = begin;
                begin = end;
                end = tempSet;
            }

            HashMap<Integer, Integer> next = new HashMap<>();
            moves++;
            for (int cur : begin.keySet()) {
                zeroIdx = begin.get(cur);

                for (int d : DIRS[zeroIdx]) {
                    int newState = swap(cur, zeroIdx, d);
                    if (end.containsKey(newState)) {
                        return moves;
                    }
                    if (visited.add(newState)) {
                        next.put(newState, d);
                    }
                }
            }
            begin = next;
        }

        return -1;
    }

    private int swap(int state, int zeroIdx, int destIdx) {
        // Generate mask for destIdx
        int mask = 0b111 << ((5 - destIdx) * 3);
        // Extracting num at destIdx
        int num = state & mask;
        // Moving num to zeroIdx
        if (zeroIdx < destIdx) {
            num <<= (destIdx - zeroIdx) * 3;
        } else {
            num >>>= (zeroIdx - destIdx) * 3;
        }

        // Setting zero at destIdx
        state &= ~mask;
        // Setting num at zeroIdx
        return state | num;
    }
}

or

class Solution 
{
    public int slidingPuzzle(int[][] board) 
    {
        String target= "123450";//Final or the Destination Puzle we have to reach 
        
        StringBuilder start_= new StringBuilder();//String Buffer because it takes O(1) time for string creation  
        for(int i= 0; i< 2; i++){
            for(int j= 0; j< 3; j++)
                start_.append(board[i][j]);
        }
        String start= start_.toString();//Intial puzzle given
        
        //Our main objective is to find the min number of swap or move required to reach the destination puzzle if possible(So BFS is the best posssible solution because it gives the shortest path between 2 points)
        
        Queue<String> q= new ArrayDeque<>();
        HashSet<String> visited= new HashSet<>();//so that we dont traverse the same puzzle again//prevent cycle 
        int[][] swap= {{1, 3}, {0, 2, 4}, {1, 5}, {0, 4}, {1, 3, 5}, {2, 4}};//possible number of swapping position, depending on the current position of 0//BFS traversal direction 
        
        int level= 0;//our current level or the starting level 
        
        visited.add(start);//marking the starting puzzle as visited 
        q.offer(start);//adding the starting puzzle into the Queue
        while(!q.isEmpty())
        {//r m* w a*
            int size= q.size();//polling constraint, breadth wise  
            while(size  -- > 0)
            {
                String temp= q.poll();//polling the current puzzle 
                
                if(temp.equals(target))//if we reach the destination puzzle, we return the level(as it is Guaranteed that it will be the min number of swap or move, since BFS expand radially)
                    return level;
                
                int index= temp.indexOf('0');//returns the index of the first occutrance of 0
                for(int swapIndex: swap[index])//getting the possible swapping positions from the current index of 0 
                {
                    StringBuilder sb= new StringBuilder(temp);//string builder is mutable,i.e; it can be changed 
            
                    //Swapping 
                    sb.setCharAt(index, temp.charAt(swapIndex));
                    sb.setCharAt(swapIndex, '0');//puzzle swapped //Empty space moving
                    
                    String puzz= sb.toString();//converting into string 
                    
                    if(visited.contains(puzz) == true)//not visiting the visited puzzle 
                        continue;
                    
                    visited.add(puzz);//marking the current puzzle as visited 
                    q.offer(puzz);//adding the puzzle tro the Queue
                }
            }
            level+= 1;//increasing the level, as all the puzzle at same level are inserted 
        }
        return -1;//when we can't reach the destination puzzle
    }
}

