https://leetcode.com/problems/freedom-trail/description/


514. Freedom Trail
Hard
Topics
Companies
In the video game Fallout 4, the quest "Road to Freedom" requires players to reach a metal dial called the "Freedom Trail Ring" and use the dial to spell a specific keyword to open the door.

Given a string ring that represents the code engraved on the outer ring and another string key that represents the keyword that needs to be spelled, return the minimum number of steps to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at the "12:00" direction. You should spell all the characters in key one by one by rotating ring clockwise or anticlockwise to make each character of the string key aligned at the "12:00" direction and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:

You can rotate the ring clockwise or anticlockwise by one place, which counts as one step. The final purpose of the rotation is to align one of ring's characters at the "12:00" direction, where this character must equal key[i].
If the character key[i] has been aligned at the "12:00" direction, press the center button to spell, which also counts as one step. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.
 

Example 1:


Input: ring = "godding", key = "gd"
Output: 4
Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
For the second key character 'd', we need to rotate the ring "godding" anticlockwise by two steps to make it become "ddinggo".
Also, we need 1 more step for spelling.
So the final output is 4.
Example 2:

Input: ring = "godding", key = "godding"
Output: 13
 

Constraints:

1 <= ring.length, key.length <= 100
ring and key consist of only lower case English letters.
It is guaranteed that key could always be spelled by rotating ring.


# java


class Solution {
    private static final int MAX = Integer.MAX_VALUE;

    public int findRotateSteps(String ring, String key) {
        Map<Pair<Integer, Integer>, Integer> bestSteps = new HashMap<>();
        return tryLock(0, 0, ring, key, MAX, bestSteps);
    }

    // Find the minimum steps between two indexes of ring
    private int countSteps(int curr, int next, int ringLength) {
        int stepsBetween = Math.abs(curr - next);
        int stepsAround = ringLength - stepsBetween;
        return Math.min(stepsBetween, stepsAround);
    }

    public int tryLock(int ringIndex, int keyIndex, String ring, String key, int minSteps,
            Map<Pair<Integer, Integer>, Integer> bestSteps) {
        // If we have already calculated this sub-problem, return the result
        if (bestSteps.containsKey(new Pair<>(ringIndex, keyIndex))) {
            return bestSteps.get(new Pair<>(ringIndex, keyIndex));
        }
        // If we reach the end of the key, it has been spelled
        if (keyIndex == key.length()) {
            return 0;
        }
        // For each occurrence of the character at keyIndex of key in ring
        // Calculate and save the minimum steps to that character from the ringIndex of ring
        for (int charIndex = 0; charIndex < ring.length(); charIndex++) {
            if (ring.charAt(charIndex) == key.charAt(keyIndex)) {
                int totalSteps = countSteps(ringIndex, charIndex, ring.length()) + 1
                                            + tryLock(charIndex, keyIndex + 1, ring, key, MAX, bestSteps);
                minSteps = Math.min(minSteps, totalSteps);
                bestSteps.put(new Pair<>(ringIndex, keyIndex), minSteps);
            }
        }
        return minSteps;
    }
}


or


class Solution {
    public int findRotateSteps(String ring, String key) {
        int ringLen = ring.length();
        int keyLen = key.length();
        int[][] bestSteps = new int[ringLen][keyLen + 1];
        // Initialize values of best_steps to largest integer
        for (int[] row : bestSteps) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        // Initialize last column to zero to represent the word has been spelled 
        for (int i = 0; i < ring.length(); i++) {
            bestSteps[i][keyLen] = 0;
        }
        // For each occurrence of the character at keyIndex of key in ring
        // Stores minimum steps to the character from ringIndex of ring
        for (int keyIndex = keyLen - 1; keyIndex >= 0; keyIndex--) {
            for (int ringIndex = 0; ringIndex < ringLen; ringIndex++) {
                for (int charIndex = 0; charIndex < ringLen; charIndex++) {
                    if (ring.charAt(charIndex) == key.charAt(keyIndex)) {
                        bestSteps[ringIndex][keyIndex] = Math.min(bestSteps[ringIndex][keyIndex],
                                1 + countSteps(ringIndex, charIndex, ringLen)
                                + bestSteps[charIndex][keyIndex + 1]);
                    }
                }
            }
        }
        return bestSteps[0][0];
    }

    // Find the minimum steps between two indexes of ring
    private int countSteps(int curr, int next, int ringLength) {
        int stepsBetween = Math.abs(curr - next);
        int stepsAround = ringLength - stepsBetween;
        return Math.min(stepsBetween, stepsAround);
    }
}


or


class Solution {
    public int findRotateSteps(String ring, String key) {
        int ringLen = ring.length();
        int keyLen = key.length();
        int[] curr = new int[ringLen];
        int[] prev = new int[ringLen];
        Arrays.fill(prev, 0);
        // For each occurrence of the character at key_index of key in ring
        // Stores minimum steps to the character from ringIndex of ring
        for (int keyIndex = keyLen - 1; keyIndex >= 0; keyIndex--) {
            Arrays.fill(curr, Integer.MAX_VALUE);
            for (int ringIndex = 0; ringIndex < ringLen; ringIndex++) {
                for (int charIndex = 0; charIndex < ringLen; charIndex++) {
                    if (ring.charAt(charIndex) == key.charAt(keyIndex)) {
                        curr[ringIndex] = Math.min(curr[ringIndex],
                                1 + countSteps(ringIndex, charIndex, ringLen) + prev[charIndex]);
                    }
                }
            }
            prev = curr.clone();
        }
        return prev[0];
    }

    // Find the minimum steps between two indexes of ring
    private int countSteps(int curr, int next, int ringLength) {
        int stepsBetween = Math.abs(curr - next);
        int stepsAround = ringLength - stepsBetween;
        return Math.min(stepsBetween, stepsAround);
    }
}


or


class Solution {
    public int findRotateSteps(String ring, String key) {
        int ringLen = ring.length();
        int keyLen = key.length();

        // HashMap to store the indices of occurrences of each character in the ring
        Map<Character, List<Integer>> characterIndices = new HashMap<>();
        for (int i = 0; i < ring.length(); i++) {
            char ch = ring.charAt(i);
            characterIndices.computeIfAbsent(ch, k -> new ArrayList<>()).add(i);
        }

        // Initialize the min heap (priority queue) with the starting point
        // Each element of the heap is an array of integers representing:
        // totalSteps, ringIndex, keyIndex
        PriorityQueue<int[]> heap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
                                                                                             
        heap.offer(new int[] { 0, 0, 0 });

        // HashSet to keep track of visited states
        Set<Pair<Integer, Integer>> seen = new HashSet<>();

        // Spell the keyword using the metal dial
        int totalSteps = 0;
        while (!heap.isEmpty()) {
            // Pop the element with the smallest total steps from the heap
            int[] state = heap.poll();
            totalSteps = state[0];
            int ringIndex = state[1];
            int keyIndex = state[2];

            // We have spelled the keyword
            if (keyIndex == keyLen) {
                break;
            }

            // Continue if we have visited this character from this position in ring before
            Pair<Integer, Integer> currentState = new Pair<>(ringIndex, keyIndex);
            if (seen.contains(currentState)) {
                continue;
            }

            // Otherwise, add this pair to the visited list
            seen.add(currentState);

            // Add the rest of the occurrences of this character in ring to the heap
            for (int nextIndex : characterIndices.get(key.charAt(keyIndex))) {
                heap.offer(
                        new int[] {totalSteps + countSteps(ringIndex, nextIndex, ringLen),
                                    nextIndex, keyIndex + 1});
            }
        }

        // Return the total steps and add keyLen to account for 
        // pressing the center button for each character in the keyword
        return totalSteps + keyLen;
    }

    // Find the minimum steps between two indexes of ring
    private int countSteps(int curr, int next, int ringLen) {
        int stepsBetween = Math.abs(curr - next);
        int stepsAround = ringLen - stepsBetween;
        return Math.min(stepsBetween, stepsAround);
    }
}

or

class Solution {
  public int findRotateSteps(String ring, String key) {
    Map<String, Integer> mem = new HashMap<>();
    return dfs(ring, key, 0, mem) + key.length();
  }

  // Returns the number of rotates of ring to match key[index..n).
  private int dfs(final String ring, final String key, int index, Map<String, Integer> mem) {
    if (index == key.length())
      return 0;
    // Add the index to prevent duplication.
    final String hashKey = ring + index;
    if (mem.containsKey(hashKey))
      return mem.get(hashKey);

    int ans = Integer.MAX_VALUE;

    // For each ring[i] == key[index], we rotate the ring to match the ring[i]
    // with the key[index], then recursively match the newRing with the
    // key[index + 1..n).
    for (int i = 0; i < ring.length(); ++i)
      if (ring.charAt(i) == key.charAt(index)) {
        final int minRotates = Math.min(i, ring.length() - i);
        final String newRing = ring.substring(i) + ring.substring(0, i);
        final int remainingRotates = dfs(newRing, key, index + 1, mem);
        ans = Math.min(ans, minRotates + remainingRotates);
      }

    mem.put(hashKey, ans);
    return ans;
  }
}


or


class Solution {
    public int findRotateSteps(String ring, String key) {
        int m = key.length(), n = ring.length();
        List<Integer>[] pos = new List[26];
        Arrays.setAll(pos, k -> new ArrayList<>());
        for (int i = 0; i < n; ++i) {
            int j = ring.charAt(i) - 'a';
            pos[j].add(i);
        }
        int[][] f = new int[m][n];
        for (var g : f) {
            Arrays.fill(g, 1 << 30);
        }
        for (int j : pos[key.charAt(0) - 'a']) {
            f[0][j] = Math.min(j, n - j) + 1;
        }
        for (int i = 1; i < m; ++i) {
            for (int j : pos[key.charAt(i) - 'a']) {
                for (int k : pos[key.charAt(i - 1) - 'a']) {
                    f[i][j] = Math.min(
                        f[i][j], f[i - 1][k] + Math.min(Math.abs(j - k), n - Math.abs(j - k)) + 1);
                }
            }
        }
        int ans = 1 << 30;
        for (int j : pos[key.charAt(m - 1) - 'a']) {
            ans = Math.min(ans, f[m - 1][j]);
        }
        return ans;
    }
}


or


import java.util.*;

class Solution {
    public int findRotateSteps(String ring, String key) {
        char[] r = ring.toCharArray();
        List<Integer>[] positions = new List[26];
        
        // Store the positions of each character in the ring
        for (int i = 0; i < r.length; i++) {
            int c = r[i] - 'a';
            if (positions[c] == null) positions[c] = new ArrayList<>();
            positions[c].add(i);
        }
        
        // Dynamic programming memoization
        int[][] dp = new int[key.length()][r.length];
        
        // Start with the first character of the key at position 0
        return helper(0, 0, positions, key.toCharArray(), r, dp);
    }
    
    // Recursive function with memoization
    int helper(int index, int pos, List<Integer>[] positions, char[] key, char[] ring, int[][] dp) {
        // If all characters of the key have been matched, return 0
        if (index == key.length) return 0;
        
        // If this state has already been computed, return the cached result
        if (dp[index][pos] > 0) return dp[index][pos];
        
        // Current character in the key
        char target = key[index];
        
        // List of possible positions of the current character in the ring
        List<Integer> possiblePositions = positions[target - 'a'];
        
        // Minimum steps required to reach the current character from the current position
        int minSteps = Integer.MAX_VALUE;
        
        // Iterate through possible positions and calculate minimum steps
        for (int nextPos : possiblePositions) {
            // Calculate the steps to move from the current position to the next position
            int steps = Math.min(Math.abs(nextPos - pos), ring.length - Math.abs(nextPos - pos));
            
            // Calculate steps for remaining characters recursively
            int totalSteps = steps + helper(index + 1, nextPos, positions, key, ring, dp);
            
            // Update the minimum steps
            minSteps = Math.min(minSteps, totalSteps);
        }
        
        // Cache the result and return
        return dp[index][pos] = minSteps + 1;
    }
}

or


public class Solution {
    public int dist(int size, int p, int t) {
        return Math.min(Math.abs(t - p), size - Math.abs(t - p));
    }

    public int findRotateSteps(String ring, String key) {
        int[][] mp = new int[26][100];
        int[] freq = new int[26];
        int[][] dp = new int[100][100];

        int n = ring.length(), m = key.length();
        for (int i = 0; i < n; ++i) {
            mp[ring.charAt(i) - 'a'][freq[ring.charAt(i) - 'a']++] = i;
        }

        for (int i = 0; i < freq[key.charAt(0) - 'a']; ++i) {
            dp[0][mp[key.charAt(0) - 'a'][i]] = dist(n, 0, mp[key.charAt(0) - 'a'][i]) + 1;
        }

        for (int i = 1; i < m; ++i) {
            for (int j = 0; j < freq[key.charAt(i) - 'a']; ++j) {
                int mini = Integer.MAX_VALUE;
                for (int k = 0; k < freq[key.charAt(i - 1) - 'a']; ++k) {
                    mini = Math.min(mini, dp[i - 1][mp[key.charAt(i - 1) - 'a'][k]] +
                            dist(n, mp[key.charAt(i) - 'a'][j], mp[key.charAt(i - 1) - 'a'][k]) + 1);
                }

                dp[i][mp[key.charAt(i) - 'a'][j]] = mini;
            }
        }

        int res = Integer.MAX_VALUE;
        for (int i = 0; i < freq[key.charAt(m - 1) - 'a']; ++i) {
            res = Math.min(res, dp[m - 1][mp[key.charAt(m - 1) - 'a'][i]]);
        }

        return res;
    }
}
