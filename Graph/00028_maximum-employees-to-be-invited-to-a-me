https://leetcode.com/problems/maximum-employees-to-be-invited-to-a-meeting/description/

2127. Maximum Employees to Be Invited to a Meeting
Hard
Topics
Companies
Hint
A company is organizing a meeting and has a list of n employees, waiting to be invited. They have arranged for a large circular table, capable of seating any number of employees.

The employees are numbered from 0 to n - 1. Each employee has a favorite person and they will attend the meeting only if they can sit next to their favorite person at the table. The favorite person of an employee is not themself.

Given a 0-indexed integer array favorite, where favorite[i] denotes the favorite person of the ith employee, return the maximum number of employees that can be invited to the meeting.

 

Example 1:


Input: favorite = [2,2,1,2]
Output: 3
Explanation:
The above figure shows how the company can invite employees 0, 1, and 2, and seat them at the round table.
All employees cannot be invited because employee 2 cannot sit beside employees 0, 1, and 3, simultaneously.
Note that the company can also invite employees 1, 2, and 3, and give them their desired seats.
The maximum number of employees that can be invited to the meeting is 3. 
Example 2:

Input: favorite = [1,2,0]
Output: 3
Explanation: 
Each employee is the favorite person of at least one other employee, and the only way the company can invite them is if they invite every employee.
The seating arrangement will be the same as that in the figure given in example 1:
- Employee 0 will sit between employees 2 and 1.
- Employee 1 will sit between employees 0 and 2.
- Employee 2 will sit between employees 1 and 0.
The maximum number of employees that can be invited to the meeting is 3.
Example 3:


Input: favorite = [3,0,1,4,1]
Output: 4
Explanation:
The above figure shows how the company will invite employees 0, 1, 3, and 4, and seat them at the round table.
Employee 2 cannot be invited because the two spots next to their favorite employee 1 are taken.
So the company leaves them out of the meeting.
The maximum number of employees that can be invited to the meeting is 4.
 

Constraints:

n == favorite.length
2 <= n <= 105
0 <= favorite[i] <= n - 1
favorite[i] != i



# java


class Solution {
    public int maximumInvitations(int[] favorite) {
        return Math.max(maxCycle(favorite), topologicalSort(favorite));
    }

    private int maxCycle(int[] fa) {
        int n = fa.length;
        boolean[] vis = new boolean[n];
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (vis[i]) {
                continue;
            }
            List<Integer> cycle = new ArrayList<>();
            int j = i;
            while (!vis[j]) {
                cycle.add(j);
                vis[j] = true;
                j = fa[j];
            }
            for (int k = 0; k < cycle.size(); ++k) {
                if (cycle.get(k) == j) {
                    ans = Math.max(ans, cycle.size() - k);
                }
            }
        }
        return ans;
    }

    private int topologicalSort(int[] fa) {
        int n = fa.length;
        int[] indeg = new int[n];
        int[] dist = new int[n];
        Arrays.fill(dist, 1);
        for (int v : fa) {
            indeg[v]++;
        }
        Deque<Integer> q = new ArrayDeque<>();
        for (int i = 0; i < n; ++i) {
            if (indeg[i] == 0) {
                q.offer(i);
            }
        }
        int ans = 0;
        while (!q.isEmpty()) {
            int i = q.pollFirst();
            dist[fa[i]] = Math.max(dist[fa[i]], dist[i] + 1);
            if (--indeg[fa[i]] == 0) {
                q.offer(fa[i]);
            }
        }
        for (int i = 0; i < n; ++i) {
            if (i == fa[fa[i]]) {
                ans += dist[i];
            }
        }
        return ans;
    }
}


or

enum State { INIT, VISITING, VISITED }

class Solution {
  public int maximumInvitations(int[] favorite) {
    final int n = favorite.length;
    int sumComponentsLength = 0; // the component: a -> b -> c <-> x <- y
    List<Integer>[] graph = new List[n];
    int[] inDegrees = new int[n];
    int[] maxChainLength = new int[n];
    Arrays.fill(maxChainLength, 1);

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    // Build the graph.
    for (int i = 0; i < n; ++i) {
      graph[i].add(favorite[i]);
      ++inDegrees[favorite[i]];
    }

    // Perform topological sorting.
    Queue<Integer> q = IntStream.range(0, n)
                           .filter(i -> inDegrees[i] == 0)
                           .boxed()
                           .collect(Collectors.toCollection(ArrayDeque::new));

    while (!q.isEmpty()) {
      final int u = q.poll();
      for (final int v : graph[u]) {
        if (--inDegrees[v] == 0)
          q.offer(v);
        maxChainLength[v] = Math.max(maxChainLength[v], 1 + maxChainLength[u]);
      }
    }

    for (int i = 0; i < n; ++i)
      if (favorite[favorite[i]] == i)
        // i <-> favorite[i] (the cycle's length = 2)
        sumComponentsLength += maxChainLength[i] + maxChainLength[favorite[i]];

    int[] parent = new int[n];
    Arrays.fill(parent, -1);
    boolean[] seen = new boolean[n];
    State[] states = new State[n];

    for (int i = 0; i < n; ++i)
      if (!seen[i])
        findCycle(graph, i, parent, seen, states);

    return Math.max(sumComponentsLength / 2, maxCycleLength);
  }

  private int maxCycleLength = 0; // the cycle : a -> b -> c -> a

  private void findCycle(List<Integer>[] graph, int u, int[] parent, boolean[] seen,
                         State[] states) {
    seen[u] = true;
    states[u] = State.VISITING;

    for (final int v : graph[u]) {
      if (!seen[v]) {
        parent[v] = u;
        findCycle(graph, v, parent, seen, states);
      } else if (states[v] == State.VISITING) {
        // Find the cycle's length.
        int curr = u;
        int cycleLength = 1;
        while (curr != v) {
          curr = parent[curr];
          ++cycleLength;
        }
        maxCycleLength = Math.max(maxCycleLength, cycleLength);
      }
    }

    states[u] = State.VISITED;
  }
}


or


import java.util.*;

class Solution {
    public int maximumInvitations(int[] favorite) {
        int n = favorite.length;
        int[] inDeg = new int[n];
        int[] chainLen = new int[n];
        boolean[] visited = new boolean[n];
        Queue<Integer> q = new LinkedList<>();
        
        // Count how many people favor each employee
        for (int f : favorite) inDeg[f]++;
        
        // Start with employees no one favorites (chain starters)
        for (int i = 0; i < n; i++) 
            if (inDeg[i] == 0) q.add(i);
        
        // Process chains to calculate max chain lengths
        while (!q.isEmpty()) {
            int u = q.poll();
            visited[u] = true;
            int v = favorite[u];
            chainLen[v] = Math.max(chainLen[v], chainLen[u] + 1);
            if (--inDeg[v] == 0) q.add(v);
        }
        
        int maxCycle = 0, pairChains = 0;
        
        // Detect cycles and calculate results
        for (int i = 0; i < n; i++) {
            if (visited[i]) continue;
            
            int cycleLen = 0, current = i;
            // Measure cycle length
            while (!visited[current]) {
                visited[current] = true;
                current = favorite[current];
                cycleLen++;
            }
            
            if (cycleLen == 2) // Mutual pair
                pairChains += 2 + chainLen[i] + chainLen[favorite[i]];
            else 
                maxCycle = Math.max(maxCycle, cycleLen);
        }
        
        return Math.max(maxCycle, pairChains);
    }
}


or


// kosaraju algo


class Solution {
    public int maximumInvitations(int[] favorite) {   
        ArrayList<ArrayList<Integer>> graph=new ArrayList<>();
        int n=favorite.length;

       //this solution is based on Kosaraju's algo.
       //it contains 3 steps. this all has 3 main steps with conditions for edge cases;
       //1. make adjacency list
       //2. topological sort saved in a stack
       //3. transpose of the graph called "rev" ie. reversing all edges of the graph.
       // after this kosaraju's algo is modified a bit for thr usecase

       //1.making the adjacency list named graph
        for(int i=0;i<n;i++)
         graph.add(new ArrayList<Integer>());

        for(int i=0;i<n;i++)
        graph.get(i).add(favorite[i]);
       
       //stack of topological sort 
        Stack<Integer> s=new Stack<>();
        //visited array
        boolean[] vis=new boolean[n];
        
        //2. topological sort
        for(int i=0;i<n;i++)
        if(!vis[i])
        topo(i,vis,graph,s);
        
        //3. initializing reverse/tranpose graph 
        ArrayList<ArrayList<Integer>> rev=new ArrayList<>();

         for(int i=0;i<n;i++)
         rev.add(new ArrayList<Integer>());
       // filling the reverse graph or rev
        for(int i=0;i<n;i++)
        for(int val : graph.get(i))
        rev.get(val).add(i);
       
       //making the visited array false as it was used in topological sort
        for(int i=0;i<n;i++)
        vis[i]=false;
      
      //k is a important variable for edge cases. its for cycle of 2's
      //more later
        int k=0;
    // queue to get the no of node of all strongly connected components(scc)  in a max heap
    //ie. decreasing order
        PriorityQueue<Integer> q=new PriorityQueue<Integer>((a,b)->b-a);
    
    // after all 3 steps, now nodes are traversed in dfs according to topollogical sort
    //stored in stack "s".
        while(!s.isEmpty()){
            int node=s.pop();
            //if a node is not visited means a new component and so we find its length
            // and mark all nodes traversed visited "true" to save on repetition.
            if(!vis[node]){
                //finding the length of component and storing in a temporary variable "temp"
                int temp=dfs(node,vis,rev);
                // now their are 3 cases for our answer
                //1. their are no cycles and graph is linear so length of all components will be 1
                // or their are cycles,cycles are of 2 nodes or more.

                //2.  components with cycles of 2 can also have the longest branch of  both the nodes
                // added to the final length, below segment does that only and more.
                // lengths all the components with cycles of 2  can be added 
                //for a biffer answer,thus variable k(why? see solotion description),
                // which adds all the final lengths of components with cycle of 2 
                if(temp==2){
                    //start with length to 0
                    temp=0;
                    //partneer refer to 2nd component of cycle other than node
                    int partner=-1;
                    //finding partner,which is that child of the node whose child is node itself
                    //making a 2 length cycle ie.
                    //  node-->child
                    //     <---

                    for(int child : rev.get(node)){
                        for(int child2 : rev.get(child))
                        if(node==child2){
                        partner=child;
                        break;}
                        if(partner!=-1)
                        break;
                    }
                    //making another visited array to count length of longest branch
                    //including node, other than partner branch and visa versa
                    // and adding to temp 
                    boolean[] dfsvis=new boolean[n];
                  temp+=lengthdfs(node,partner,dfsvis,rev);
                  temp+=lengthdfs(partner,node,dfsvis,rev);
                  //like discussed above add full length of component with cycle of 2 to k
                  k+=temp;
                }
                //3. component has cycle but is greater than 2,length of cycle will be thier final
                //length and no branch length will be added
                //adding the final length of component
                q.offer(temp);
            }
        }
        // largest component
        int size=q.poll();
        // if k is larger than size that means all combined length of cycles of 2 which is a valid answer
        // is the answer otherwise it is the highest length of cycle
        return size>k?size:k;      
    }
    
    // dfs to find highest branch of node other than its cycle partner's
    public int lengthdfs(int node,int partner,boolean[] dfsvis,ArrayList<ArrayList<Integer>> graph){
            dfsvis[node]=true;
            int count=0;
            for(int child : graph.get(node))
                if(child!=partner && dfsvis[child]==false)
                count=Math.max(count,lengthdfs(child,node,dfsvis,graph));
            
            dfsvis[node]=false;
            return count+1;
    }
   //topological sort of graph
    public void topo(int node,boolean[] vis,ArrayList<ArrayList<Integer>> graph,Stack<Integer> s){
        vis[node]=true;    
        for(int child : graph.get(node))
            if(!vis[child])
                topo(child,vis,graph,s);
        
        s.push(node);
    }
   // dfs to find the length of cycle of the component
   //this only works if graph(rev) is reversed as components are visible easily
     public int dfs(int node,boolean[] vis,ArrayList<ArrayList<Integer>> graph){
         vis[node]=true;
         int count=1;
         for(int child : graph.get(node))
             if(!vis[child] )
               count+=dfs(child,vis,graph);

         return count;
     }
}



or


class Solution {
    public int maximumInvitations(int[] favorite) {
        int n = favorite.length;
        int ans = 0;

        //construct graph such that favorite[i] -> i
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        for(int i = 0; i < n; i++) {
            graph.get(favorite[i]).add(i);
        }

        //debug
        // System.out.println(graph);
        int twoCycles = 0; // all two cycles and their acyclic cycles connected to their members can be connected

        boolean visited[] = new boolean[n];
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                int cycle = dfs(i, visited, graph, new HashSet<>());
                //debug
                // System.out.println("starting from = " + i + " " + "cycle = "+cycle);
                if(cycle > 2) {
                    ans = Math.max(ans, cycle);
                }else if(cycle == 2) {
                    //special case where each of two members are beside each other so acyclic cycle can exist starting from both of the members
                    int mem1 = i;
                    int mem2 = favorite[i];
                    twoCycles += acyclic(mem1, graph, mem2) + acyclic(mem2, graph, mem1);
                }
            }
        }
        ans = Math.max(ans, twoCycles);
        return ans;
    }

    private int acyclic(int cur, List<List<Integer>> graph, int mem2) {
        int ret = 1;
        for(int neigh: graph.get(cur)) {
            if(neigh == mem2) continue;
            ret = Math.max(ret, 1 + acyclic(neigh, graph, mem2));
        }
        return ret;
    }

    private int dfs(int cur, boolean visited[], List<List<Integer>> graph, Set<Integer> curCycle) {
        visited[cur] = true;
        curCycle.add(cur);
        boolean isCycle = false;
        int ret = 1;
        for(int neigh: graph.get(cur)) {
            if(!visited[neigh]) {
                int get = dfs(neigh, visited, graph, curCycle);
                if(get > 0) {
                    isCycle = true;
                    ret = Math.max(ret, 1 + get);
                }
            }else {
                if(curCycle.contains(neigh)) {
                    isCycle = true;
                    return 1;
                }
                else ret = Math.max(ret, 0);
            }
        }
        return isCycle ? ret : 0;
    }
}

or


class Solution {
    public int BFS(int start, Map<Integer, List<Integer>> adj, boolean[] visited) {
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{start, 0});
        int maxDistance = 0;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currNode = current[0];
            int dist = current[1];

            for (int neighbor : adj.getOrDefault(currNode, new ArrayList<>())) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(new int[]{neighbor, dist + 1});
                    maxDistance = Math.max(maxDistance, dist + 1);
                }
            }
        }

        return maxDistance;
    }

    public int maximumInvitations(int[] favorite) {
        int n = favorite.length;
        Map<Integer, List<Integer>> adj = new HashMap<>();

        // Build reversed graph
        for (int i = 0; i < n; i++) {
            int u = i;
            int v = favorite[i];
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        int longestCycleEmplCount = 0;
        int happyCoupleEmplCount = 0;

        boolean[] visited = new boolean[n];

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                Map<Integer, Integer> mp = new HashMap<>();
                int currNode = i;
                int currNodeCount = 0;

                while (!visited[currNode]) {
                    visited[currNode] = true;
                    mp.put(currNode, currNodeCount);

                    int nextNode = favorite[currNode];
                    currNodeCount++;

                    if (mp.containsKey(nextNode)) {
                        int cycleLength = currNodeCount - mp.get(nextNode);
                        longestCycleEmplCount = Math.max(longestCycleEmplCount, cycleLength);

                        if (cycleLength == 2) {
                            boolean[] visitedNodes = new boolean[n];
                            visitedNodes[currNode] = true;
                            visitedNodes[nextNode] = true;
                            happyCoupleEmplCount += 2 + BFS(currNode, adj, visitedNodes) + BFS(nextNode, adj, visitedNodes);
                        }
                        break;
                    }
                    currNode = nextNode;
                }
            }
        }

        return Math.max(happyCoupleEmplCount, longestCycleEmplCount);
    }
}

