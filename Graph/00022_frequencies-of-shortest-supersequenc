https://leetcode.com/problems/frequencies-of-shortest-supersequences/description/


3435. Frequencies of Shortest Supersequences
Hard
Topics
Companies
Hint
You are given an array of strings words. Find all shortest common supersequences (SCS) of words that are not permutations of each other.

A shortest common supersequence is a string of minimum length that contains each string in words as a subsequence.

Return a 2D array of integers freqs that represent all the SCSs. Each freqs[i] is an array of size 26, representing the frequency of each letter in the lowercase English alphabet for a single SCS. You may return the frequency arrays in any order.

 

Example 1:

Input: words = ["ab","ba"]

Output: [[1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

Explanation:

The two SCSs are "aba" and "bab". The output is the letter frequencies for each one.

Example 2:

Input: words = ["aa","ac"]

Output: [[2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

Explanation:

The two SCSs are "aac" and "aca". Since they are permutations of each other, keep only "aac".

Example 3:

Input: words = ["aa","bb","cc"]

Output: [[2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]]

Explanation:

"aabbcc" and all its permutations are SCSs.

 

Constraints:

1 <= words.length <= 256
words[i].length == 2
All strings in words will altogether be composed of no more than 16 unique lowercase letters.
All strings in words are unique.


# java


enum State { INIT, VISITING, VISITED }

class Solution {
  public List<List<Integer>> supersequences(String[] words) {
    List<List<Integer>> ans = new ArrayList<>();
    List<int[]> edges = getEdges(words);
    List<Integer> nodes = getNodes(edges);
    int[] letterToIndex = getLetterToIndex(nodes);
    List<Integer>[] graph = new List[nodes.size()];

    for (int i = 0; i < nodes.size(); i++)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[letterToIndex[u]].add(letterToIndex[v]);
    }

    for (List<Integer> doubledSubset : getMinimumSubsets(graph)) {
      int[] freq = new int[26];
      for (final int letter : nodes)
        freq[letter] = 1;
      for (final int index : doubledSubset)
        freq[nodes.get(index)] = 2;
      ans.add(Arrays.stream(freq).boxed().collect(Collectors.toList()));
    }

    return ans;
  }

  // Returns a list of the minimum subsets of nodes that do not create a cycle
  // when skipped.
  private List<List<Integer>> getMinimumSubsets(List<Integer>[] graph) {
    final int n = graph.length;
    List<List<Integer>> res = new ArrayList<>();

    for (int subsetSize = 0; subsetSize <= n; ++subsetSize) {
      boolean[] combination = new boolean[n];
      Arrays.fill(combination, n - subsetSize, n, true);
      do {
        List<Integer> doubledSubset = new ArrayList<>();
        for (int i = 0; i < n; i++)
          if (combination[i])
            doubledSubset.add(i);
        if (!hasCycleSkipping(graph, new HashSet<>(doubledSubset)))
          res.add(doubledSubset);
      } while (nextPermutation(combination));
      if (!res.isEmpty())
        return res;
    }
    return res;
  }

  // Returns true if there is a cycle in the `graph` when skipping any edges
  // whose both endpoints are in `doubledSubset`.
  private boolean hasCycleSkipping(List<Integer>[] graph, Set<Integer> doubledSubset) {
    State[] states = new State[graph.length];
    for (int i = 0; i < graph.length; ++i)
      if (hasCycle(graph, i, states, doubledSubset))
        return true;
    return false;
  }

  private boolean hasCycle(List<Integer>[] graph, int u, State[] states,
                           Set<Integer> doubledSubset) {
    if (states[u] == State.VISITING)
      return true;
    if (states[u] == State.VISITED)
      return false;
    states[u] = State.VISITING;
    if (!doubledSubset.contains(u))
      for (final int v : graph[u])
        if (!doubledSubset.contains(v) && hasCycle(graph, v, states, doubledSubset))
          return true;
    states[u] = State.VISITED;
    return false;
  }

  private List<int[]> getEdges(String[] words) {
    List<int[]> edges = new ArrayList<>();
    for (final String word : words)
      edges.add(new int[] {word.charAt(0) - 'a', word.charAt(1) - 'a'});
    return edges;
  }

  private List<Integer> getNodes(List<int[]> edges) {
    TreeSet<Integer> nodes = new TreeSet<>();
    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      nodes.add(u);
      nodes.add(v);
    }
    return new ArrayList<>(nodes);
  }

  private int[] getLetterToIndex(List<Integer> nodes) {
    int[] letterToIndex = new int[26];
    for (int i = 0; i < nodes.size(); ++i)
      letterToIndex[nodes.get(i)] = i;
    return letterToIndex;
  }

  private boolean nextPermutation(boolean[] arr) {
    final int n = arr.length;

    // From back to front, find the first false followed by true
    int i;
    for (i = n - 2; i >= 0; --i)
      if (!arr[i] && arr[i + 1])
        break;

    // If no such pair found, we've reached the last permutation
    if (i < 0)
      return false;

    // From back to front, find the first true to swap with arr[i].
    for (int j = n - 1; j > i; --j)
      if (arr[j] && !arr[i]) {
        swap(arr, i, j);
        break;
      }

    // Reverse arr[i + 1..n - 1].
    reverse(arr, i + 1, n - 1);
    return true;
  }

  private void reverse(boolean[] arr, int l, int r) {
    while (l < r)
      swap(arr, l++, r--);
  }

  private void swap(boolean[] arr, int i, int j) {
    boolean temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
  }
}



or


class Solution {
    // Credit : https://youtu.be/cQwZPDBN2To?feature=shared
    public static ArrayList<Integer>gr[];
    public List<List<Integer>> supersequences(String[] words) {
        HashMap<Character,Integer>hs=new HashMap<>();
        int id=0;
        for(String x:words){
            if(!hs.containsKey(x.charAt(0))){
                hs.put(x.charAt(0),id);
                id++;
            }
            if(!hs.containsKey(x.charAt(1))){
                hs.put(x.charAt(1),id);
                id++;
            }
        }
        int n=hs.size();
        char chars[]=new char[n];
        for(var x:hs.entrySet()){
            chars[x.getValue()]=x.getKey();
        }
        gr=new ArrayList[n];
        for(int i=0;i<n;i++){
            gr[i]=new ArrayList<>();
        }
        for(String x:words){
            int u=hs.get(x.charAt(0)),v=hs.get(x.charAt(1));
            gr[u].add(v);
        }
        List<List<Integer>>ans=new ArrayList<>();
        if(!cycle(n,0)){
            List <Integer>all=new ArrayList<>();
            for(int i=0;i<26;i++){
                all.add(0);
            }
            for(int i=0;i<n;i++){
                all.set((chars[i]-'a'),1);
            }
            ans.add(all);
            return ans;
        }
        int len=Integer.MAX_VALUE;
        for(int i=1;i<(1<<n);i++){
            int tl=0,tmp=i;
            while(tmp>0){
                tl+=(tmp&1);
                tmp=tmp>>1;
            }
            if(tl>len)continue;
            if(!cycle(n,i)){
                if(tl<len){
                    len=tl;
                    ans=new ArrayList<>();
                }
                int fr[]=new int[26];
                for(int p=0;p<n;p++){
                    int index=chars[p]-'a';
                    if((i&(1<<p))!=0){
                        fr[index]=2;
                    }else{
                        fr[index]=1;
                    }
                }
                List<Integer>all=new ArrayList<>();
                for(int p=0;p<26;p++){
                    all.add(fr[p]);
                }
                ans.add(all);
            }
        }
        return ans;

    }
    public static boolean vis[];
    public static boolean cycle(int n,int mask){
        for(int i=0;i<n;i++){
            if((mask&(1<<i))!=0){
                continue;
            }
            vis=new boolean[n];
            if(helper(i,mask)){
                return true;
            }
        }
        return false;
    }
    public static boolean helper(int curr, int mask){
        vis[curr]=true;
        for(int i=0;i<gr[curr].size();i++){
            int v=gr[curr].get(i);
            if((mask&(1<<v))!=0){
                continue;
            }
            if(vis[v]){
                return true;
            }
            if(helper(v,mask)){
                return true;
            }
        }
        vis[curr]=false;
        return false;
    }
}


