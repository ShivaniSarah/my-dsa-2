https://leetcode.com/problems/contain-virus/description/

749. Contain Virus
Hard
Topics
Companies
Hint
A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as an m x n binary grid isInfected, where isInfected[i][j] == 0 represents uninfected cells, and isInfected[i][j] == 1 represents cells contaminated with the virus. A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. Resources are limited. Each day, you can install walls around only one region (i.e., the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night). There will never be a tie.

Return the number of walls used to quarantine all the infected regions. If the world will become fully infected, return the number of walls used.

 

Example 1:


Input: isInfected = [[0,1,0,0,0,0,0,1],[0,1,0,0,0,0,0,1],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0]]
Output: 10
Explanation: There are 2 contaminated regions.
On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:

On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.

Example 2:


Input: isInfected = [[1,1,1],[1,0,1],[1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.
Notice that walls are only built on the shared boundary of two different cells.
Example 3:

Input: isInfected = [[1,1,1,0,0,0,0,0,0],[1,0,1,0,1,1,1,1,1],[1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.
 

Constraints:

m == isInfected.length
n == isInfected[i].length
1 <= m, n <= 50
isInfected[i][j] is either 0 or 1.
There is always a contiguous viral region throughout the described process that will infect strictly more uncontaminated squares in the next round.



# java

class Solution {
    private static final int[] DIRS = {-1, 0, 1, 0, -1};
    private List<Integer> c = new ArrayList<>();
    private List<List<Integer>> areas = new ArrayList<>();
    private List<Set<Integer>> boundaries = new ArrayList<>();
    private int[][] infected;
    private boolean[][] vis;
    private int m;
    private int n;

    public int containVirus(int[][] isInfected) {
        infected = isInfected;
        m = infected.length;
        n = infected[0].length;
        vis = new boolean[m][n];
        int ans = 0;
        while (true) {
            for (boolean[] row : vis) {
                Arrays.fill(row, false);
            }
            c.clear();
            areas.clear();
            boundaries.clear();
            for (int i = 0; i < m; ++i) {
                for (int j = 0; j < n; ++j) {
                    if (infected[i][j] == 1 && !vis[i][j]) {
                        c.add(0);
                        areas.add(new ArrayList<>());
                        boundaries.add(new HashSet<>());
                        dfs(i, j);
                    }
                }
            }
            if (areas.isEmpty()) {
                break;
            }
            int idx = max(boundaries);
            ans += c.get(idx);
            for (int t = 0; t < areas.size(); ++t) {
                if (t == idx) {
                    for (int v : areas.get(t)) {
                        int i = v / n, j = v % n;
                        infected[i][j] = -1;
                    }
                } else {
                    for (int v : areas.get(t)) {
                        int i = v / n, j = v % n;
                        for (int k = 0; k < 4; ++k) {
                            int x = i + DIRS[k], y = j + DIRS[k + 1];
                            if (x >= 0 && x < m && y >= 0 && y < n && infected[x][y] == 0) {
                                infected[x][y] = 1;
                            }
                        }
                    }
                }
            }
        }
        return ans;
    }

    private int max(List<Set<Integer>> boundaries) {
        int idx = 0;
        int mx = boundaries.get(0).size();
        for (int i = 1; i < boundaries.size(); ++i) {
            int t = boundaries.get(i).size();
            if (mx < t) {
                mx = t;
                idx = i;
            }
        }
        return idx;
    }

    private void dfs(int i, int j) {
        vis[i][j] = true;
        int idx = areas.size() - 1;
        areas.get(idx).add(i * n + j);
        for (int k = 0; k < 4; ++k) {
            int x = i + DIRS[k], y = j + DIRS[k + 1];
            if (x >= 0 && x < m && y >= 0 && y < n) {
                if (infected[x][y] == 1 && !vis[x][y]) {
                    dfs(x, y);
                } else if (infected[x][y] == 0) {
                    c.set(idx, c.get(idx) + 1);
                    boundaries.get(idx).add(x * n + y);
                }
            }
        }
    }
}


or


class Region {
  // Given m = the number of rows and n = the number of columns, (x, y) will be
  // hashed as x * n + y.
  public Set<Integer> infected = new HashSet<>();
  public Set<Integer> noninfected = new HashSet<>();
  public int wallsRequired = 0;
}

class Solution {
  public int containVirus(int[][] isInfected) {
    final int m = isInfected.length;
    final int n = isInfected[0].length;
    int ans = 0;

    while (true) {
      List<Region> regions = new ArrayList<>();
      boolean[][] seen = new boolean[m][n];

      for (int i = 0; i < m; ++i)
        for (int j = 0; j < n; ++j)
          if (isInfected[i][j] == 1 && !seen[i][j]) {
            Region region = new Region();
            // Use DFS to find all the regions (1s).
            dfs(isInfected, i, j, region, seen);
            if (!region.noninfected.isEmpty())
              regions.add(region);
          }

      if (regions.isEmpty())
        break; // No region causes further infection.

      // Regions that infect the most neighbors will be sorted to the back of
      // the array.
      Collections.sort(regions, (a, b) -> a.noninfected.size() - b.noninfected.size());

      // Build walls around the region that infects the most neighbors.
      Region mostInfectedRegion = regions.get(regions.size() - 1);
      regions.remove(regions.size() - 1);
      ans += mostInfectedRegion.wallsRequired;

      for (final int neighbor : mostInfectedRegion.infected) {
        final int i = neighbor / n;
        final int j = neighbor % n;
        // The isInfected is now contained and won't be infected anymore.
        isInfected[i][j] = 2;
      }

      // For remaining regions, infect their neighbors.
      for (final Region region : regions)
        for (final int neighbor : region.noninfected) {
          final int i = neighbor / n;
          final int j = neighbor % n;
          isInfected[i][j] = 1;
        }
    }

    return ans;
  }

  private void dfs(int[][] isInfected, int i, int j, Region region, boolean[][] seen) {
    if (i < 0 || i == isInfected.length || j < 0 || j == isInfected[0].length)
      return;
    if (seen[i][j] || isInfected[i][j] == 2)
      return;
    if (isInfected[i][j] == 0) {
      region.noninfected.add(i * isInfected[0].length + j);
      ++region.wallsRequired;
      return;
    }

    // isInfected[i][j] == 1
    seen[i][j] = true;
    region.infected.add(i * isInfected[0].length + j);

    dfs(isInfected, i + 1, j, region, seen);
    dfs(isInfected, i - 1, j, region, seen);
    dfs(isInfected, i, j + 1, region, seen);
    dfs(isInfected, i, j - 1, region, seen);
  }
}


or



class Pair {
    
    int row;
    
    int column;
    
    Pair(int row , int column){
        
        this.row = row;
        
        this.column = column;
    }
}

class Region_Data {
    
    int walls_required_count;
    
    int uninfected_cells_count;
    
    List<Pair> infected_cells_list;
    
    Region_Data(){
        
        walls_required_count = 0;
        
        uninfected_cells_count = 0;
        
        infected_cells_list = new ArrayList<>();
    }
}

class Solution {
    
    int[][] four_directions_array = new int[][] {{-1 , 0} , {1 , 0} , {0 , -1} , {0 , 1}};
    
    public boolean is_within_bounds(int current_i , int current_j , int R , int C){
        
        return ((current_i >= 0) && (current_i < R) && (current_j >= 0) && (current_j < C));
    }
    
    public void depth_first_search(int current_i , int current_j , int R , int C , int[][] matrix , boolean[][] visited_matrix , boolean[][] uninfected_cells_visited_matrix , Region_Data region_data_object){
        
        visited_matrix[current_i][current_j] = true;
        
        region_data_object.infected_cells_list.add((new Pair(current_i , current_j)));
        
        for(int[] coordinates_array : four_directions_array){
            
            int next_i = (current_i + coordinates_array[0]);
            
            int next_j = (current_j + coordinates_array[1]);
            
            if((is_within_bounds(next_i , next_j , R , C)) && (matrix[next_i][next_j] != -999) && (!visited_matrix[next_i][next_j])){
                
                if(matrix[next_i][next_j] == 1){
                    depth_first_search(next_i , next_j , R , C , matrix , visited_matrix , uninfected_cells_visited_matrix , region_data_object);
                }else if(matrix[next_i][next_j] == 0){
                    
                    region_data_object.walls_required_count++;
                    
                    if(!uninfected_cells_visited_matrix[next_i][next_j]){
                        uninfected_cells_visited_matrix[next_i][next_j] = true;
                        region_data_object.uninfected_cells_count++;
                    }
                }
            }
        }
    }
    
    public int containVirus(int[][] matrix){
        
        int total_walls_required_count = 0;
        
        int R = matrix.length;
        
        int C = matrix[0].length;
        
        while(true){
            
            PriorityQueue<Region_Data> max_heap = new PriorityQueue<>((a , b) -> (b.uninfected_cells_count - a.uninfected_cells_count));
            
            boolean[][] visited_matrix = new boolean[R][C];
            
            for(int i = 0 ; (i < R) ; i++){
                
                for(int j = 0 ; (j < C) ; j++){
                    
                    if((!visited_matrix[i][j]) && (matrix[i][j] == 1)){
                        
                        Region_Data region_data_object = new Region_Data();
                        
                        depth_first_search(i , j , R , C , matrix , visited_matrix , (new boolean[R][C]) , region_data_object);
                        
                        if(region_data_object.uninfected_cells_count > 0){
                            max_heap.add(region_data_object);
                        }
                    }
                }
            }
            
            if(max_heap.isEmpty()){
                break;
            }
            
            Region_Data region_data_object_with_maximum_uninfected_cells = max_heap.poll();
            
            total_walls_required_count += region_data_object_with_maximum_uninfected_cells.walls_required_count;
            
            for(Pair pair_object : region_data_object_with_maximum_uninfected_cells.infected_cells_list){
                matrix[pair_object.row][pair_object.column] = -999;
            }
            
            while(!max_heap.isEmpty()){
                
                for(Pair pair_object : max_heap.poll().infected_cells_list){
                    
                    int current_i = pair_object.row;
                    
                    int current_j = pair_object.column;
                    
                    for(int[] coordinates_array : four_directions_array){
                        
                        int next_i = (current_i + coordinates_array[0]);
                        
                        int next_j = (current_j + coordinates_array[1]);
                        
                        if((is_within_bounds(next_i , next_j , R , C)) && (matrix[next_i][next_j] == 0)){
                            matrix[next_i][next_j] = 1;
                        }
                    }
                }
            }
        }
        
        return total_walls_required_count;
    }
}


or



class Pair {
    
    int row;
    
    int column;
    
    Pair(int row , int column){
        
        this.row = row;
        
        this.column = column;
    }
}

class Region_Data {
    
    int walls_required_count;
    
    int uninfected_cells_count;
    
    List<Pair> infected_cells_list;
    
    Region_Data(){
        
        walls_required_count = 0;
        
        uninfected_cells_count = 0;
        
        infected_cells_list = new ArrayList<>();
    }
}

class Solution {
    
    int[][] four_directions_array = new int[][] {{-1 , 0} , {1 , 0} , {0 , -1} , {0 , 1}};
    
    public boolean is_within_bounds(int current_i , int current_j , int R , int C){
        
        return ((current_i >= 0) && (current_i < R) && (current_j >= 0) && (current_j < C));
    }
    
    public void depth_first_search(int current_i , int current_j , int R , int C , int[][] matrix , boolean[][] visited_matrix , boolean[][] uninfected_cells_visited_matrix , Region_Data region_data_object){
        
        visited_matrix[current_i][current_j] = true;
        
        region_data_object.infected_cells_list.add((new Pair(current_i , current_j)));
        
        for(int[] coordinates_array : four_directions_array){
            
            int next_i = (current_i + coordinates_array[0]);
            
            int next_j = (current_j + coordinates_array[1]);
            
            if((is_within_bounds(next_i , next_j , R , C)) && (matrix[next_i][next_j] != -999) && (!visited_matrix[next_i][next_j])){
                
                if(matrix[next_i][next_j] == 1){
                    depth_first_search(next_i , next_j , R , C , matrix , visited_matrix , uninfected_cells_visited_matrix , region_data_object);
                }else if(matrix[next_i][next_j] == 0){
                    
                    region_data_object.walls_required_count++;
                    
                    if(!uninfected_cells_visited_matrix[next_i][next_j]){
                        uninfected_cells_visited_matrix[next_i][next_j] = true;
                        region_data_object.uninfected_cells_count++;
                    }
                }
            }
        }
    }
    
    public int containVirus(int[][] matrix){
        
        int total_walls_required_count = 0;
        
        int R = matrix.length;
        
        int C = matrix[0].length;
        
        while(true){
            
            PriorityQueue<Region_Data> max_heap = new PriorityQueue<>((a , b) -> (b.uninfected_cells_count - a.uninfected_cells_count));
            
            boolean[][] visited_matrix = new boolean[R][C];
            
            for(int i = 0 ; (i < R) ; i++){
                
                for(int j = 0 ; (j < C) ; j++){
                    
                    if((!visited_matrix[i][j]) && (matrix[i][j] == 1)){
                        
                        Region_Data region_data_object = new Region_Data();
                        
                        depth_first_search(i , j , R , C , matrix , visited_matrix , (new boolean[R][C]) , region_data_object);
                        
                        if(region_data_object.uninfected_cells_count > 0){
                            max_heap.add(region_data_object);
                        }
                    }
                }
            }
            
            if(max_heap.isEmpty()){
                break;
            }
            
            Region_Data region_data_object_with_maximum_uninfected_cells = max_heap.poll();
            
            total_walls_required_count += region_data_object_with_maximum_uninfected_cells.walls_required_count;
            
            for(Pair pair_object : region_data_object_with_maximum_uninfected_cells.infected_cells_list){
                matrix[pair_object.row][pair_object.column] = -999;
            }
            
            while(!max_heap.isEmpty()){
                
                for(Pair pair_object : max_heap.poll().infected_cells_list){
                    
                    int current_i = pair_object.row;
                    
                    int current_j = pair_object.column;
                    
                    for(int[] coordinates_array : four_directions_array){
                        
                        int next_i = (current_i + coordinates_array[0]);
                        
                        int next_j = (current_j + coordinates_array[1]);
                        
                        if((is_within_bounds(next_i , next_j , R , C)) && (matrix[next_i][next_j] == 0)){
                            matrix[next_i][next_j] = 1;
                        }
                    }
                }
            }
        }
        
        return total_walls_required_count;
    }
}


