https://leetcode.com/problems/pizza-with-3n-slices/description/

There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:

You will pick any pizza slice.
Your friend Alice will pick the next slice in the anti-clockwise direction of your pick.
Your friend Bob will pick the next slice in the clockwise direction of your pick.
Repeat until there are no more slices of pizzas.
Given an integer array slices that represent the sizes of the pizza slices in a clockwise direction, return the maximum possible sum of slice sizes that you can pick.

 

Example 1:


Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.
Example 2:


Input: slices = [8,9,8,6,1,1]
Output: 16
Explanation: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.
 

Constraints:

3 * n == slices.length
1 <= slices.length <= 500
1 <= slices[i] <= 1000


# java

class Solution {
    private int n;

    public int maxSizeSlices(int[] slices) {
        n = slices.length / 3;
        int[] nums = new int[slices.length - 1];
        System.arraycopy(slices, 1, nums, 0, nums.length);
        int a = g(nums);
        System.arraycopy(slices, 0, nums, 0, nums.length);
        int b = g(nums);
        return Math.max(a, b);
    }

    private int g(int[] nums) {
        int m = nums.length;
        int[][] f = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                f[i][j] = Math.max(f[i - 1][j], (i >= 2 ? f[i - 2][j - 1] : 0) + nums[i - 1]);
            }
        }
        return f[m][n];
    }
}


or


import java.util.*;

public class Solution {
    
    private int mem(int i, int n, int k, List<Integer> s, int[][] dp) {
        if (i > n || k == 0) return 0;
        if (dp[i][k] != -1) return dp[i][k];
        int take = s.get(i) + mem(i + 2, n, k - 1, s, dp);
        int skip = mem(i + 1, n, k, s, dp);
        return dp[i][k] = Math.max(take, skip);
    }

    public int maxSizeSlices(int[] slices) {
        int n = slices.length;
        int[][] dp1 = new int[n + 1][n / 3 + 1];
        int[][] dp2 = new int[n + 1][n / 3 + 1];
        for (int[] row : dp1) Arrays.fill(row, -1);
        for (int[] row : dp2) Arrays.fill(row, -1);

        List<Integer> sl = new ArrayList<>();
        for (int slice : slices) sl.add(slice);

        int ans1 = mem(0, n - 2, n / 3, sl, dp1); // excluding last
        int ans2 = mem(1, n - 1, n / 3, sl, dp2); // excluding first
        return Math.max(ans1, ans2);
    }
}

or

// priority queue 

import java.util.*;

class Node {
    int index;
    int val;
    Node left;
    Node right;
    boolean deleted;

    Node(int val) {
        this.val = val;
        this.deleted = false;
    }
}

class Compare implements Comparator<Node> {
    public int compare(Node a, Node b) {
        if (a.val == b.val) {
            int opportunityCostA = a.left.val + a.right.val;
            int opportunityCostB = b.left.val + b.right.val;
            return Integer.compare(opportunityCostA, opportunityCostB);
        }
        return Integer.compare(b.val, a.val); // Max-Heap
    }
}

public class Solution {
    public int maxSizeSlices(int[] slices) {
        int m = slices.length;
        int n = m / 3;

        List<Node> myNodes = new ArrayList<>();
        for (int i = 0; i < m; i++) myNodes.add(new Node(slices[i]));

        for (int i = 0; i < m; i++) {
            int left = (i >= 1) ? i - 1 : m - 1;
            int right = (i <= m - 2) ? i + 1 : 0;
            Node current = myNodes.get(i);
            current.index = i;
            current.left = myNodes.get(left);
            current.right = myNodes.get(right);
        }

        PriorityQueue<Node> heap = new PriorityQueue<>(new Compare());
        heap.addAll(myNodes);

        int count = 0;
        int output = 0;

        while (count < n && !heap.isEmpty()) {
            Node top = heap.poll();
            if (!top.deleted) {
                count++;
                output += top.val;

                // Mark neighbors as deleted
                top.left.deleted = true;
                top.right.deleted = true;

                // Re-link neighbors
                top.left.left.right = top;
                top.right.right.left = top;

                // Update top node value and pointers
                top.val = top.left.val + top.right.val - top.val;
                top.left = top.left.left;
                top.right = top.right.right;

                heap.offer(top);
            }
        }

        return output;
    }
}
