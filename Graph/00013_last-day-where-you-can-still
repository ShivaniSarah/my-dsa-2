https://leetcode.com/problems/last-day-where-you-can-still-cross/description/


1970. Last Day Where You Can Still Cross
Hard
Topics
Companies
Hint
There is a 1-based binary matrix where 0 represents land and 1 represents water. You are given integers row and col representing the number of rows and columns in the matrix, respectively.

Initially on day 0, the entire matrix is land. However, each day a new cell becomes flooded with water. You are given a 1-based 2D array cells, where cells[i] = [ri, ci] represents that on the ith day, the cell on the rith row and cith column (1-based coordinates) will be covered with water (i.e., changed to 1).

You want to find the last day that it is possible to walk from the top to the bottom by only walking on land cells. You can start from any cell in the top row and end at any cell in the bottom row. You can only travel in the four cardinal directions (left, right, up, and down).

Return the last day where it is possible to walk from the top to the bottom by only walking on land cells.

 

Example 1:


Input: row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]
Output: 2
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 2.
Example 2:


Input: row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]
Output: 1
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 1.
Example 3:


Input: row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]
Output: 3
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 3.
 

Constraints:

2 <= row, col <= 2 * 104
4 <= row * col <= 2 * 104
cells.length == row * col
1 <= ri <= row
1 <= ci <= col
All the values of cells are unique.



# java


class Solution {
  public int latestDayToCross(int row, int col, int[][] cells) {
    int ans = 0;
    int l = 1;
    int r = cells.length - 1;

    while (l <= r) {
      final int m = (l + r) / 2;
      if (canWalk(m, row, col, cells)) {
        ans = m;
        l = m + 1;
      } else {
        r = m - 1;
      }
    }

    return ans;
  }

  private static final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

  private boolean canWalk(int day, int row, int col, int[][] cells) {
    int[][] matrix = new int[row][col];
    for (int i = 0; i < day; ++i) {
      final int x = cells[i][0] - 1;
      final int y = cells[i][1] - 1;
      matrix[x][y] = 1;
    }

    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>();

    for (int j = 0; j < col; ++j)
      if (matrix[0][j] == 0) {
        q.offer(new Pair<>(0, j));
        matrix[0][j] = 1;
      }

    while (!q.isEmpty()) {
      final int i = q.peek().getKey();
      final int j = q.poll().getValue();
      for (int[] dir : DIRS) {
        final int x = i + dir[0];
        final int y = j + dir[1];
        if (x < 0 || x == row || y < 0 || y == col)
          continue;
        if (matrix[x][y] == 1)
          continue;
        if (x == row - 1)
          return true;
        q.offer(new Pair<>(x, y));
        matrix[x][y] = 1;
      }
    }

    return false;
  }
}


or


class Solution {
    private int[] p;
    private int row;
    private int col;
    private boolean[][] grid;
    private int[][] dirs = new int[][] { {0, -1}, {0, 1}, {1, 0}, {-1, 0} };

    public int latestDayToCross(int row, int col, int[][] cells) {
        int n = row * col;
        this.row = row;
        this.col = col;
        p = new int[n + 2];
        for (int i = 0; i < p.length; ++i) {
            p[i] = i;
        }
        grid = new boolean[row][col];
        int top = n, bottom = n + 1;
        for (int k = cells.length - 1; k >= 0; --k) {
            int i = cells[k][0] - 1, j = cells[k][1] - 1;
            grid[i][j] = true;
            for (int[] e : dirs) {
                if (check(i + e[0], j + e[1])) {
                    p[find(i * col + j)] = find((i + e[0]) * col + j + e[1]);
                }
            }
            if (i == 0) {
                p[find(i * col + j)] = find(top);
            }
            if (i == row - 1) {
                p[find(i * col + j)] = find(bottom);
            }
            if (find(top) == find(bottom)) {
                return k;
            }
        }
        return 0;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

    private boolean check(int i, int j) {
        return i >= 0 && i < row && j >= 0 && j < col && grid[i][j];
    }
}


or

class Solution {
    int row = 0;
    int col = 0;
    int [][]cells;
    public int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int latestDayToCross(int row, int col, int[][] cells) {
        this.cells = cells;
        this.row = row;
        this.col = col;
        
        int left = 1, right = cells.length;
        int mid;
        while(left<right){
            mid = right - (right - left) / 2;
            if(canCross(mid)){
                left = mid;
            }else{
                right = mid-1;
            }
        }
        return left;
    }
    
    public boolean canCross(int day){
        int [][] grid = new int[row][col];
        for(int i = 0;i<day;i++){
            grid[cells[i][0] - 1][cells[i][1] - 1] = 1;
        }
        
        for(int i = 0;i<col;i++){
            if(grid[0][i]==0 && dfs(grid,0,i)){
                return true;
            }
        }
        return false;
    }
    
    public boolean dfs(int [][] grid, int r, int c){
        if(r<0 || r>=row || c<0 || c>=col || grid[r][c]!=0) return false;
        
        if(r == row-1) return true;
        grid[r][c] = -1;
        for(int [] direction: directions){
            int i = r + direction[0];
            int j = c + direction[1];
            if(dfs(grid,i,j)) return true;
        }
        return false;
    }
}


or


// Bs + bfs

class Solution {
    public boolean isPossible(int m, int n, int t, int[][] cells) {
        int[][] grid = new int[m + 1][n + 1]; // Grid representation
        int[][] directions = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}}; // Possible directions

        for (int i = 0; i < t; i++) {
            grid[cells[i][0]][cells[i][1]] = 1; // Mark cells from the given list as blocked
        }

        Queue<int[]> queue = new LinkedList<>();
        
        for (int i = 1; i <= n; i++) {
            if (grid[1][i] == 0) {
                queue.offer(new int[]{1, i}); // Start BFS from the top row
                grid[1][i] = 1; // Mark the cell as visited
            }
        }
        
        while (!queue.isEmpty()) {
            int[] cell = queue.poll();
            int r = cell[0], c = cell[1]; // Current cell coordinates
            
            for (int[] dir : directions) {
                int nr = r + dir[0], nc = c + dir[1]; // Neighbor cell coordinates
                
                if (nr > 0 && nc > 0 && nr <= m && nc <= n && grid[nr][nc] == 0) {
                    grid[nr][nc] = 1; // Mark the neighbor cell as visited
                    
                    if (nr == m) {
                        return true; // Found a path to the bottom row
                    }
                    
                    queue.offer(new int[]{nr, nc}); // Add the neighbor cell to the queue for further exploration
                }
            }
        }
        
        return false; // Unable to find a path to the bottom row
    }

    public int latestDayToCross(int row, int col, int[][] cells) {
        int left = 0, right = row * col, latestPossibleDay = 0;
        
        while (left < right - 1) {
            int mid = left + (right - left) / 2; // Calculate the mid-day
            
            if (isPossible(row, col, mid, cells)) {
                left = mid; // Update the left pointer to search in the upper half
                latestPossibleDay = mid; // Update the latest possible day
            } else {
                right = mid; // Update the right pointer to search in the lower half
            }
        }
        
        return latestPossibleDay;
    }
}

or


// Union find


public class DisjointSet {
    int[] size, par;

    DisjointSet(int n) {
        size = new int[n];
        par = new int[n];
        for(int i=0; i<n; i++) {
            size[i] = 1;
            par[i] = i;
        }
    }

    public int findPar(int x) {
        if(par[x] == x) return x;
        return par[x] = findPar(par[x]);
    }

    public void merge(int x, int y) {
        int px = findPar(x);
        int py = findPar(y);

        if(px == py) return;
        
        if(size[px] < size[py]) {
            par[px] = py;
            size[py] += size[px];
        } else {
            par[py] = px;
            size[px] += size[py];
        }
    }

    public boolean isConnected(int x, int y) {
        return (findPar(x) == findPar(y));
    }
}

class Solution {
    public int latestDayToCross(int row, int col, int[][] cells) {
        int[][] grid = new int[row][col];
        
        // Mark the cells as flooded (1) based on the input cells array
        for(int[] cell: cells) {
            grid[cell[0] - 1][cell[1] - 1] = 1;
        }

        int[] dirs = new int[]{-1, 0, 1, 0, -1}; // Directions array for easy traversal (up, right, down, left)
        int totalCells = row * col; // Total number of cells in the grid
        int rowStart = totalCells, rowEnd = totalCells + 1; // Virtual cells representing the top and bottom rows
        
        // Create a disjoint-set data structure with totalCells + 2 elements (including virtual cells)
        DisjointSet ds = new DisjointSet(totalCells + 2);

        // Iterate over the grid and establish initial connections between adjacent land cells
        for(int i=0; i<row; i++) {
            for(int j=0; j<col; j++) {
                for(int k=0; k<4; k++) {
                    int ni = i + dirs[k];
                    int nj = j + dirs[k+1];

                    if(ni >=0 && ni < row && nj >= 0 && nj < col && grid[ni][nj] == 0) {
                        int nodeVal = i * col + j;
                        int nextVal = ni* col + nj;

                        // Merge the current node and the next node (if they are both land cells)
                        ds.merge(nodeVal, nextVal);
                    }
                }
            }
        }

        // Iterate over the flooded cells in reverse order
        for(int c=totalCells-1; c>=0; c--) {
            int i = cells[c][0] - 1;
            int j = cells[c][1] - 1;
            int currNodeVal = i * col + j;

            grid[i][j] = 0; // Mark the cell as land (unflooded)

            for(int k=0; k<4; k++) {
                int ni = i + dirs[k];
                int nj = j + dirs[k+1];

                if(ni >=0 && ni < row && nj >= 0 && nj < col && grid[ni][nj] == 0) {
                    int nodeVal = i * col + j;
                    int nextVal = ni* col + nj;

                    // Merge the current node and the next node (if they are both land cells)
                    ds.merge(nodeVal, nextVal);
                }
            }

            // Merge the current node with the rowStart virtual node if it is in the top row
            if(i == 0)      
                ds.merge(rowStart, currNodeVal); 
            
            // Merge the current node with the rowEnd virtual node if it is in the bottom row
            if(i == row-1)  
                ds.merge(rowEnd, currNodeVal); 

            // Check if the rowStart virtual node and the rowEnd virtual node are connected,
            // indicating a path from top to bottom exists, then return 'c' (current day)            
            if(ds.isConnected(rowStart, rowEnd))  
                return c; 
        }

        // No path from top to bottom exists, so return '0' (first Day)
        return 0;
    }
}


or


// best


class Solution {
    int lastRow;
    int firstRow;
    
    public int latestDayToCross(int row, int col, int[][] cells) {
        // Flip the grid on the diagonal.
        int temp = row;
        row = col;
        col = temp;
        
        int rW = col + 2;   // Width of a row in parents[] array.
        int rWM1 = rW - 1;
        int rWP1 = rW + 1;
        lastRow = row * rW;
        firstRow = 2 * rW - 1;
        
        int[] parents = new int[(row + 2) * (col + 2)];
        
        for (int cellsIdx = 0; ; cellsIdx++) {
            int cell = cells[cellsIdx][1] * rW + cells[cellsIdx][0];
            parents[cell] = cell;
            if ((parents[cell - rWM1]     != 0 && union(parents, cell, cell - rWM1)) || 
                    (parents[cell - rW]   != 0 && union(parents, cell, cell - rW))   || 
                    (parents[cell - rWP1] != 0 && union(parents, cell, cell - rWP1)) || 
                    (parents[cell - 1]    != 0 && union(parents, cell, cell - 1))    || 
                    (parents[cell + 1]    != 0 && union(parents, cell, cell + 1))    ||
                    (parents[cell + rWM1] != 0 && union(parents, cell, cell + rWM1)) || 
                    (parents[cell + rW]   != 0 && union(parents, cell, cell + rW))   || 
                    (parents[cell + rWP1] != 0 && union(parents, cell, cell + rWP1)))
                return cellsIdx;
        }
    }
    
    
    private boolean union(int[] parents, int newCell, int oldCell) {
        int newPar = findParent(parents, newCell);
        int oldPar = findParent(parents, oldCell);
        if (newPar != oldPar) {
            if (newPar <= firstRow) {
                if (oldPar >= lastRow)  return true;
                parents[oldPar] = newPar;
            } else if (newPar >= lastRow) {
                if (oldPar <= firstRow)  return true;
                parents[oldPar] = newPar;
            } else
                parents[newPar] = oldPar;
        }
        return false;
    }
    
    
    private int findParent(int[] parents, int cell) {
        if (parents[cell] == cell)  return cell;
        return (parents[cell] = findParent(parents, parents[cell]));
    }
}
