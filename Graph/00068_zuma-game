https://leetcode.com/problems/zuma-game/description/


488. Zuma Game
Hard
Topics
Companies
You are playing a variation of the game Zuma.

In this variation of Zuma, there is a single row of colored balls on a board, where each ball can be colored red 'R', yellow 'Y', blue 'B', green 'G', or white 'W'. You also have several colored balls in your hand.

Your goal is to clear all of the balls from the board. On each turn:

Pick any ball from your hand and insert it in between two balls in the row or on either end of the row.
If there is a group of three or more consecutive balls of the same color, remove the group of balls from the board.
If this removal causes more groups of three or more of the same color to form, then continue removing each group until there are none left.
If there are no more balls on the board, then you win the game.
Repeat this process until you either win or do not have any more balls in your hand.
Given a string board, representing the row of balls on the board, and a string hand, representing the balls in your hand, return the minimum number of balls you have to insert to clear all the balls from the board. If you cannot clear all the balls from the board using the balls in your hand, return -1.

 

Example 1:

Input: board = "WRRBBW", hand = "RB"
Output: -1
Explanation: It is impossible to clear all the balls. The best you can do is:
- Insert 'R' so the board becomes WRRRBBW. WRRRBBW -> WBBW.
- Insert 'B' so the board becomes WBBBW. WBBBW -> WW.
There are still balls remaining on the board, and you are out of balls to insert.
Example 2:

Input: board = "WWRRBBWW", hand = "WRBRW"
Output: 2
Explanation: To make the board empty:
- Insert 'R' so the board becomes WWRRRBBWW. WWRRRBBWW -> WWBBWW.
- Insert 'B' so the board becomes WWBBBWW. WWBBBWW -> WWWW -> empty.
2 balls from your hand were needed to clear the board.
Example 3:

Input: board = "G", hand = "GGGGG"
Output: 2
Explanation: To make the board empty:
- Insert 'G' so the board becomes GG.
- Insert 'G' so the board becomes GGG. GGG -> empty.
2 balls from your hand were needed to clear the board.
 

Constraints:

1 <= board.length <= 16
1 <= hand.length <= 5
board and hand consist of the characters 'R', 'Y', 'B', 'G', and 'W'.
The initial row of balls on the board will not have any groups of three or more consecutive balls of the same color.


# java

class Solution {
    public int findMinStep(String board, String hand) {
        final Zuma zuma = Zuma.create(board, hand);
        final HashSet<Long> visited = new HashSet<>();
        final ArrayList<Zuma> init = new ArrayList<>();

        visited.add(zuma.board());
        init.add(zuma);
        return bfs(init, 0, visited);
    }

    private int bfs(ArrayList<Zuma> curr, int k, HashSet<Long> visited) {
        if (curr.isEmpty()) {
            return -1;
        }

        final ArrayList<Zuma> next = new ArrayList<>();

        for (Zuma zuma : curr) {
            ArrayList<Zuma> neib = zuma.getNextLevel(k, visited);
            if (neib == null) {
                return k + 1;
            }

            next.addAll(neib);
        }
        return bfs(next, k + 1, visited);
    }
}

record Zuma(long board, long hand) {
    public static Zuma create(String boardStr, String handStr) {
        return new Zuma(Zuma.encode(boardStr, false), Zuma.encode(handStr, true));
    }

    public ArrayList<Zuma> getNextLevel(int depth, HashSet<Long> visited) {
        final ArrayList<Zuma> next = new ArrayList<>();
        final ArrayList<long[]> handList = this.buildHandList();
        final long[] boardList = new long[32];
        final int size = this.buildBoardList(boardList);

        for (long[] pair : handList) {
            for (int i = 0; i < size; ++i) {
                final long rawBoard = pruningCheck(boardList[i], pair[0], i * 3, depth);
                if (rawBoard == -1) {
                    continue;
                }

                final long nextBoard = updateBoard(rawBoard);
                if (nextBoard == 0) {
                    return null;
                }

                if (pair[1] == 0 || visited.contains(nextBoard)) {
                    continue;
                }

                visited.add(nextBoard);
                next.add(new Zuma(nextBoard, pair[1]));
            }
        }
        return next;
    }

    private long pruningCheck(long insBoard, long ball, int pos, int depth) {
        final long L = (insBoard >> (pos + 3)) & 0x7;
        final long R = (insBoard >> (pos - 3)) & 0x7;

        if (depth == 0 && (ball != R) && (L != R) || depth > 0 && (ball != R)) {
            return -1;
        }
        return insBoard | (ball << pos);
    }

    private long updateBoard(long board) {
        long stack = 0;

        for (int i = 0; i < 64; i += 3) {
            final long curr = (board >> i) & 0x7;
            final long top = (stack) &0x7;

            // pop (if possible)
            if ((top > 0) && (curr != top) && (stack & 0x3F) == ((stack >> 3) & 0x3F)) {
                stack >>= 9;
                if ((stack & 0x7) == top) stack >>= 3;
            }

            if (curr == 0) {
                // done
                break;
            }
            // push and continue
            stack = (stack << 3) | curr;
        }
        return stack;
    }

    private ArrayList<long[]> buildHandList() {
        final ArrayList<long[]> handList = new ArrayList<>();
        long prevBall = 0;
        long ballMask = 0;

        for (int i = 0; i < 16; i += 3) {
            final long currBall = (this.hand >> i) & 0x7;
            if (currBall == 0) {
                break;
            }

            if (currBall != prevBall) {
                prevBall = currBall;
                handList.add(
                    new long[] {currBall, ((this.hand >> 3) & ~ballMask) | (this.hand & ballMask)});
            }
            ballMask = (ballMask << 3) | 0x7;
        }
        return handList;
    }

    private int buildBoardList(long[] buffer) {
        int ptr = 0;
        long ballMask = 0x7;
        long insBoard = this.board << 3;
        buffer[ptr++] = insBoard;

        while (true) {
            final long currBall = this.board & ballMask;
            if (currBall == 0) {
                break;
            }

            ballMask <<= 3;
            insBoard = (insBoard | currBall) & ~ballMask;
            buffer[ptr++] = insBoard;
        }
        return ptr;
    }

    private static long encode(String stateStr, boolean sortFlag) {
        final char[] stateChars = stateStr.toCharArray();
        if (sortFlag) {
            Arrays.sort(stateChars);
        }

        long stateBits = 0;
        for (char ch : stateChars) {
            stateBits = (stateBits << 3) | Zuma.encode(ch);
        }
        return stateBits;
    }

    private static long encode(char ch) {
        return switch (ch) {
            case 'R' -> 0x1;
            case 'G' -> 0x2;
            case 'B' -> 0x3;
            case 'W' -> 0x4;
            case 'Y' -> 0x5;
            case ' ' -> 0x0;
            default  ->
                throw new IllegalArgumentException("Invalid char: " + ch);
        };
    }
}



or


import java.util.Map.Entry;

class Solution {
    private static final int MAX_COUNT = 6;

    public int findMinStep(String board, String hand) {
        Map<Character, Integer> map = new HashMap<>();
        for(char c :hand.toCharArray()) {
            map.put(c, map.getOrDefault(c,0) + 1);
        }
        return findMinStep(board, map, new HashMap<>(), MAX_COUNT);
    }

    private int findMinStep(String board, Map<Character, Integer> freq, Map<String, Integer> cache, int maxDepth) {
        String key = board + "#" + toKey(freq);
        if (cache.containsKey(key)) {
            return cache.get(key);
        }
        if (board.isEmpty()) { 
            cache.put(key, 0);
            return 0;
        }
        if (maxDepth <= 0 || looser(board, freq)) {
            cache.put(key, -1);
            return -1;
        }
        int res = MAX_COUNT;
        StringBuilder sb = new StringBuilder(board);
        for (int i = 0; i < sb.length(); i++) {
            for (char c: freq.keySet()) {
                boolean check = board.charAt(i) == c 
                       || (i > 0 && board.charAt(i) == board.charAt(i - 1));
                if (freq.get(c) > 0 && check) {
                    sb.insert(i, c);
                    freq.put(c, freq.get(c) - 1);
                    
                    String newBoard = updateBoard(sb.toString());
                    
                    int temp = findMinStep(newBoard, freq, cache, res == -1 ? maxDepth - 1 : res - 2);
                    if (temp != -1) {
                        res = Math.min(res, temp + 1);
                    }
                    //backtracking
                    sb.deleteCharAt(i);
                    freq.put(c, freq.get(c) + 1);
                }
            }
        }
        res = res >= MAX_COUNT ? -1 : res;
        cache.put(key, res);
        return res;
    }

    private String updateBoard(String board){
        int i = 0;
        int j = 0;
        //System.out.println(board);
        while (i < board.length()) {
            while (j < board.length() && board.charAt(j) == board.charAt(i)) {
                j++;
            }
            if (j - i >= 3) {
                return updateBoard(board.substring(0, i) + board.substring(j));
            } else {
                i++;
            }
        }
        return board;
    }

    private String toKey(Map<Character, Integer> freq) {
        String key = "";
        for (Entry<Character, Integer> e : freq.entrySet()) {
            if (e.getValue() > 0) {
                key += e.getKey() + "=" + e.getValue();
            }
        }
        return key;
    }

    private boolean looser(String board, Map<Character, Integer> freq) {
        if (!freq.entrySet().stream().anyMatch(e -> e.getValue() > 0)) {
            return true;
        }
        Map<Character, Integer> map = new HashMap<>();
        for (char c : board.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }

        for (Entry<Character, Integer> e : map.entrySet()) {
            if (e.getValue() > 0 && e.getValue() + freq.getOrDefault(e.getKey(), 0) < 3) {
                return true;
            }
        }
        return false;
    }
}
