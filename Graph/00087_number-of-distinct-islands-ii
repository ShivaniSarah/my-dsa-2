https://leetcode.com/problems/number-of-distinct-islands-ii/description/


711. Number of Distinct Islands II
Description
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

An island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).

Return the number of distinct islands.

 

Example 1:



Input: grid = [[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,1],[0,0,0,1,1]]
Output: 1
Explanation: The two islands are considered the same because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.
Example 2:



Input: grid = [[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]
Output: 1
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.



# java



class Solution {
    private int m;
    private int n;
    private int[][] grid;

    public int numDistinctIslands2(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        this.grid = grid;
        Set<List<List<Integer>>> s = new HashSet<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    List<Integer> shape = new ArrayList<>();
                    dfs(i, j, shape);
                    s.add(normalize(shape));
                }
            }
        }
        return s.size();
    }

    private List<List<Integer>> normalize(List<Integer> shape) {
        List<int[]>[] shapes = new List[8];
        for (int i = 0; i < 8; ++i) {
            shapes[i] = new ArrayList<>();
        }
        for (int e : shape) {
            int i = e / n;
            int j = e % n;
            shapes[0].add(new int[] {i, j});
            shapes[1].add(new int[] {i, -j});
            shapes[2].add(new int[] {-i, j});
            shapes[3].add(new int[] {-i, -j});
            shapes[4].add(new int[] {j, i});
            shapes[5].add(new int[] {j, -i});
            shapes[6].add(new int[] {-j, i});
            shapes[7].add(new int[] {-j, -i});
        }
        for (List<int[]> e : shapes) {
            e.sort((a, b) -> {
                int i1 = a[0];
                int j1 = a[1];
                int i2 = b[0];
                int j2 = b[1];
                if (i1 == i2) {
                    return j1 - j2;
                }
                return i1 - i2;
            });
            int a = e.get(0)[0];
            int b = e.get(0)[1];
            for (int k = e.size() - 1; k >= 0; --k) {
                int i = e.get(k)[0];
                int j = e.get(k)[1];
                e.set(k, new int[] {i - a, j - b});
            }
        }
        Arrays.sort(shapes, (a, b) -> {
            for (int k = 0; k < a.size(); ++k) {
                int i1 = a.get(k)[0];
                int j1 = a.get(k)[1];
                int i2 = b.get(k)[0];
                int j2 = b.get(k)[1];
                if (i1 != i2) {
                    return i1 - i2;
                }
                if (j1 != j2) {
                    return j1 - j2;
                }
            }
            return 0;
        });
        List<List<Integer>> ans = new ArrayList<>();
        for (int[] e : shapes[0]) {
            ans.add(Arrays.asList(e[0], e[1]));
        }
        return ans;
    }

    private void dfs(int i, int j, List<Integer> shape) {
        shape.add(i * n + j);
        grid[i][j] = 0;
        int[] dirs = {-1, 0, 1, 0, -1};
        for (int k = 0; k < 4; ++k) {
            int x = i + dirs[k];
            int y = j + dirs[k + 1];
            if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                dfs(x, y, shape);
            }
        }
    }
}



or



class Solution {
  public int numDistinctIslands2(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    // all the islands with different shapes
    Set<List<Pair<Integer, Integer>>> islands = new HashSet<>();
    boolean[][] seen = new boolean[m][n];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        List<Pair<Integer, Integer>> island = new ArrayList<>();
        dfs(grid, i, j, seen, island);
        if (!island.isEmpty())
          islands.add(normalize(island));
      }

    return islands.size();
  }

  private void dfs(int[][] grid, int i, int j, boolean[][] seen,
                   List<Pair<Integer, Integer>> island) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return;
    if (grid[i][j] == 0 || seen[i][j])
      return;

    seen[i][j] = true;
    island.add(new Pair<>(i, j));

    dfs(grid, i + 1, j, seen, island);
    dfs(grid, i - 1, j, seen, island);
    dfs(grid, i, j + 1, seen, island);
    dfs(grid, i, j - 1, seen, island);
  }

  private List<Pair<Integer, Integer>> normalize(List<Pair<Integer, Integer>> island) {
    // points[i] := 8 different rotations/reflections of an island
    Pair<Integer, Integer>[][] points = new Pair[8][island.size()];

    for (int k = 0; k < island.size(); ++k) {
      final int i = island.get(k).getKey();
      final int j = island.get(k).getValue();
      points[0][k] = new Pair<>(i, j);
      points[1][k] = new Pair<>(i, -j);
      points[2][k] = new Pair<>(-i, j);
      points[3][k] = new Pair<>(-i, -j);
      points[4][k] = new Pair<>(j, i);
      points[5][k] = new Pair<>(j, -i);
      points[6][k] = new Pair<>(-j, i);
      points[7][k] = new Pair<>(-j, -i);
    }

    for (Pair<Integer, Integer>[] point : points)
      Arrays.sort(point, Comparator.comparingInt(Pair<Integer, Integer>::getKey)
                             .thenComparingInt(Pair<Integer, Integer>::getValue));

    // Normalize each p by substracting p[1..7] with p[0].
    for (Pair<Integer, Integer>[] p : points) {
      for (int i = 1; i < island.size(); ++i)
        p[i] = new Pair<>(p[i].getKey() - p[0].getKey(), p[i].getValue() - p[0].getValue());
      p[0] = new Pair<>(0, 0);
    }

    Arrays.sort(points, new Comparator<Pair<Integer, Integer>[]>() {
      @Override
      public int compare(Pair<Integer, Integer>[] a, Pair<Integer, Integer>[] b) {
        for (int i = 0; i < a.length; ++i) {
          if (a[i].getKey() != b[i].getKey())
            return a[i].getKey() - b[i].getKey();
          if (a[i].getValue() != b[i].getValue())
            return a[i].getValue() - b[i].getValue();
        }
        return 0;
      }
    });

    return Arrays.asList(points[0]);
  }
}




