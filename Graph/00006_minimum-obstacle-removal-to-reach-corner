https://leetcode.com/problems/minimum-obstacle-removal-to-reach-corner/description/

You are given a 0-indexed 2D integer array grid of size m x n. Each cell has one of two values:

0 represents an empty cell,
1 represents an obstacle that may be removed.
You can move up, down, left, or right from and to an empty cell.

Return the minimum number of obstacles to remove so you can move from the upper left corner (0, 0) to the lower right corner (m - 1, n - 1).

 

Example 1:


Input: grid = [[0,1,1],[1,1,0],[1,1,0]]
Output: 2
Explanation: We can remove the obstacles at (0, 1) and (0, 2) to create a path from (0, 0) to (2, 2).
It can be shown that we need to remove at least 2 obstacles, so we return 2.
Note that there may be other ways to remove 2 obstacles to create a path.
Example 2:


Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]]
Output: 0
Explanation: We can move from (0, 0) to (2, 4) without removing any obstacles, so we return 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
2 <= m * n <= 105
grid[i][j] is either 0 or 1.
grid[0][0] == grid[m - 1][n - 1] == 0




# java


class Solution {
    public int minimumObstacles(int[][] grid) {
        // Get the dimensions of the grid
        int rows = grid.length, cols = grid[0].length;

        // Create a deque to hold the positions and the current obstacle count
        Deque<int[]> queue = new ArrayDeque<>();
        // Start from the upper left corner (0,0) with 0 obstacles
        queue.offer(new int[] {0, 0, 0});
        // Array to iterate over the 4 possible directions (up, right, down, left)
        int[] directions = {-1, 0, 1, 0, -1};
        // Visited array to keep track of positions already visited
        boolean[][] visited = new boolean[rows][cols];

        // Process cells until the queue is empty
        while (!queue.isEmpty()) {
            // Poll the current position and the number of obstacles encountered so far
            int[] position = queue.poll();
            int currentRow = position[0];
            int currentCol = position[1];
            int obstacles = position[2];

            // Check if we have reached the bottom-right corner
            if (currentRow == rows - 1 && currentCol == cols - 1) {
                // If we reached the destination, return the number of obstacles encountered
                return obstacles;
            }

            // If we have already visited this cell, skip it
            if (visited[currentRow][currentCol]) {
                continue;
            }

            // Mark the current cell as visited
            visited[currentRow][currentCol] = true;

            // Explore the neighboring cells
            for (int h = 0; h < 4; ++h) {
                int nextRow = currentRow + directions[h];
                int nextCol = currentCol + directions[h + 1];

                // Check the boundaries of the grid
                if (nextRow >= 0 && nextRow < rows && nextCol >= 0 && nextCol < cols) {
                    // If the next cell is free (no obstacle)
                    if (grid[nextRow][nextCol] == 0) {
                        // Add it to the front of the queue to be processed with the same obstacle count
                        queue.offerFirst(new int[] {nextRow, nextCol, obstacles});
                    } else {
                        // If there's an obstacle, add it to the end of the queue with the obstacle count incremented by 1
                        queue.offerLast(new int[] {nextRow, nextCol, obstacles + 1});
                    }
                }
            }
        }
        // We include a return statement to satisfy the compiler, although the true return occurs inside the loop
        return -1; // This will never be reached as the problem guarantees a path exists
    }
}

or

class Solution {
    public int minimumObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[] {0, 0, 0});
        int[] dirs = {-1, 0, 1, 0, -1};
        boolean[][] vis = new boolean[m][n];
        while (true) {
            var p = q.poll();
            int i = p[0], j = p[1], k = p[2];
            if (i == m - 1 && j == n - 1) {
                return k;
            }
            if (vis[i][j]) {
                continue;
            }
            vis[i][j] = true;
            for (int h = 0; h < 4; ++h) {
                int x = i + dirs[h], y = j + dirs[h + 1];
                if (x >= 0 && x < m && y >= 0 && y < n) {
                    if (grid[x][y] == 0) {
                        q.offerFirst(new int[] {x, y, k});
                    } else {
                        q.offerLast(new int[] {x, y, k + 1});
                    }
                }
            }
        }
    }
}


or


class Solution {
    public int minimumObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] distance = new int[m][n];
        for (int[] row : distance) Arrays.fill(row, Integer.MAX_VALUE);
        Deque<int[]> dq = new ArrayDeque<>();

        distance[0][0] = 0;
        dq.offerFirst(new int[] {0, 0});
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        while (!dq.isEmpty()) {
            int[] cell = dq.pollFirst();
            int x = cell[0], y = cell[1];
            for (int[] dir : directions) {
                int nx = x + dir[0], ny = y + dir[1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n) {
                    int newDist = distance[x][y] + grid[nx][ny];
                    if (newDist < distance[nx][ny]) {
                        distance[nx][ny] = newDist;
                        if (grid[nx][ny] == 0) {
                            dq.offerFirst(new int[] {nx, ny});
                        } else {
                            dq.offerLast(new int[] {nx, ny});
                        }
                    }
                }
            }
        }
        return distance[m-1][n-1];
    }
}

