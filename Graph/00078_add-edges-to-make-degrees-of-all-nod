https://leetcode.com/problems/add-edges-to-make-degrees-of-all-nodes-even/description/

2508. Add Edges to Make Degrees of All Nodes Even
Hard
Topics
Companies
Hint
There is an undirected graph consisting of n nodes numbered from 1 to n. You are given the integer n and a 2D array edges where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi. The graph can be disconnected.

You can add at most two additional edges (possibly none) to this graph so that there are no repeated edges and no self-loops.

Return true if it is possible to make the degree of each node in the graph even, otherwise return false.

The degree of a node is the number of edges connected to it.

 

Example 1:


Input: n = 5, edges = [[1,2],[2,3],[3,4],[4,2],[1,4],[2,5]]
Output: true
Explanation: The above diagram shows a valid way of adding an edge.
Every node in the resulting graph is connected to an even number of edges.
Example 2:


Input: n = 4, edges = [[1,2],[3,4]]
Output: true
Explanation: The above diagram shows a valid way of adding two edges.
Example 3:


Input: n = 4, edges = [[1,2],[1,3],[1,4]]
Output: false
Explanation: It is not possible to obtain a valid graph with adding at most 2 edges.
 

Constraints:

3 <= n <= 105
2 <= edges.length <= 105
edges[i].length == 2
1 <= ai, bi <= n
ai != bi
There are no repeated edges.


# java


class Solution {
  public boolean isPossible(int n, List<List<Integer>> edges) {
    Set<Integer>[] graph = new Set[n];

    for (int i = 0; i < n; ++i)
      graph[i] = new HashSet<>();

    for (List<Integer> edge : edges) {
      final int u = edge.get(0) - 1;
      final int v = edge.get(1) - 1;
      graph[u].add(v);
      graph[v].add(u);
    }

    List<Integer> oddNodes = getOddNodes(graph);
    if (oddNodes.isEmpty())
      return true;
    if (oddNodes.size() == 2) {
      final int a = oddNodes.get(0);
      final int b = oddNodes.get(1);
      for (int i = 0; i < n; ++i)
        // Can connect i with a and i with b.
        if (!graph[i].contains(a) && !graph[i].contains(b))
          return true;
    }
    if (oddNodes.size() == 4) {
      final int a = oddNodes.get(0);
      final int b = oddNodes.get(1);
      final int c = oddNodes.get(2);
      final int d = oddNodes.get(3);
      return (!graph[a].contains(b) && !graph[c].contains(d)) ||
          (!graph[a].contains(c) && !graph[b].contains(d)) ||
          (!graph[a].contains(d) && !graph[b].contains(c));
    }
    return false;
  }

  private List<Integer> getOddNodes(Set<Integer>[] graph) {
    List<Integer> oddNodes = new ArrayList<>();
    for (int i = 0; i < graph.length; ++i)
      if (graph[i].size() % 2 == 1)
        oddNodes.add(i);
    return oddNodes;
  }
}


or


class Solution {
    public boolean isPossible(int n, List<List<Integer>> edges) {
        Set<Integer>[] g = new Set[n + 1];
        Arrays.setAll(g, k -> new HashSet<>());
        for (var e : edges) {
            int a = e.get(0), b = e.get(1);
            g[a].add(b);
            g[b].add(a);
        }
        List<Integer> vs = new ArrayList<>();
        for (int i = 1; i <= n; ++i) {
            if (g[i].size() % 2 == 1) {
                vs.add(i);
            }
        }
        if (vs.size() == 0) {
            return true;
        }
        if (vs.size() == 2) {
            int a = vs.get(0), b = vs.get(1);
            if (!g[a].contains(b)) {
                return true;
            }
            for (int c = 1; c <= n; ++c) {
                if (a != c && b != c && !g[a].contains(c) && !g[c].contains(b)) {
                    return true;
                }
            }
            return false;
        }
        if (vs.size() == 4) {
            int a = vs.get(0), b = vs.get(1), c = vs.get(2), d = vs.get(3);
            if (!g[a].contains(b) && !g[c].contains(d)) {
                return true;
            }
            if (!g[a].contains(c) && !g[b].contains(d)) {
                return true;
            }
            if (!g[a].contains(d) && !g[b].contains(c)) {
                return true;
            }
            return false;
        }
        return false;
    }
}


or

class Solution {
    public boolean isPossible(int n, List<List<Integer>> edges) {
        //storing adj list in list of hashsets
        List<Set<Integer>> l=new ArrayList<>();
        int degree[]=new int[n+1];
        for(int i=0;i<n+1;i++){
            l.add(new HashSet<>());
        }
        //storing the adj list and counting the degree
        for(List<Integer> x:edges){
            l.get(x.get(0)).add(x.get(1));
            l.get(x.get(1)).add(x.get(0));
            degree[x.get(0)]++;
            degree[x.get(1)]++;
        }
        //for storing odd degrees nodes
        List<Integer> odd=new ArrayList<>();
        for(int i=1;i<n+1;i++){
            if(degree[i]%2==1){
                odd.add(i);
            }
        }
     // if allnodes degrees are even
        if(odd.size()==0)return true;
     // if number of odd degree nodes are 2 then we arise 2 cond  
        if(odd.size()==2){
            Set<Integer> s1=l.get(odd.get(0));
            Set<Integer> s2=l.get(odd.get(1));
            //if two nodes individually not connected
             if(!s1.contains(odd.get(1))){
                 return true;
             }
            //if two nodes are individually connected but can connect with some other even nodes and make all even degree
            else{
                for(int i=1;i<n+1;i++){
                    if(!s1.contains(i) && !s2.contains(i)){
                        return true;
                    }
                }
            }
            
        }
        //if degree of odd nodes are 4 then we can get 4 cond and manually check it
        if(odd.size()==4){
            Set<Integer> s1=l.get(odd.get(0));//1
            Set<Integer> s2=l.get(odd.get(1));//2
            Set<Integer> s3=l.get(odd.get(2));//3
            Set<Integer> s4=l.get(odd.get(3));//4
            
            //first cond !(1,2) && !(3,4)
            if(!s1.contains(odd.get(1)) && !s2.contains(odd.get(0)) && !s3.contains(odd.get(3)) && !s4.contains(odd.get(2))){
                return true;
            }
            //second cond !(1,3) && !(2,4)
            else if(!s1.contains(odd.get(2)) && !s3.contains(odd.get(0)) && !s2.contains(odd.get(3)) && !s4.contains(odd.get(1))){
                return true;
            }
            //third cond second cond !(1,4) && !(2,3)
            else if(!s1.contains(odd.get(3)) && !s4.contains(odd.get(0)) && !s3.contains(odd.get(1)) && !s2.contains(odd.get(2))){
                return true;
            }
        }
        return false;
    }
}


or


class Solution {
    public boolean isPossible(int n, List<List<Integer>> edges) {
        // number of edges of each node
        int[] noe=new int[n+1];
        
        // make a graph
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<=n;i++) graph.add(new ArrayList<>());
        for(List<Integer> c:edges){
            int x=c.get(0);
            int y=c.get(1);
            graph.get(x).add(y);
            graph.get(y).add(x);
            noe[x]++;
            noe[y]++;
        }
        
        // nodes with number of odd edges will be in the list
        List<Integer> list=new ArrayList<>();
        
        for(int i=0;i<noe.length;i++){ 
            if(noe[i]%2==1){
                list.add(i);
            }
        }
        
        int odd=list.size();   
        
        //no odds
        if(odd==0) return true;
        else if(odd>4||odd==1||odd==3) return false; // we can't get ans with these conditions because edges will connect 2 nodes
        else if(odd==4){ // if odd is 4 then we have to try out every possible combination
            int node1=list.get(0);
            int node2=list.get(1);
            int node3=list.get(2);
            int node4=list.get(3);
            if(checkIfLegal(graph,node1,node2) && checkIfLegal(graph,node3,node4)) return true;
            if(checkIfLegal(graph,node1,node3) && checkIfLegal(graph,node2,node4)) return true;
            if(checkIfLegal(graph,node1,node4) && checkIfLegal(graph,node2,node3)) return true;
        }else if(odd==2){ // if odd is 2 there are 2 conditions either join the 2 nodes with odd edges or join one node with even edge with 2 nodes with odd edge
            int x=list.get(0);
            int y=list.get(1);
            if(checkIfLegal(graph,y,x)) return true;
            for(int i=1;i<noe.length;i++){
                if(i==x||i==y) continue;
                if(checkIfLegal(graph,i,x) && checkIfLegal(graph,i,y)) return true;
            }
        }
        return false;
    }
    
    // will check if there is not a repeated edge or self loop
    public boolean checkIfLegal(List<List<Integer>> graph,int x,int y){
        for(int val:graph.get(x)) if(val==y) return false;
        return true;
    }
    
}


or


class Solution {
   
    List<Set<Integer>> adjList;
    
    public boolean isPossible(int n, List<List<Integer>> edges) {
        adjList = new ArrayList<>();
        List<Integer> odds = new ArrayList<>();
        for(int i = 1; i<=n; i++) {
            adjList.add(new HashSet<>());
        }
        for(List<Integer> edge: edges) {
            int x = edge.get(0) - 1, y = edge.get(1) - 1;
            adjList.get(x).add(y);
            adjList.get(y).add(x);
        }
        int cntOdd = 0;
        for(int i = 0; i< n; i++) {
            if(adjList.get(i).size() % 2 == 1) {
                cntOdd ++;
                odds.add(i);
            }
        }
        if(cntOdd == 0)
            return true;
        else if(cntOdd == 2) {
            Integer u = odds.get(0), v = odds.get(1);
            for(int k = 0; k<n; k++) {
                if(!adjList.get(k).contains(u) && !adjList.get(k).contains(v)) {
                    return true;
                }
            }
        } else if(cntOdd == 4) {
            int a = odds.get(0), b = odds.get(1), c = odds.get(2), d = odds.get(3);
            if((!adjList.get(a).contains(b) && !adjList.get(c).contains(d))
               || (!adjList.get(b).contains(c) && !adjList.get(a).contains(d))
               || (!adjList.get(a).contains(c) && !adjList.get(b).contains(d))
              ) {
                return true;
            }
        }
        return false;
    }
}
