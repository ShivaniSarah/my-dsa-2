https://leetcode.com/problems/maximum-path-quality-of-a-graph/description/

2065. Maximum Path Quality of a Graph
Hard
Topics
Companies
Hint
There is an undirected graph with n nodes numbered from 0 to n - 1 (inclusive). You are given a 0-indexed integer array values where values[i] is the value of the ith node. You are also given a 0-indexed 2D integer array edges, where each edges[j] = [uj, vj, timej] indicates that there is an undirected edge between the nodes uj and vj, and it takes timej seconds to travel between the two nodes. Finally, you are given an integer maxTime.

A valid path in the graph is any path that starts at node 0, ends at node 0, and takes at most maxTime seconds to complete. You may visit the same node multiple times. The quality of a valid path is the sum of the values of the unique nodes visited in the path (each node's value is added at most once to the sum).

Return the maximum quality of a valid path.

Note: There are at most four edges connected to each node.

 

Example 1:


Input: values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49
Output: 75
Explanation:
One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.
Example 2:


Input: values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30
Output: 25
Explanation:
One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.
The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.
Example 3:


Input: values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50
Output: 7
Explanation:
One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.
 

Constraints:

n == values.length
1 <= n <= 1000
0 <= values[i] <= 108
0 <= edges.length <= 2000
edges[j].length == 3 
0 <= uj < vj <= n - 1
10 <= timej, maxTime <= 100
All the pairs [uj, vj] are unique.
There are at most four edges connected to each node.
The graph may not be connected.


# java

class Solution {
  public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {
    final int n = values.length;
    List<Pair<Integer, Integer>>[] graph = new List[n];
    int[] seen = new int[n];
    seen[0] = 1;

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      final int time = edge[2];
      graph[u].add(new Pair<>(v, time));
      graph[v].add(new Pair<>(u, time));
    }

    dfs(graph, values, 0, values[0], maxTime, seen);
    return ans;
  }

  private int ans = 0;

  private void dfs(List<Pair<Integer, Integer>>[] graph, int[] values, int u, int quality,
                   int remainingTime, int[] seen) {
    if (u == 0)
      ans = Math.max(ans, quality);
    for (Pair<Integer, Integer> pair : graph[u]) {
      final int v = pair.getKey();
      final int time = pair.getValue();
      if (time > remainingTime)
        continue;
      final int newQuality = quality + values[v] * (seen[v] == 0 ? 1 : 0);
      ++seen[v];
      dfs(graph, values, v, newQuality, remainingTime - time, seen);
      --seen[v];
    }
  }
}


or


class Solution {
    private List<int[]>[] g;
    private boolean[] vis;
    private int[] values;
    private int maxTime;
    private int ans;

    public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {
        int n = values.length;
        g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        for (var e : edges) {
            int u = e[0], v = e[1], t = e[2];
            g[u].add(new int[] {v, t});
            g[v].add(new int[] {u, t});
        }
        vis = new boolean[n];
        vis[0] = true;
        this.values = values;
        this.maxTime = maxTime;
        dfs(0, 0, values[0]);
        return ans;
    }

    private void dfs(int u, int cost, int value) {
        if (u == 0) {
            ans = Math.max(ans, value);
        }
        for (var e : g[u]) {
            int v = e[0], t = e[1];
            if (cost + t <= maxTime) {
                if (vis[v]) {
                    dfs(v, cost + t, value);
                } else {
                    vis[v] = true;
                    dfs(v, cost + t, value + values[v]);
                    vis[v] = false;
                }
            }
        }
    }
}


or


class Solution {
    Map<Integer, Map<Integer, Integer> > g = new HashMap();
    int res = 0;
    int[] values;
    public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {
        this.values = values;
        for(int[] e : edges) {
            int u = e[0], v = e[1], t = e[2];
            g.computeIfAbsent(u, x -> new HashMap()).put(v, t);
            g.computeIfAbsent(v, x -> new HashMap()).put(u, t);
        }
        dfs(new ArrayList(), 0, maxTime, 0);
        return res;
    }
    void dfs(List<Integer> path, int cur, int maxTime, int time) {
        path.add(cur);
        if(cur == 0) {
            int tmp = 0;
            Set<Integer> hs = new HashSet();
            for(int i : path) {
                if(hs.add(i)) tmp += values[i];
            }
            res = Math.max(res, tmp);
        }
        for(var en : g.getOrDefault(cur, new HashMap<>()).entrySet()) {
            int nei = en.getKey(), t = en.getValue();
            if(t + time > maxTime) continue;
            dfs(path, nei, maxTime, t + time);
        }
        path.remove(path.size() - 1);
    }
}

or


class Solution {
    public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {
        int n = values.length;
        List<int[]>[] adj = new List[n];
        for (int i = 0; i < n; ++i) adj[i] = new LinkedList();
        for (int[] e : edges) {
            int i = e[0], j = e[1], t = e[2];
            adj[i].add(new int[]{j, t});
            adj[j].add(new int[]{i, t});
        }
        int[] res = new int[1];
        int[] seen = new int[n];
        seen[0]++;
        dfs(adj, 0, values, maxTime, seen, res, values[0]);
        return res[0];
    }
    private void dfs(List<int[]>[] adj, int src, int[] values, int maxTime, int[] seen, int[] res, int sum) {
        if (0 == src) {
            res[0] = Math.max(res[0], sum);
        }
        if (0 > maxTime) return;
        for (int[] data : adj[src]) {
            int dst = data[0], t = data[1];
            if (0 > maxTime - t) continue;
            seen[dst]++;
            dfs(adj, dst, values, maxTime - t, seen, res, sum + (1 == seen[dst] ? values[dst] : 0));
            seen[dst]--;
        }
    }
}


or


class Solution {
   	public int maximalPathQuality(int[] values, int[][] edges, int maxTime) {
        List<List<int[]>> adjList = new ArrayList();
        for(int i : values) {
            adjList.add(new ArrayList());
        }
        
        for(int edge[] : edges) {
            adjList.get(edge[0]).add(new int[] {edge[1], edge[2]});
            adjList.get(edge[1]).add(new int[] {edge[0], edge[2]});
        }
        int[] visited = new int[values.length];
        solve(values, adjList, visited, 0, maxTime, 0, 0);
        return ans;
    }
    int ans;
    
    void solve(int[] values, List<List<int[]>> adjList, int[] visited, int node, int maxTime, int currTime, int score) {
        if(currTime > maxTime) {
            return;
        }
        if(visited[node] == 0) {
            score += values[node];
        }
        
        if(node == 0) {
            ans = Math.max(ans, score);
        }
        
        visited[node]++;
        
        for(int[] v : adjList.get(node)) {
            solve(values, adjList, visited, v[0], maxTime, currTime + v[1], score);
        }
        
        visited[node]--;
    }
}


