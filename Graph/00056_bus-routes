https://leetcode.com/problems/bus-routes/description/


815. Bus Routes
Hard
Topics
Companies
You are given an array routes representing bus routes where routes[i] is a bus route that the ith bus repeats forever.

For example, if routes[0] = [1, 5, 7], this means that the 0th bus travels in the sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ... forever.
You will start at the bus stop source (You are not on any bus initially), and you want to go to the bus stop target. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from source to target. Return -1 if it is not possible.

 

Example 1:

Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.
Example 2:

Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1
 

 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 105
All the values of routes[i] are unique.
sum(routes[i].length) <= 105
0 <= routes[i][j] < 106
0 <= source, target < 106


# java


class Solution {

    List<List<Integer>> adjList = new ArrayList();

    // Iterate over each pair of routes and add an edge between them if there's a common stop.
    void createGraph(int[][] routes) {
        for (int i = 0; i < routes.length; i++) {
            for (int j = i + 1; j < routes.length; j++) {
                if (haveCommonNode(routes[i], routes[j])) {
                    adjList.get(i).add(j);
                    adjList.get(j).add(i);
                }
            }
        }
    }

    // Returns true if the provided routes have a common stop, false otherwise.
    boolean haveCommonNode(int[] route1, int[] route2) {
        int i = 0, j = 0;
        while (i < route1.length && j < route2.length) {
            if (route1[i] == route2[j]) {
                return true;
            }

            if (route1[i] < route2[j]) {
                i++;
            } else {
                j++;
            }
        }
        return false;
    }

    // Add all the routes in the queue that have the source as one of the stops.
    void addStartingNodes(Queue<Integer> q, int[][] routes, int source) {
        for (int i = 0; i < routes.length; i++) {
            if (isStopExist(routes[i], source)) {
                q.add(i);
            }
        }
    }

    // Returns true if the given stop is present in the route, false otherwise.
    boolean isStopExist(int[] route, int stop) {
        for (int j = 0; j < route.length; j++) {
            if (route[j] == stop) {
                return true;
            }
        }
        return false;
    }

    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) {
            return 0;
        }

        for (int i = 0; i < routes.length; ++i) {
            Arrays.sort(routes[i]);
            adjList.add(new ArrayList());
        }

        createGraph(routes);

        Queue<Integer> q = new LinkedList<>();
        addStartingNodes(q, routes, source);

        Set<Integer> vis = new HashSet<Integer>(routes.length);
        int busCount = 1;
        while (!q.isEmpty()) {
            int sz = q.size();

            while (sz-- > 0) {
                int node = q.remove();

                // Return busCount, if the stop target is present in the current route.
                if (isStopExist(routes[node], target)) {
                    return busCount;
                }

                // Add the adjacent routes.
                for (int adj : adjList.get(node)) {
                    if (!vis.contains(adj)) {
                        vis.add(adj);
                        q.add(adj);
                    }
                }
            }

            busCount++;
        }

        return -1;
    }
}




or



public class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        HashMap<Integer, ArrayList<Integer>> adjList = new HashMap<>();

        // Map stops to the routes that include them
        for (int r = 0; r < routes.length; r++) {
            for (int stop : routes[r]) {
                adjList.computeIfAbsent(stop, k -> new ArrayList<>()).add(r);
            }
        }

        // ‚ùóFix: Check if source is unreachable
        if (!adjList.containsKey(source)) return -1;

        Queue<Integer> q = new LinkedList<>();
        Set<Integer> vis = new HashSet<>();

        for (int route : adjList.get(source)) {
            q.add(route);
            vis.add(route);
        }

        int busCount = 1;
        while (!q.isEmpty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                int route = q.remove();

                for (int stop : routes[route]) {
                    if (stop == target) return busCount;

                    for (int nextRoute : adjList.getOrDefault(stop, new ArrayList<>())) {
                        if (!vis.contains(nextRoute)) {
                            vis.add(nextRoute);
                            q.add(nextRoute);
                        }
                    }
                }
            }

            busCount++;
        }

        return -1;
    }
}



or


class Solution {
  public int numBusesToDestination(int[][] routes, int source, int target) {
    if (source == target)
      return 0;

    Map<Integer, List<Integer>> graph = new HashMap<>(); // {route: [buses]}
    Set<Integer> usedBuses = new HashSet<>();

    for (int i = 0; i < routes.length; ++i)
      for (final int route : routes[i]) {
        graph.putIfAbsent(route, new ArrayList<>());
        graph.get(route).add(i);
      }

    Queue<Integer> q = new ArrayDeque<>(List.of(source));

    for (int step = 1; !q.isEmpty(); ++step)
      for (int sz = q.size(); sz > 0; --sz) {
        for (final int bus : graph.getOrDefault(q.poll(), new ArrayList<>()))
          if (usedBuses.add(bus))
            for (final int nextRoute : routes[bus]) {
              if (nextRoute == target)
                return step;
              q.offer(nextRoute);
            }
      }

    return -1;
  }
}

or


class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        Map<Integer, List<Integer>> stopToRoutes = new HashMap<>();
        int n = routes.length;

        for (int i = 0; i < n; i++) {
            for (int stop : routes[i]) {
                stopToRoutes.computeIfAbsent(stop, x -> new ArrayList<>()).add(i);
            }
        }

        // Edge case: source or target not in any route
        if (!stopToRoutes.containsKey(source) || !stopToRoutes.containsKey(target)) return -1;

        Queue<Integer> q = new LinkedList<>();
        boolean[] visitedRoute = new boolean[n];  // Tracks which routes we've already taken
        Set<Integer> visitedStop = new HashSet<>();  // Tracks which stops we've already visited

        for (int route : stopToRoutes.get(source)) {
            q.offer(route);
            visitedRoute[route] = true;
        }

        int buses = 1;

        while (!q.isEmpty()) {
            int size = q.size();

            for (int i = 0; i < size; i++) {
                int route = q.poll();

                for (int stop : routes[route]) {
                    if (stop == target) return buses;

                    if (visitedStop.contains(stop)) continue;
                    visitedStop.add(stop);

                    for (int nextRoute : stopToRoutes.get(stop)) {
                        if (!visitedRoute[nextRoute]) {
                            visitedRoute[nextRoute] = true;
                            q.offer(nextRoute);
                        }
                    }
                }
            }

            buses++;
        }

        return -1;
    }
}



or


class Solution {
    Map<Integer, List<Integer>> graph = new HashMap<>();

    public int numBusesToDestination(int[][] routes, int S, int T) {
        if (S == T) return 0;

        createGraph(routes);
        if (!graph.containsKey(S)) return -1;  // Important check

        HashSet<Integer> visitedBuses = new HashSet<>();
        HashSet<Integer> visitedStops = new HashSet<>();
        Queue<Integer> q = new LinkedList<>();
        q.add(S);
        visitedStops.add(S);

        int ans = 0;
        while (!q.isEmpty()) {
            int n = q.size();
            ans++;

            for (int i = 0; i < n; i++) {
                int stop = q.poll();

                List<Integer> buses = graph.get(stop);
                if (buses == null) continue; // Added null check here

                for (int bus : buses) {
                    if (visitedBuses.contains(bus)) continue;
                    visitedBuses.add(bus);

                    for (int j = 0; j < routes[bus].length; j++) {
                        int nextStop = routes[bus][j];
                        if (nextStop == T) return ans;
                        if (visitedStops.add(nextStop)) {
                            q.add(nextStop);
                        }
                    }
                }
            }
        }
        return -1;
    }

    public void createGraph(int[][] routes) {
        for (int i = 0; i < routes.length; i++) {
            for (int j = 0; j < routes[i].length; j++) {
                graph.computeIfAbsent(routes[i][j], k -> new ArrayList<>()).add(i);
            }
        }
    }
}



or

class Solution {
    public int numBusesToDestination(int[][] routes, int source, int target) {
        if (source == target) return 0;

        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();

        for (int i = 0; i < routes.length; i++) {
            for (int j = 0; j < routes[i].length; j++) {
                int busStopNo = routes[i][j];
                map.computeIfAbsent(busStopNo, k -> new ArrayList<>()).add(i);
            }
        }

        if (!map.containsKey(source)) return -1;

        LinkedList<Integer> queue = new LinkedList<>();
        HashSet<Integer> busStopVisited = new HashSet<>();
        HashSet<Integer> busVisited = new HashSet<>();
        int cost = 0;

        queue.addLast(source);
        busStopVisited.add(source);

        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size-- > 0) {
                int rem = queue.removeFirst();
                if (rem == target) return cost;

                ArrayList<Integer> buses = map.get(rem);
                if (buses == null) continue; // üõ†Ô∏è null check

                for (int bus : buses) {
                    if (busVisited.contains(bus)) continue;

                    for (int busStop : routes[bus]) {
                        if (busStopVisited.add(busStop)) {
                            queue.addLast(busStop);
                        }
                    }

                    busVisited.add(bus);
                }
            }
            cost++;
        }
        return -1;
    }
}



or


