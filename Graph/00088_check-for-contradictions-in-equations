https://leetcode.com/problems/check-for-contradictions-in-equations/description/

https://leetcode.ca/2022-03-25-2307-Check-for-Contradictions-in-Equations/


2307. Check for Contradictions in Equations
Description
You are given a 2D array of strings equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] means that Ai / Bi = values[i].

Determine if there exists a contradiction in the equations. Return true if there is a contradiction, or false otherwise.

Note:

When checking if two numbers are equal, check that their absolute difference is less than 10-5.
The testcases are generated such that there are no cases targeting precision, i.e. using double is enough to solve the problem.
 

Example 1:

Input: equations = [["a","b"],["b","c"],["a","c"]], values = [3,0.5,1.5]
Output: false
Explanation:
The given equations are: a / b = 3, b / c = 0.5, a / c = 1.5
There are no contradictions in the equations. One possible assignment to satisfy all equations is:
a = 3, b = 1 and c = 2.
Example 2:

Input: equations = [["le","et"],["le","code"],["code","et"]], values = [2,5,0.5]
Output: true
Explanation:
The given equations are: le / et = 2, le / code = 5, code / et = 0.5
Based on the first two equations, we get code / et = 0.4.
Since the third equation is code / et = 0.5, we get a contradiction.
 

Constraints:

1 <= equations.length <= 100
equations[i].length == 2
1 <= Ai.length, Bi.length <= 5
Ai, Bi consist of lowercase English letters.
equations.length == values.length
0.0 < values[i] <= 10.0
values[i] has a maximum of 2 decimal places.



# java


class Solution {
  public boolean checkContradictions(List<List<String>> equations, double[] values) {
    // Convert `string` to `int` for a better perfermance.
    Map<String, Integer> strToInt = new HashMap<>();

    for (List<String> equation : equations) {
      strToInt.putIfAbsent(equation.get(0), strToInt.size());
      strToInt.putIfAbsent(equation.get(1), strToInt.size());
    }

    List<Pair<Integer, Double>>[] graph = new List[strToInt.size()];
    double[] seen = new double[graph.length];

    for (int i = 0; i < graph.length; ++i)
      graph[i] = new ArrayList<>();

    for (int i = 0; i < equations.size(); ++i) {
      final int u = strToInt.get(equations.get(i).get(0));
      final int v = strToInt.get(equations.get(i).get(1));
      graph[u].add(new Pair<>(v, values[i]));
      graph[v].add(new Pair<>(u, 1 / values[i]));
    }

    for (int i = 0; i < graph.length; ++i)
      if (seen[i] != 0.0 && dfs(graph, i, seen, 1.0))
        return true;

    return false;
  }

  private boolean dfs(List<Pair<Integer, Double>>[] graph, int u, double[] seen, double val) {
    if (seen[u] != 0.0)
      return Math.abs(val / seen[u] - 1) > 1e-5;

    seen[u] = val;
    for (Pair<Integer, Integer> pair : graph[u]) {
      final int v = pair.getKey();
      final double w = pair.getValue();
      if (dfs(graph, v, seen, val / w))
        return true;
    }

    return false;
  }
}


or




class Solution {
    private int[] p;
    private double[] w;

    public boolean checkContradictions(List<List<String>> equations, double[] values) {
        Map<String, Integer> d = new HashMap<>();
        int n = 0;
        for (var e : equations) {
            for (var s : e) {
                if (!d.containsKey(s)) {
                    d.put(s, n++);
                }
            }
        }
        p = new int[n];
        w = new double[n];
        for (int i = 0; i < n; ++i) {
            p[i] = i;
            w[i] = 1.0;
        }
        final double eps = 1e-5;
        for (int i = 0; i < equations.size(); ++i) {
            int a = d.get(equations.get(i).get(0)), b = d.get(equations.get(i).get(1));
            int pa = find(a), pb = find(b);
            double v = values[i];
            if (pa != pb) {
                p[pb] = pa;
                w[pb] = v * w[a] / w[b];
            } else if (Math.abs(v * w[a] - w[b]) >= eps) {
                return true;
            }
        }
        return false;
    }

    private int find(int x) {
        if (p[x] != x) {
            int root = find(p[x]);
            w[x] *= w[p[x]];
            p[x] = root;
        }
        return p[x];
    }
}




