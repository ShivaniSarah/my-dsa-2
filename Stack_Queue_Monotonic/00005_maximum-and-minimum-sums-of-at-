https://leetcode.com/problems/maximum-and-minimum-sums-of-at-most-size-k-subarrays/description/

3430. Maximum and Minimum Sums of at Most Size K Subarrays
Hard
Topics
Companies
Hint
You are given an integer array nums and a positive integer k. Return the sum of the maximum and minimum elements of all subarrays with at most k elements.

 

Example 1:

Input: nums = [1,2,3], k = 2

Output: 20

Explanation:

The subarrays of nums with at most 2 elements are:

Subarray	Minimum	Maximum	Sum
[1]	1	1	2
[2]	2	2	4
[3]	3	3	6
[1, 2]	1	2	3
[2, 3]	2	3	5
Final Total	 	 	20
The output would be 20.

Example 2:

Input: nums = [1,-3,1], k = 2

Output: -6

Explanation:

The subarrays of nums with at most 2 elements are:

Subarray	Minimum	Maximum	Sum
[1]	1	1	2
[-3]	-3	-3	-6
[1]	1	1	2
[1, -3]	-3	1	-2
[-3, 1]	-3	1	-2
Final Total	 	 	-6
The output would be -6.

 

Constraints:

1 <= nums.length <= 80000
1 <= k <= nums.length
-106 <= nums[i] <= 106



# java


class Solution {
  // Similar to 2104. Sum of Subarray Ranges
  public long minMaxSubarraySum(int[] nums, int k) {
    Pair<int[], int[]> gt = getPrevNext(nums, (a, b) -> a < b);
    Pair<int[], int[]> lt = getPrevNext(nums, (a, b) -> a > b);
    int[] prevGt = gt.getKey();
    int[] nextGt = gt.getValue();
    int[] prevLt = lt.getKey();
    int[] nextLt = lt.getValue();
    return subarraySum(nums, k, prevGt, nextGt) + subarraySum(nums, k, prevLt, nextLt);
  }

  // Returns the sum of all subarrays with a size <= k, The `prev` and `next`
  // arrays are used to store the indices of the nearest numbers that are
  // smaller or larger than the current number, respectively.
  private long subarraySum(int[] nums, int k, int[] prev, int[] next) {
    long res = 0;
    for (int i = 0; i < nums.length; ++i) {
      final int l = Math.min(i - prev[i], k);
      final int r = Math.min(next[i] - i, k);
      final int extra = Math.max(0, l + r - 1 - k);
      res += (long) nums[i] * (l * r - extra * (extra + 1) / 2);
    }
    return res;
  }

  // Returns `prev` and `next`, that store the indices of the nearest numbers
  // that are smaller or larger than the current number depending on `op`.
  private Pair<int[], int[]> getPrevNext(int[] nums, BiFunction<Integer, Integer, Boolean> op) {
    final int n = nums.length;
    int[] prev = new int[n];
    int[] next = new int[n];
    Arrays.fill(prev, -1);
    Arrays.fill(next, n);
    Deque<Integer> stack = new ArrayDeque<>();
    for (int i = 0; i < n; ++i) {
      while (!stack.isEmpty() && op.apply(nums[stack.peek()], nums[i]))
        next[stack.pop()] = i;
      if (!stack.isEmpty())
        prev[i] = stack.peek();
      stack.push(i);
    }
    return new Pair<>(prev, next);
  }
}

or

class Solution {
    public long minMaxSubarraySum(int[] nums, int k) {
        return minOrMaxSum(nums, k, true) + minOrMaxSum(nums, k, false);
    }

    private long minOrMaxSum(int[] nums, int k, boolean isMin) {
        long sum = 0L;
        int n = nums.length;
        LinkedList<Integer> stack = new LinkedList<>();
        stack.addFirst(-1);

        for (int i = 0; i <= n; i++) {
            while (stack.peekFirst() != -1 &&
                (i == n ||
                 (isMin && nums[stack.peekFirst()] >= nums[i]) || 
                 (!isMin && nums[stack.peekFirst()] <= nums[i]))) {
                
                int middle = stack.removeFirst();
                int left = stack.peekFirst() + 1;
                int right = i - 1;
                int minLeft = Math.max(left, middle - k + 1);
                int maxRight = Math.min(middle + k - 1, right);
                long subArrayCount = 0L;

                if (maxRight - minLeft < k) {
                    // Can ignore k in this case
                    // => subArrayCount = (numOfLeftElements + 1) * (numOfRightElements + 1)
                    subArrayCount = (middle - minLeft + 1L) * (maxRight - middle + 1L);
                } else {
                    // To optimize performance, compare the number of possible left boundaries and
                    // right boundaries. Choose the side with fewer elements to minimize computation.
                    if (middle - minLeft < maxRight - middle) {
                        // Count subarrays starting from l
                        for (int l = minLeft; l <= middle; l++) {
                            int maxR = Math.min(right, l + k - 1);
                            subArrayCount += Math.max(maxR - middle + 1, 0);
                        }
                    } else {
                        // Count subarrays ending at r
                        for (int r = middle; r <= maxRight; r++) {
                            int minL = Math.max(r - k + 1, left);
                            subArrayCount += Math.max(middle - minL + 1, 0);
                        }
                    }
                }

                sum += subArrayCount * nums[middle];
            }
            stack.addFirst(i);
        }

        return sum;
    }
}

or


import java.util.*;

class Solution {
    public long minMaxSubarraySum(int[] nums, int k) {
        return solve(nums, k, true) + solve(nums, k, false);
    }

    private long solve(int[] nums, int k, boolean isMin) {
        int n = nums.length;
        Deque<Element> window = new ArrayDeque<>();
        long windowSum = 0;
        long result = 0;

        for (int i = 0; i < n; i++) {
            int subarrays = 1;
            while (!window.isEmpty() && (isMin ? nums[i] <= window.peekLast().value : nums[i] >= window.peekLast().value)) {
                Element last = window.pollLast();
                windowSum += (long) last.freq * (nums[i] - last.value);
                subarrays += last.freq;
            }

            window.offerLast(new Element(nums[i], subarrays, i));
            windowSum += nums[i];

            if (i - k >= 0) {
                windowSum -= window.peekFirst().value;
                window.peekFirst().freq--;
                if (window.peekFirst().index == i - k) {
                    window.pollFirst();
                }
            }

            result += windowSum;
        }

        return result;
    }

    static class Element {
        int value, freq, index;
        Element(int v, int f, int idx) {
            value = v;
            freq = f;
            index = idx;
        }
    }
}
