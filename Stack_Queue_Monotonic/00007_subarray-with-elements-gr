https://leetcode.com/problems/subarray-with-elements-greater-than-varying-threshold/description/

2334. Subarray With Elements Greater Than Varying Threshold
Hard
Topics
Companies
Hint
You are given an integer array nums and an integer threshold.

Find any subarray of nums of length k such that every element in the subarray is greater than threshold / k.

Return the size of any such subarray. If there is no such subarray, return -1.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,4,3,1], threshold = 6
Output: 3
Explanation: The subarray [3,4,3] has a size of 3, and every element is greater than 6 / 3 = 2.
Note that this is the only valid subarray.
Example 2:

Input: nums = [6,5,6,5,8], threshold = 7
Output: 1
Explanation: The subarray [8] has a size of 1, and 8 > 7 / 1 = 7. So 1 is returned.
Note that the subarray [6,5] has a size of 2, and every element is greater than 7 / 2 = 3.5. 
Similarly, the subarrays [6,5,6], [6,5,6,5], [6,5,6,5,8] also satisfy the given conditions.
Therefore, 2, 3, 4, or 5 may also be returned.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i], threshold <= 109



# java


class Solution {
  // Similar to 907. Sum of Subarray Minimums
  public int validSubarraySize(int[] nums, int threshold) {
    final int n = nums.length;
    long ans = 0;
    // prev[i] := the index k s.t. nums[k] is the previous minimum in nums[0..n)
    int[] prev = new int[n];
    // next[i] := the index k s.t. nums[k] is the next minimum in nums[i + 1..n)
    int[] next = new int[n];
    Deque<Integer> stack = new ArrayDeque<>();

    Arrays.fill(prev, -1);
    Arrays.fill(next, n);

    for (int i = 0; i < nums.length; ++i) {
      while (!stack.isEmpty() && nums[stack.peek()] > nums[i]) {
        final int index = stack.pop();
        next[index] = i;
      }
      if (!stack.isEmpty())
        prev[i] = stack.peek();
      stack.push(i);
    }

    for (int i = 0; i < n; ++i) {
      // the number of `nums` in subarray containing nums[i] >= nums[i]
      final int k = (i - prev[i]) + (next[i] - i) - 1;
      if (nums[i] > threshold / (double) k)
        return k;
    }

    return -1;
  }
}


or


class Solution {
    private int[] p;
    private int[] size;

    public int validSubarraySize(int[] nums, int threshold) {
        int n = nums.length;
        p = new int[n];
        size = new int[n];
        for (int i = 0; i < n; ++i) {
            p[i] = i;
            size[i] = 1;
        }
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; ++i) {
            arr[i][0] = nums[i];
            arr[i][1] = i;
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        boolean[] vis = new boolean[n];
        for (int[] e : arr) {
            int v = e[0], i = e[1];
            if (i > 0 && vis[i - 1]) {
                merge(i, i - 1);
            }
            if (i < n - 1 && vis[i + 1]) {
                merge(i, i + 1);
            }
            if (v > threshold / size[find(i)]) {
                return size[find(i)];
            }
            vis[i] = true;
        }
        return -1;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

    private void merge(int a, int b) {
        int pa = find(a), pb = find(b);
        if (pa == pb) {
            return;
        }
        p[pa] = pb;
        size[pb] += size[pa];
    }
}

or


class Solution {
    public int validSubarraySize(int[] nums, int threshold) {
        int n = nums.length;
        int[] next_small = new int[n];
        int[] prev_small = new int[n];
        Stack<Integer> stack = new Stack<>();
        stack.push(0);
        Arrays.fill(next_small, n);
        Arrays.fill(prev_small, -1);
        for(int i=1;i<n;i++){
            while(!stack.isEmpty() && nums[stack.peek()] >= nums[i]){
                stack.pop();
            }    
            if(stack.size()!=0){
                prev_small[i] = stack.peek();
            }
            stack.push(i);
        }
        stack = new Stack<>();
        stack.push(n-1);
        for(int i=n-2;i>=0;i--){
            while(!stack.isEmpty() && nums[stack.peek()] >= nums[i]){
                stack.pop();
            }    
            if(stack.size()!=0){
                next_small[i] = stack.peek();
            }
            stack.push(i);
        }
        for(int i=0;i<n;i++){
            int len = next_small[i] - prev_small[i] - 1;
            if(threshold/(double)len < nums[i]){
                return len;
            }
        }
        return -1;
    }
}


or



class Solution {
    public int validSubarraySize(int[] nums, int threshold) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        
        Deque<int[]> stack = new ArrayDeque<>();
        
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && stack.peek()[0] >= nums[i]) {
                stack.pop();
            }
            
            if (stack.isEmpty()) {
                left[i] = -1;
            } else {
                left[i] = stack.peek()[1];
            }
            
            stack.push(new int[]{nums[i], i});
        }
        
        stack.clear();
        
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && stack.peek()[0] >= nums[i]) {
                stack.pop();
            }
            
            if (stack.isEmpty()) {
                right[i] = n;
            } else {
                right[i] = stack.peek()[1];
            }
            stack.push(new int[]{nums[i], i});
        }
        int res = -1;
        for (int i = 0; i < n; i++) {
            int length = right[i] - left[i] - 1;
            if ((double) threshold / length < nums[i]) {
                res = length;
            }
        }
        return res;
        
    }
}

//tc: O(n)
//sc: O(n)


or


// DSU

class Solution {
    class Pair implements Comparable<Pair>{
        int val; int idx;
        Pair(int val, int idx){
            this.val=val; this.idx=idx;
        }

        public int compareTo(Pair p){
            return this.val-p.val;
        }
    }

    class DSU{
        int par[];  int size[];
        int mx; 
        DSU(int n){
            mx=1;
            par = new int[n];            
            size = new int[n];
            for(int i=0; i<n; i++){
                par[i]=i;
            }
            Arrays.fill(size,1);
        }

        int parent(int x){
            if(par[x]==x) return x;
            return par[x]=parent(par[x]);
        }

        void merge(int x, int y){
            x = parent(x);
            y = parent(y);

            if(size[x]>size[y]){
                int temp=size[x];
                size[x]=size[y];
                size[y]=temp;
            }

            size[y]+=size[x];
            par[x]=y;
            mx=Math.max(mx,size[y]);
        }
    }

    public int validSubarraySize(int[] nums, int threshold) {
        int n=nums.length;
        DSU dsu = new DSU(n);
        Pair arr[] = new Pair[n];
        for(int i=0; i<n; i++){
            arr[i]=new Pair(nums[i],i);
        }       
        Arrays.sort(arr); 
        boolean activated[] = new boolean[n];
        int k=1;
        for(int j=n-1; j>=0 && k<=n;){
            double minThresh = (double)threshold/k;
            while(j>=0 && arr[j].val>minThresh){
                activated[arr[j].idx]=true;
                if(arr[j].idx-1>=0 && activated[arr[j].idx-1]){
                    dsu.merge(arr[j].idx,arr[j].idx-1);
                }
                if(arr[j].idx+1<n && activated[arr[j].idx+1]){
                    dsu.merge(arr[j].idx,arr[j].idx+1);
                }
                j--;
            }
            if(j<n-1 && dsu.mx>=k) return k;
            k++;
        }

        return -1;
    }
}
