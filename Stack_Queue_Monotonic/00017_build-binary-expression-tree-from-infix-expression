https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression/description/

https://leetcode.ca/2020-04-14-1597-Build-Binary-Expression-Tree-From-Infix-Expression/



1597 - Build Binary Expression Tree From Infix Expression

1597. Build Binary Expression Tree From Infix Expression
A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators '+' (addition), '-' (subtraction), '*' (multiplication), and '/' (division).

For each internal node with operator o, the infix expression that it represents is (A o B), where A is the expression the left subtree represents and B is the expression the right subtree represents.

You are given a string s, an infix expression containing operands, the operators described above, and parentheses '(' and ')'.

Return the binary expression tree, which its in-order traversal reproduce s.

Please note that order of operations applies in s. That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.

 

Example 1:



Input: s = "2-3/(5*2)+1"
Output: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]
Example 2:



Input: s = "3*4-2*5"
Output: [-,*,*,3,4,2,5]
Example 3:

Input: s = "1+2+3+4+5"
Output: [+,+,5,+,4,null,null,+,3,null,null,1,2]
 

Constraints:

1 <= s.length <= 105
s consists of digits and the characters '+', '-', '*', '/', '(', and ')'.
Operands in s are exactly 1 digit.
It is guaranteed that s is a valid expression.




class Solution {
  public Node expTree(String s) {
    Deque<Node> nodes = new ArrayDeque<>();
    Deque<Character> ops = new ArrayDeque<>(); // [operators | parentheses]

    for (final char c : s.toCharArray())
      if (Character.isDigit(c)) {
        nodes.push(new Node(c));
      } else if (c == '(') {
        ops.push(c);
      } else if (c == ')') {
        while (ops.peek() != '(')
          nodes.push(buildNode(ops.pop(), nodes.pop(), nodes.pop()));
        ops.pop(); // Remove '('.
      } else {     // c == '+' || c == '-' || c == '*' || c == '/'
        while (!ops.isEmpty() && compare(ops.peek(), c))
          nodes.push(buildNode(ops.pop(), nodes.pop(), nodes.pop()));
        ops.push(c);
      }

    while (!ops.isEmpty())
      nodes.push(buildNode(ops.pop(), nodes.pop(), nodes.pop()));

    return nodes.peek();
  }

  private Node buildNode(char op, Node right, Node left) {
    return new Node(op, left, right);
  }

  // Returns true if op1 is a operator and priority(op1) >= priority(op2).
  boolean compare(char op1, char op2) {
    if (op1 == '(' || op1 == ')')
      return false;
    return op1 == '*' || op1 == '/' || op2 == '+' || op2 == '-';
  }
}


or


 public class Solution {

        Map<Character, Integer> prio = new HashMap<>();

        public Node expTree(String s) {

            prio.put('(', 1);
            prio.put('+', 2);
            prio.put('-', 2);
            prio.put('*', 3);
            prio.put('/', 3);

            Deque<Character> ops = new ArrayDeque<>();
            Deque<Node> stack = new ArrayDeque<>();

            for (int i = 0; i < s.length(); i++) {
                char ch = s.charAt(i);
                if (ch == '(') {
                    ops.push(ch);
                } else if (Character.isDigit(ch)) {
                    stack.push(new Node(ch));
                } else if (ch == ')') {
                    while (ops.peek() != '(') {
                        combine(ops, stack);
                    }
                    // pop left '('
                    ops.pop();
                } else {
                    // @note: must be >=, for test case "1+2+3+4+5"
                    while (!ops.isEmpty() && prio.get(ops.peek()) >= prio.get(ch)) {
                        combine(ops, stack);
                    }

                    ops.push(ch);
                }
            }

            while (stack.size() > 1) {
                combine(ops, stack);
            }

            return stack.peek();
        }

        private void combine(Deque<Character> ops, Deque<Node> stack) {
            Node root = new Node(ops.pop());
            // right first, then left
            root.right = stack.pop();
            root.left = stack.pop();

            stack.push(root);
        }
    }

    class Node {
        char val;
        Node left, right;

        public Node(char val) {
            this.val = val;
        }
    }


