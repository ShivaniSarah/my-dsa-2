https://leetcode.com/problems/max-chunks-to-make-sorted-ii/description/

768. Max Chunks To Make Sorted II
Hard
Topics
Companies
Hint
You are given an integer array arr.

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:

Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.
Example 2:

Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].
However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.
 

Constraints:

1 <= arr.length <= 2000
0 <= arr[i] <= 108


# java


class Solution {
    public int maxChunksToSorted(int[] arr) {
        Deque<Integer> stk = new ArrayDeque<>();
        for (int v : arr) {
            if (stk.isEmpty() || stk.peek() <= v) {
                stk.push(v);
            } else {
                int mx = stk.pop();
                while (!stk.isEmpty() && stk.peek() > v) {
                    stk.pop();
                }
                stk.push(mx);
            }
        }
        return stk.size();
    }
}


or



class Solution {
  public int maxChunksToSorted(int[] arr) {
    final int n = arr.length;
    int ans = 0;
    int[] maxL = new int[n]; // l[i] := max(arr[0..i])
    int[] minR = new int[n]; // r[i] := min(arr[i..n))

    for (int i = 0; i < n; ++i)
      maxL[i] = i == 0 ? arr[i] : Math.max(arr[i], maxL[i - 1]);

    for (int i = n - 1; i >= 0; --i)
      minR[i] = i == n - 1 ? arr[i] : Math.min(arr[i], minR[i + 1]);

    for (int i = 0; i + 1 < n; ++i)
      if (maxL[i] <= minR[i + 1])
        ++ans;

    return ans + 1;
  }
}


or


class Solution {
    public int maxChunksToSorted(int[] arr) {
        
        if(arr.length==0) return 0;
        int[] maxfromstart=new int[arr.length];
        int[] minfromlast=new int[arr.length];
         
        maxfromstart[0]=arr[0];
        for(int i=1;i<arr.length;i++){
            if(arr[i]>maxfromstart[i-1]){
                maxfromstart[i]=arr[i];
            }else{
                maxfromstart[i]=maxfromstart[i-1];
            }
        }
        
        minfromlast[arr.length-1]=arr[arr.length-1];
        for(int i=arr.length-2;i>=0;i--){
            if(arr[i]<minfromlast[i+1]){
                minfromlast[i]=arr[i];
            }else{
                minfromlast[i]=minfromlast[i+1];
            }
        }
        
        int chunk=1; 
        for(int i=0;i<arr.length-1;i++){
            if(maxfromstart[i]<=minfromlast[i+1]){
                chunk++;
            }
        }
        return chunk;
    }
}


or


class Solution {
    public int maxChunksToSorted(int[] arr) {
        Stack<Integer> a= new Stack<Integer>();

        for(int i=0;i<arr.length;i++)
        {
                int mx=arr[i];
            while(!a.isEmpty()&&arr[i]<a.peek())
            {
                mx= Math.max(mx,a.peek());
                a.pop();
            }

            a.push(mx);
        }
        return(a.size());
    }
}


or


// best

class Solution {
    // 0 ms. 100%
public int maxChunksToSorted(int[] arr) {
    int top = 0;
    for(int a: arr) {
        int max = a;
        while(top > 0 && arr[top - 1] > a) {
            max = Math.max(max, arr[--top]);
        }
        arr[top++] = max;
    }
    return top;
}
}

or


import java.util.*;

class Solution {
    public int maxChunksToSorted(int[] arr) {
        int n = arr.length;
        int[] sorted = arr.clone();
        Arrays.sort(sorted);
        
        Map<Integer, Deque<Integer>> indexes = new HashMap<>();
        for (int i = n - 1; i >= 0; --i) {
            indexes.computeIfAbsent(sorted[i], k -> new ArrayDeque<>()).add(i);
        }

        int result = 0;
        int r = 0;
        for (int l = 0; l < n; ++l) {
            int index = indexes.get(arr[l]).removeLast();
            r = Math.max(r, index);
            if (l == r) {
                result++;
                r = l + 1;
            }
        }

        return result;
    }
}


or



class Solution {
    public int maxChunksToSorted(int[] arr) {
        int[] sorted = arr.clone();
        Arrays.sort(sorted);

        Map<Integer, Integer> countMap = new HashMap<>();
        int chunks = 0;

        for (int i = 0; i < arr.length; ++i) {
            countMap.put(arr[i], countMap.getOrDefault(arr[i], 0) + 1);
            int freq = countMap.getOrDefault(sorted[i], 0) - 1;

            if (freq == 0) {
                countMap.remove(sorted[i]);
            } else {
                countMap.put(sorted[i], freq);
            }

            int currFreq = countMap.getOrDefault(arr[i], 0);
            if (currFreq == 0) {
                countMap.remove(arr[i]);
            } else {
                countMap.put(arr[i], currFreq);
            }

            if (countMap.isEmpty()) {
                chunks++;
            }
        }

        return chunks;
    }
}
