https://leetcode.com/problems/find-minimum-diameter-after-merging-two-trees/description/


3203. Find Minimum Diameter After Merging Two Trees
Hard
Topics
Companies
Hint
There exist two undirected trees with n and m nodes, numbered from 0 to n - 1 and from 0 to m - 1, respectively. You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively, where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.

You must connect one node from the first tree with another node from the second tree with an edge.

Return the minimum possible diameter of the resulting tree.

The diameter of a tree is the length of the longest path between any two nodes in the tree.

 

Example 1:

Input: edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]

Output: 3

Explanation:

We can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.

Example 2:


Input: edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]

Output: 5

Explanation:

We can obtain a tree of diameter 5 by connecting node 0 from the first tree with node 0 from the second tree.

 

Constraints:

1 <= n, m <= 105
edges1.length == n - 1
edges2.length == m - 1
edges1[i].length == edges2[i].length == 2
edges1[i] = [ai, bi]
0 <= ai, bi < n
edges2[i] = [ui, vi]
0 <= ui, vi < m
The input is generated such that edges1 and edges2 represent valid trees.


# java


class Solution {

    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        // Calculate the number of nodes for each tree
        int n = edges1.length + 1;
        int m = edges2.length + 1;

        // Build adjacency lists for both trees
        List<List<Integer>> adjList1 = buildAdjList(n, edges1);
        List<List<Integer>> adjList2 = buildAdjList(m, edges2);

        // Calculate the diameters of both trees
        int diameter1 = findDiameter(n, adjList1);
        int diameter2 = findDiameter(m, adjList2);

        // Calculate the longest path that spans across both trees
        int combinedDiameter =
            (int) Math.ceil(diameter1 / 2.0) +
            (int) Math.ceil(diameter2 / 2.0) +
            1;

        // Return the maximum of the three possibilities
        return Math.max(Math.max(diameter1, diameter2), combinedDiameter);
    }

    private List<List<Integer>> buildAdjList(int size, int[][] edges) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        return adjList;
    }

    private int findDiameter(int n, List<List<Integer>> adjList) {
        // First BFS to find the farthest node from an arbitrary node (e.g., 0)
        Pair firstBFS = findFarthestNode(n, adjList, 0);
        int farthestNode = firstBFS.getFirst();

        // Second BFS to find the diameter starting from the farthest node
        Pair secondBFS = findFarthestNode(n, adjList, farthestNode);
        return secondBFS.getSecond();
    }

    private Pair findFarthestNode(
        int n,
        List<List<Integer>> adjList,
        int sourceNode
    ) {
        Queue<Integer> queue = new LinkedList<>();
        boolean[] visited = new boolean[n];
        // Push source node into the queue
        queue.add(sourceNode);
        visited[sourceNode] = true;

        int maximumDistance = 0, farthestNode = sourceNode;

        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int currentNode = queue.poll();
                // Update farthest node
                // The farthest node is the last one that was popped out of the
                // queue.
                farthestNode = currentNode;

                // Explore neighbors
                for (int neighbor : adjList.get(currentNode)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.add(neighbor);
                    }
                }
            }
            if (!queue.isEmpty()) maximumDistance++;
        }
        return new Pair(farthestNode, maximumDistance);
    }

    // Simple Pair class for storing results of findFarthestNode function
    class Pair {

        private int first;
        private int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }

        public int getFirst() {
            return first;
        }

        public int getSecond() {
            return second;
        }
    }
}


or


class Solution {

    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        // Calculate the number of nodes for each tree (number of edges + 1)
        int n = edges1.length + 1;
        int m = edges2.length + 1;

        // Build adjacency lists for both trees
        List<List<Integer>> adjList1 = buildAdjList(n, edges1);
        List<List<Integer>> adjList2 = buildAdjList(m, edges2);

        // Calculate the diameter of both trees
        int diameter1 = findDiameter(adjList1, 0, -1).getFirst(); // Start DFS for Tree 1
        int diameter2 = findDiameter(adjList2, 0, -1).getFirst(); // Start DFS for Tree 2

        // Calculate the diameter of the combined tree
        int combinedDiameter =
            (int) Math.ceil(diameter1 / 2.0) +
            (int) Math.ceil(diameter2 / 2.0) +
            1;

        // Return the maximum diameter among the two trees and the combined tree
        return Math.max(Math.max(diameter1, diameter2), combinedDiameter);
    }

    // Helper function to build an adjacency list from an edge list
    private List<List<Integer>> buildAdjList(int size, int[][] edges) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        return adjList;
    }

    // Helper function to find the diameter of a tree
    // Returns the diameter and the depth of the node's subtree
    private Pair findDiameter(
        List<List<Integer>> adjList,
        int node,
        int parent
    ) {
        int maxDepth1 = 0, maxDepth2 = 0; // Tracks the two largest depths from the current node
        int diameter = 0; // Tracks the diameter of the subtree

        for (int neighbor : adjList.get(node)) {
            if (neighbor == parent) continue; // Skip the parent to avoid cycles

            // Recursively calculate the diameter and depth of the neighbor's subtree
            Pair result = findDiameter(adjList, neighbor, node);
            int childDiameter = result.getFirst();
            int depth = result.getSecond() + 1; // Increment depth to include edge to neighbor

            // Update the maximum diameter of the subtree
            diameter = Math.max(diameter, childDiameter);

            // Update the two largest depths from the current node
            if (depth > maxDepth1) {
                maxDepth2 = maxDepth1;
                maxDepth1 = depth;
            } else if (depth > maxDepth2) {
                maxDepth2 = depth;
            }
        }

        // Update the diameter to include the path through the current node
        diameter = Math.max(diameter, maxDepth1 + maxDepth2);

        // Return the diameter and the longest depth
        return new Pair(diameter, maxDepth1);
    }

    // Simple Pair class for storing results of the findDiameter function
    class Pair {

        private int first;
        private int second;

        public Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }

        public int getFirst() {
            return first;
        }

        public int getSecond() {
            return second;
        }
    }
}


or


class Solution {

    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        // Calculate the number of nodes for each tree (number of edges + 1)
        int n = edges1.length + 1;
        int m = edges2.length + 1;

        // Build adjacency lists for both trees
        List<List<Integer>> adjList1 = buildAdjList(n, edges1);
        List<List<Integer>> adjList2 = buildAdjList(m, edges2);

        // Calculate the diameter of both trees
        int diameter1 = findDiameter(n, adjList1);
        int diameter2 = findDiameter(m, adjList2);

        // Calculate the longest path that spans across both trees
        int combinedDiameter =
            (int) Math.ceil(diameter1 / 2.0) +
            (int) Math.ceil(diameter2 / 2.0) +
            1;

        // Return the maximum of the three possibilities
        return Math.max(Math.max(diameter1, diameter2), combinedDiameter);
    }

    // Function to build an adjacency list from an edge list
    private List<List<Integer>> buildAdjList(int size, int[][] edges) {
        List<List<Integer>> adjList = new ArrayList<>();
        for (int i = 0; i < size; i++) {
            adjList.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        return adjList;
    }

    // Function to find the diameter of a tree
    private int findDiameter(int n, List<List<Integer>> adjList) {
        Queue<Integer> leavesQueue = new LinkedList<>();
        int[] degrees = new int[n];

        // Initialize the degree of each node and add leaves (nodes with degree 1) to the queue
        for (int node = 0; node < n; node++) {
            degrees[node] = adjList.get(node).size();
            if (degrees[node] == 1) {
                leavesQueue.offer(node);
            }
        }

        int remainingNodes = n;
        int leavesLayersRemoved = 0;

        // Process the leaves until there are 2 or fewer nodes remaining
        while (remainingNodes > 2) {
            int size = leavesQueue.size();
            remainingNodes -= size;
            leavesLayersRemoved++;

            // Remove the leaves from the queue and update the degrees of their neighbors
            for (int i = 0; i < size; i++) {
                int currentNode = leavesQueue.poll();

                // Process the neighbors of the current leaf
                for (int neighbor : adjList.get(currentNode)) {
                    degrees[neighbor]--;
                    if (degrees[neighbor] == 1) {
                        leavesQueue.offer(neighbor);
                    }
                }
            }
        }

        // If exactly two nodes remain, return the diameter as twice the number of layers of leaves removed + 1
        if (remainingNodes == 2) return 2 * leavesLayersRemoved + 1;

        return 2 * leavesLayersRemoved;
    }
}

or


import java.util.*;

class Solution {
    private void build(List<List<Integer>> adj, int[][] edges) {
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }
    }

    private void get(int[] p, List<List<Integer>> adj, int node, int dis, boolean[] vis) {
        int d = p[1];
        vis[node] = true;
        if (dis > d) {
            p[0] = node;
            p[1] = dis;
        }
        for (int neighbor : adj.get(node)) {
            if (!vis[neighbor]) {
                get(p, adj, neighbor, dis + 1, vis);
            }
        }
    }

    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        int n = edges1.length + 1;
        int m = edges2.length + 1;
        List<List<Integer>> adj1 = new ArrayList<>();
        List<List<Integer>> adj2 = new ArrayList<>();
        for (int i = 0; i < n; i++) adj1.add(new ArrayList<>());
        for (int i = 0; i < m; i++) adj2.add(new ArrayList<>());

        build(adj1, edges1);
        build(adj2, edges2);

        int[] p1 = new int[]{-1, Integer.MIN_VALUE};
        boolean[] vis = new boolean[n];
        get(p1, adj1, 0, 0, vis);

        int[] p2 = new int[]{-1, Integer.MIN_VALUE};
        Arrays.fill(vis, false);
        get(p2, adj1, p1[0], 0, vis);
        int d1 = p2[1];

        p1 = new int[]{-1, Integer.MIN_VALUE};
        vis = new boolean[m];
        get(p1, adj2, 0, 0, vis);

        p2 = new int[]{-1, Integer.MIN_VALUE};
        Arrays.fill(vis, false);
        get(p2, adj2, p1[0], 0, vis);
        int d2 = p2[1];

        if (edges1.length == 0) d1 = 0;
        if (edges2.length == 0) d2 = 0;

        return Math.max(Math.max(d1, d2), (d1 + 1) / 2 + (d2 + 1) / 2 + 1);
    }
}

or


class Solution {
    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        int n = edges1.length + 1;
        int m = edges2.length + 1;
        List<List<Integer>> adj1 = new ArrayList<>();
        List<List<Integer>> adj2 = new ArrayList<>();
        for(int i = 0; i < n; i++) adj1.add(new ArrayList<>());
        for(int i = 0; i < m; i++) adj2.add(new ArrayList<>());

        // Create Adjacency Lists
        for(int[] i : edges1) {
            adj1.get(i[0]).add(i[1]);
            adj1.get(i[1]).add(i[0]);
        }
        for(int[] i : edges2) {
            adj2.get(i[0]).add(i[1]);
            adj2.get(i[1]).add(i[0]);
        }

        // Find Longest Diameter In Tree 1
        boolean[] vis1 = new boolean[n];
        int[] ans1 = fun(adj1, vis1, 0);
        vis1 = new boolean[n];
        ans1 = fun(adj1, vis1, ans1[0]);
        
        // Find Longest Diameter In Tree 2
        boolean[] vis2 = new boolean[m];
        int[] ans2 = fun(adj2, vis2, 0);
        vis2 = new boolean[m];
        ans2 = fun(adj2, vis2, ans2[0]);

        // Find Maximum Diameter Between Tree1 and Tree2
        int maxDiam = Math.max(ans1[1], ans2[1]);

        // Find Diameter In Combined Tree
        int combineMax = (ans1[1] + 1) / 2 + (ans2[1] + 1) / 2 + 1;

        // Return Maximum Of Both
        return Math.max(maxDiam, combineMax);
    }
    // Return {LastNode, Diameter}
    static int[] fun(List<List<Integer>> adj, boolean[] vis, int node) {
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        vis[node] = true;
        int len = 0;
        int last = node;
        while(!q.isEmpty()) {
            int size = q.size();
            len++;
            for(int i = 0; i < size; i++) {
                int temp = q.poll();
                last = temp;
                vis[temp] = true;
                for(int j : adj.get(temp)) {
                    if(!vis[j]) q.add(j);
                }
            }
        }
        return new int[]{last, len - 1};
    }
}

or


class Solution {
    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {
        int n = edges1.length + 1;
        int m = edges2.length + 1;

        List<List<Integer>> t2 = buildTree(m, edges2);
        int d2 = getDiameter(t2, m);

        List<List<Integer>> t1 = buildTree(n, edges1);
        int d1 = getDiameter(t1, n);

        return Math.max(d1, Math.max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));
    }

    private List<List<Integer>> buildTree(int size, int[][] edges) {
        List<List<Integer>> tree = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            tree.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            tree.get(edge[0]).add(edge[1]);
            tree.get(edge[1]).add(edge[0]);
        }
        return tree;
    }

    private int getDiameter(List<List<Integer>> tree, int n) {
        int[] firstDFS = dfs(tree, 0, -1);
        int[] secondDFS = dfs(tree, firstDFS[0], -1);
        return secondDFS[1];
    }

    private int[] dfs(List<List<Integer>> tree, int node, int parent) {
        int farthestNode = node;
        int maxDistance = 0;

        for (int neighbor : tree.get(node)) {
            if (neighbor == parent) continue;
            int[] result = dfs(tree, neighbor, node);
            if (result[1] + 1 > maxDistance) {
                maxDistance = result[1] + 1;
                farthestNode = result[0];
            }
        }

        return new int[]{farthestNode, maxDistance};
    }
}
