https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree/description/

1719. Number Of Ways To Reconstruct A Tree
Hard
Topics
Companies
Hint
You are given an array pairs, where pairs[i] = [xi, yi], and:

There are no duplicates.
xi < yi
Let ways be the number of rooted trees that satisfy the following conditions:

The tree consists of nodes whose values appeared in pairs.
A pair [xi, yi] exists in pairs if and only if xi is an ancestor of yi or yi is an ancestor of xi.
Note: the tree does not have to be a binary tree.
Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:

0 if ways == 0
1 if ways == 1
2 if ways > 1
A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.

 

Example 1:


Input: pairs = [[1,2],[2,3]]
Output: 1
Explanation: There is exactly one valid rooted tree, which is shown in the above figure.
Example 2:


Input: pairs = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.
Example 3:

Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
Output: 0
Explanation: There are no valid rooted trees.
 

Constraints:

1 <= pairs.length <= 105
1 <= xi < yi <= 500
The elements in pairs are unique.


# java

class Solution {
    public int checkWays(int[][] pairs) {
        boolean[][] g = new boolean[510][510];
        List<Integer>[] v = new List[510];
        Arrays.setAll(v, k -> new ArrayList<>());
        for (int[] p : pairs) {
            int x = p[0], y = p[1];
            g[x][y] = true;
            g[y][x] = true;
            v[x].add(y);
            v[y].add(x);
        }
        List<Integer> nodes = new ArrayList<>();
        for (int i = 0; i < 510; ++i) {
            if (!v[i].isEmpty()) {
                nodes.add(i);
                g[i][i] = true;
            }
        }
        nodes.sort(Comparator.comparingInt(a -> v[a].size()));
        boolean equal = false;
        int root = 0;
        for (int i = 0; i < nodes.size(); ++i) {
            int x = nodes.get(i);
            int j = i + 1;
            for (; j < nodes.size() && !g[x][nodes.get(j)]; ++j)
                ;
            if (j < nodes.size()) {
                int y = nodes.get(j);
                if (v[x].size() == v[y].size()) {
                    equal = true;
                }
                for (int z : v[x]) {
                    if (!g[y][z]) {
                        return 0;
                    }
                }
            } else {
                ++root;
            }
        }
        if (root > 1) {
            return 0;
        }
        return equal ? 2 : 1;
    }
}


or



class Solution {
    public int checkWays(int[][] pairs) {
        int result = 1;
        
        //Create adjacency list
        Map<Integer, Set<Integer>> edges = new HashMap<>();
        for (int[] pair: pairs) {
            edges.computeIfAbsent(pair[0], x->new HashSet<>()).add(pair[0]);
            edges.computeIfAbsent(pair[1], x->new HashSet<>()).add(pair[1]);
            edges.get(pair[0]).add(pair[1]);
            edges.get(pair[1]).add(pair[0]);
        }
        
        //Sort the edge lists based on their size
        List<Map.Entry<Integer, Set<Integer>>> edgesList = new ArrayList(edges.entrySet());
        Collections.sort(edgesList, (a,b)-> b.getValue().size() - a.getValue().size());
        
        List<Map.Entry<Integer, Set<Integer>>> previous = new ArrayList<>();
        
		// Now from each of the edges find the ways to create the tree
		for (Map.Entry<Integer, Set<Integer>> cur: edgesList) {
            //get the current edge set
			Set<Integer> currentSet = cur.getValue();
            //find the parent for the current set from the previously computed edge
			Map.Entry<Integer, Set<Integer>> parent = find(previous, currentSet);
            // if the parent is null
			if (parent==null) {
                // if you the current set do not match with the edges size then there is no way, return 0
				if (currentSet.size() != edges.size())
                    return 0;
            } else {
                Set<Integer> parentSet = parent.getValue();
                // if the current set do not contain everything from the parent then also return 0
				if (!parentSet.containsAll(currentSet)) return 0;
                // if the parent contains everything from the current set then return more than one ways
				if (parentSet.equals(currentSet)) result = 2;
            }
            // add the computed edge to previous list
            previous.add(cur);
        }
		
		// only one way
        return result;
    }
	
	Map.Entry<Integer, Set<Integer>> find(List<Map.Entry<Integer, Set<Integer>>> previous, Set<Integer> currentSet) {
        int i=previous.size()-1;
        while (i>=0) {
            Map.Entry<Integer, Set<Integer>> entry = previous.get(i--);
            if (currentSet.contains(entry.getKey())) return entry;
        }
        return null;
    }
}

or

// topo sort


class Solution {
    int n, reqFreq;
    boolean f;
    List<List<Integer>> adj;
    List<Integer> freq1;

    void getEdges(int[][] pairs) {
        Set<Integer> hashSet = new HashSet<>();
        freq1 = new ArrayList<>();

        for (int[] pair : pairs) {
            while (freq1.size() <= Math.max(pair[0], pair[1])) {
                freq1.add(0);
            }
            hashSet.add(pair[0]);
            hashSet.add(pair[1]);
            freq1.set(pair[0], freq1.get(pair[0]) + 1);
            freq1.set(pair[1], freq1.get(pair[1]) + 1);
        }

        reqFreq = hashSet.size() - 1;
        n = freq1.size();
        f = false;
        adj = new ArrayList<>(n);
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());

        for (int[] pair : pairs) {
            int a = pair[0], b = pair[1];
            if (freq1.get(a) >= freq1.get(b)) {
                if (freq1.get(a).equals(freq1.get(b))) f = true;
                adj.get(a).add(b);
            } else {
                adj.get(b).add(a);
            }
        }
    }

    public int checkWays(int[][] pairs) {
        getEdges(pairs);
        int[] freq2 = new int[n];
        for (int i = 0; i < n; i++) {
            for (int child : adj.get(i)) {
                freq2[child]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; i++) {
            if (freq2[i] == 0 && freq1.get(i) == reqFreq) {
                q.offer(i);
            }
        }

        while (!q.isEmpty()) {
            int size = q.size();
            int countFreq = 0;
            reqFreq = 0;

            while (size-- > 0) {
                int parent = q.poll();
                reqFreq += freq1.get(parent);
                for (int child : adj.get(parent)) {
                    freq2[child]--;
                    freq1.set(child, freq1.get(child) - 1);
                    if (freq2[child] == 0) {
                        countFreq += freq1.get(child) + 1;
                        q.offer(child);
                    }
                }
            }

            if (countFreq != reqFreq) return 0;
        }

        for (int val : freq2) {
            if (val != 0) return 0;
        }

        return f ? 2 : 1;
    }
}


or



class Solution {
    public int checkWays(int[][] pairs) {
        int[] cnts = new int[501];
        int[] par = new int[501];
        List<Integer>[] adj = new ArrayList[501];
        for (int i = 0; i < 501; i++) {
            adj[i] = new ArrayList<>();
        }

        for (int[] p : pairs) {
            cnts[p[0]]++;
            cnts[p[1]]++;
        }

        for (int[] p : pairs) {
            if (cnts[p[0]] < cnts[p[1]]) {
                adj[p[0]].add(p[1]);
            } else {
                adj[p[1]].add(p[0]);
            }
        }

        int res = 1;
        int root = 0;

        for (int i = 1; i <= 500; i++) {
            if (cnts[i] == 0) continue;

            adj[i].add(i);
            adj[i].sort((a, b) -> cnts[a] == cnts[b] ? Integer.compare(a, b) : Integer.compare(cnts[b], cnts[a]));

            for (int j = 1; j < adj[i].size(); j++) {
                int v = adj[i].get(j);
                if (cnts[v] == cnts[adj[i].get(j - 1)]) {
                    res = 2;
                }
                if (par[v] == 0) {
                    par[v] = adj[i].get(j - 1);
                } else if (par[v] != adj[i].get(j - 1)) {
                    return 0;
                }
            }

            if (root == 0) {
                root = adj[i].get(0);
            } else if (root != adj[i].get(0)) {
                return 0;
            }
        }

        return res;
    }
}


or


class Solution {
    public int checkWays(int[][] pairs) {
        boolean[][] edge = new boolean[501][501];
        BitSet[] ve = new BitSet[501];
        for (int i = 0; i < 501; i++) ve[i] = new BitSet(501);

        int[] cnt = new int[501];

        for (int[] p : pairs) {
            int u = p[0], v = p[1];
            cnt[u]++;
            cnt[v]++;
            ve[u].set(v);
            ve[v].set(u);
            edge[u][v] = edge[v][u] = true;
        }

        int nodes = 0;
        for (int i = 1; i <= 500; i++) {
            if (cnt[i] > 0) nodes++;
        }

        int maxCnt = 0;
        for (int c : cnt) maxCnt = Math.max(maxCnt, c);
        if (maxCnt != nodes - 1) return 0;

        boolean dbl = false, cant = false;

        for (int i = 1; i <= 500; i++) {
            if (cnt[i] == 0) continue;
            for (int j = i + 1; j <= 500; j++) {
                if (cnt[j] == 0 || !edge[i][j]) continue;

                BitSet A = (BitSet) ve[i].clone();
                BitSet B = (BitSet) ve[j].clone();
                A.clear(j);
                B.clear(i);

                BitSet union = (BitSet) A.clone(); union.or(B);

                if (A.equals(B)) {
                    dbl = true;
                } else if (!union.equals(A) && !union.equals(B)) {
                    cant = true;
                }
            }
        }

        if (cant) return 0;
        return dbl ? 2 : 1;
    }
}


or


class Solution {
    public int checkWays(int[][] pairs){
        int MAX = 501;
        Node[] map = new Node[MAX];
        Arrays.setAll(map, o -> new Node(o));
        for (int[] p : pairs){ // populate the map
            int u = p[0]-1;
            int v = p[1]-1;
            map[u].bit.set(u); map[u].bit.set(v);
            map[v].bit.set(u); map[v].bit.set(v);
        }
        int[] count = new int[MAX];
        for (int i = 0; i < MAX; i++){ // populate the count (becaues cardinality() uses bitCount() which takes more than 1 computation)
            count[map[i].idx]=map[i].bit.cardinality();
        }
        Arrays.sort(map, Comparator.comparingInt(o -> -count[o.idx]));
        int sz = 0;
        int ans = 1;
        while(!map[sz].bit.isEmpty()){
            sz++;
        }
        List<Node> prev = new ArrayList<>();
        for (int i = 0; i < sz; i++){
            Node parent = findParent(prev, map[i].bit); // find its parent
            if (parent == null && count[map[i].idx] != sz){ // if it is the root ...
                return 0;
            }
            if (parent != null){ // if not root, then we have to verify a few things.
                BitSet tmp = (BitSet)map[i].bit.clone();
                tmp.and(parent.bit);
                int m = tmp.cardinality();
                if (m!=count[map[i].idx]){ // 1. must be a subset of parent
                    return 0;
                }
                if (m==count[parent.idx]){ // 2. whether it is the same as parent
                    ans=2;
                }
            }
            prev.add(map[i]);
        }
        return ans;
    }

    private Node findParent(List<Node> prev, BitSet cur){
        for (int i = prev.size()-1; i>=0; i--){
            if (cur.get(prev.get(i).idx))
                return prev.get(i);
        }
        return null;
    }

    private class Node {
        BitSet bit = new BitSet();
        int idx;
        Node (int idx){
            this.idx=idx;
        }
    }
}
