https://leetcode.com/problems/maximum-number-of-k-divisible-components/description/

2872. Maximum Number of K-Divisible Components
Hard
Topics
Companies
Hint
There is an undirected tree with n nodes labeled from 0 to n - 1. You are given the integer n and a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

You are also given a 0-indexed integer array values of length n, where values[i] is the value associated with the ith node, and an integer k.

A valid split of the tree is obtained by removing any set of edges, possibly empty, from the tree such that the resulting components all have values that are divisible by k, where the value of a connected component is the sum of the values of its nodes.

Return the maximum number of components in any valid split.

 

Example 1:


Input: n = 5, edges = [[0,2],[1,2],[1,3],[2,4]], values = [1,8,1,4,4], k = 6
Output: 2
Explanation: We remove the edge connecting node 1 with 2. The resulting split is valid because:
- The value of the component containing nodes 1 and 3 is values[1] + values[3] = 12.
- The value of the component containing nodes 0, 2, and 4 is values[0] + values[2] + values[4] = 6.
It can be shown that no other valid split has more than 2 connected components.
Example 2:


Input: n = 7, edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]], values = [3,0,6,1,5,2,1], k = 3
Output: 3
Explanation: We remove the edge connecting node 0 with 2, and the edge connecting node 0 with 1. The resulting split is valid because:
- The value of the component containing node 0 is values[0] = 3.
- The value of the component containing nodes 2, 5, and 6 is values[2] + values[5] + values[6] = 9.
- The value of the component containing nodes 1, 3, and 4 is values[1] + values[3] + values[4] = 6.
It can be shown that no other valid split has more than 3 connected components.
 

Constraints:

1 <= n <= 3 * 104
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
values.length == n
0 <= values[i] <= 109
1 <= k <= 109
Sum of values is divisible by k.
The input is generated such that edges represents a valid tree.


# JAVA


class Solution {

    public int maxKDivisibleComponents(
        int n,
        int[][] edges,
        int[] values,
        int k
    ) {
        // Step 1: Create adjacency list from edges
        List<Integer>[] adjList = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adjList[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            int node1 = edge[0];
            int node2 = edge[1];
            adjList[node1].add(node2);
            adjList[node2].add(node1);
        }

        // Step 2: Initialize component count
        int[] componentCount = new int[1]; // Use array to pass by reference

        // Step 3: Start DFS traversal from node 0
        dfs(0, -1, adjList, values, k, componentCount);

        // Step 4: Return the total number of components
        return componentCount[0];
    }

    private int dfs(
        int currentNode,
        int parentNode,
        List<Integer>[] adjList,
        int[] nodeValues,
        int k,
        int[] componentCount
    ) {
        // Step 1: Initialize sum for the current subtree
        int sum = 0;

        // Step 2: Traverse all neighbors
        for (int neighborNode : adjList[currentNode]) {
            if (neighborNode != parentNode) {
                // Recursive call to process the subtree rooted at the neighbor
                sum += dfs(
                    neighborNode,
                    currentNode,
                    adjList,
                    nodeValues,
                    k,
                    componentCount
                );
                sum %= k; // Ensure the sum stays within bounds
            }
        }

        // Step 3: Add the value of the current node to the sum
        sum += nodeValues[currentNode];
        sum %= k;

        // Step 4: Check if the sum is divisible by k
        if (sum == 0) {
            componentCount[0]++;
        }

        // Step 5: Return the computed sum for the current subtree
        return sum;
    }
}


or


class Solution {

    public int maxKDivisibleComponents(
        int n,
        int[][] edges,
        int[] values,
        int k
    ) {
        // Base case: if there are less than 2 nodes, return 1
        if (n < 2) return 1;

        int componentCount = 0;
        Map<Integer, Set<Integer>> graph = new HashMap<>();

        // Step 1: Build the graph
        for (int[] edge : edges) {
            int node1 = edge[0], node2 = edge[1];
            graph.computeIfAbsent(node1, key -> new HashSet<>()).add(node2);
            graph.computeIfAbsent(node2, key -> new HashSet<>()).add(node1);
        }

        // Convert values to long to prevent overflow
        long[] longValues = new long[values.length];
        for (int i = 0; i < values.length; i++) {
            longValues[i] = values[i];
        }

        // Step 2: Initialize the BFS queue with leaf nodes
        // (nodes with only one connection)
        Queue<Integer> queue = new LinkedList<>();
        for (Map.Entry<Integer, Set<Integer>> entry : graph.entrySet()) {
            if (entry.getValue().size() == 1) {
                queue.add(entry.getKey());
            }
        }

        // Step 3: Process nodes in BFS order
        while (!queue.isEmpty()) {
            int currentNode = queue.poll();

            // Find the neighbor node
            int neighborNode = -1;
            if (
                !graph.get(currentNode).isEmpty()
            ) {
                neighborNode = graph.get(currentNode).iterator().next();
            }

            if (neighborNode >= 0) {
                // Remove the edge between current and neighbor
                graph.get(neighborNode).remove(currentNode);
                graph.get(currentNode).remove(neighborNode);
            }

            // Check divisibility of the current node's value
            if (longValues[currentNode] % k == 0) {
                componentCount++;
            } else if (neighborNode >= 0) {
                // Add current node's value to the neighbor
                longValues[neighborNode] += longValues[currentNode];
            }

            // If the neighbor becomes a leaf node, add it to the queue
            if (
                neighborNode >= 0 &&
                graph.get(neighborNode).size() == 1
            ) {
                queue.add(neighborNode);
            }
        }

        return componentCount;
    }
}


or



class Solution {

    public int maxKDivisibleComponents(
        int n,
        int[][] edges,
        int[] values,
        int k
    ) {
        if (n < 2) return 1; // Handle the base case where the graph has fewer than 2 nodes.

        int componentCount = 0;
        List<List<Integer>> graph = new ArrayList<>();
        int[] inDegree = new int[n];

        // Build the graph and calculate in-degrees
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>()); // Initialize the adjacency list for each node.
        }
        for (int[] edge : edges) {
            int node1 = edge[0], node2 = edge[1];
            graph.get(node1).add(node2);
            graph.get(node2).add(node1);
            inDegree[node1]++;
            inDegree[node2]++;
        }

        // Convert values to long to prevent overflow
        long[] longValues = new long[n];
        for (int i = 0; i < n; i++) {
            longValues[i] = values[i];
        }

        // Initialize the queue with nodes having in-degree of 1 (leaf nodes)
        Queue<Integer> queue = new LinkedList<>();
        for (int node = 0; node < n; node++) {
            if (inDegree[node] == 1) {
                queue.offer(node);
            }
        }

        while (!queue.isEmpty()) {
            int currentNode = queue.poll();
            inDegree[currentNode]--;

            long addValue = 0;

            // Check if the current node's value is divisible by k
            if (longValues[currentNode] % k == 0) {
                componentCount++;
            } else {
                addValue = longValues[currentNode];
            }

            // Propagate the value to the neighbor nodes
            for (int neighborNode : graph.get(currentNode)) {
                if (inDegree[neighborNode] == 0) {
                    continue;
                }

                inDegree[neighborNode]--;
                longValues[neighborNode] += addValue;

                // If the neighbor node's in-degree becomes 1, add it to the queue
                if (inDegree[neighborNode] == 1) {
                    queue.offer(neighborNode);
                }
            }
        }

        return componentCount;
    }
}


or



class Solution {
    private Map<Integer, List<Integer>> adj;
    private Set<Integer> visited;
    private int comp;

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        adj = new HashMap<>();
        visited = new HashSet<>();
        comp = 0;

        int src = 0;

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.computeIfAbsent(u, k1 -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k1 -> new ArrayList<>()).add(u);
        }

        dfs(src, values, k);
        return comp;
    }

    private int dfs(int root, int[] values, int k) {
        if (visited.contains(root)) {
            return 0;
        }

        visited.add(root);
        int ans = values[root];

        for (int neigh : adj.getOrDefault(root, Collections.emptyList())) {
            ans += dfs(neigh, values, k);
        }

        if (ans % k == 0) {
            comp++;
            return 0;
        }

        return ans % k;
    }
}


or


import java.util.*;

class Solution {
    private Map<Integer, List<Integer>> adj;
    private int comp;

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        adj = new HashMap<>();
        comp = 0;

        int src = 0;

        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj.computeIfAbsent(u, k1 -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k1 -> new ArrayList<>()).add(u);
        }

        dfs(src, -1, values, k);
        return comp;
    }

    private int dfs(int root, int parent, int[] values, int k) {
        int ans = values[root];

        for (int neigh : adj.getOrDefault(root, Collections.emptyList())) {
            if (parent != neigh) {
                ans += dfs(neigh, root, values, k);
            }
        }

        if (ans % k == 0) {
            comp++;
            return 0;
        }

        return ans % k;
    }
}


or


// topo sort

class Solution {
    public int maxKDivisibleComponents(int n, int[][] edges, int[] vals, int k) {
        if (n < 2) return 1;
        
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < n; i++) graph.add(new ArrayList<>());
        int[] degree = new int[n];
        
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
            degree[edge[0]]++;
            degree[edge[1]]++;
        }
        
        long[] nodeVals = new long[n];
        for (int i = 0; i < n; i++) nodeVals[i] = vals[i];
        Queue<Integer> leafQ = new LinkedList<>();
        for (int i = 0; i < n; i++) if (degree[i] == 1) leafQ.add(i);
        
        int compCnt = 0;
        while (!leafQ.isEmpty()) {
            int curr = leafQ.poll();
            degree[curr]--;
            long carry = 0;
            
            if (nodeVals[curr] % k == 0) compCnt++;
            else carry = nodeVals[curr];
            
            for (int nbr : graph.get(curr)) {
                if (degree[nbr] == 0) continue;
                degree[nbr]--;
                nodeVals[nbr] += carry;
                if (degree[nbr] == 1) leafQ.add(nbr);
            }
        }
        
        return compCnt;
    }
}

or



import java.util.*;

class Solution {
    private long cnt = 0;

    private void getSubtree(int node, List<List<Integer>> adj, int parent, long[] subtree) {
        if (adj.get(node).size() == 1 && adj.get(node).get(0) == parent) return;
        for (int neighbor : adj.get(node)) {
            if (neighbor != parent) {
                getSubtree(neighbor, adj, node, subtree);
                subtree[node] += subtree[neighbor];
            }
        }
    }

    private void dfs(int node, List<List<Integer>> adj, int parent, long[] subtree, int k) {
        if (adj.get(node).size() == 1 && adj.get(node).get(0) == parent) return;
        for (int neighbor : adj.get(node)) {
            if (neighbor != parent) {
                long parSubtree = subtree[node] - subtree[neighbor];
                long childSubtree = subtree[neighbor];
                if (parSubtree % k == 0 && childSubtree % k == 0) {
                    cnt++;
                    subtree[node] -= subtree[neighbor];
                } else {
                    subtree[neighbor] = subtree[node];
                }
                dfs(neighbor, adj, node, subtree, k);
            }
        }
    }

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) adj.add(new ArrayList<>());

        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        long[] subtree = new long[n];
        for (int i = 0; i < n; i++) subtree[i] = values[i];

        getSubtree(0, adj, -1, subtree);
        dfs(0, adj, -1, subtree, k);

        return (int) (cnt + 1);
    }
}

or



class Solution {
    int count; // Global variable to keep track of the number of k-divisible components

    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        // Prepare adjacency list to represent the graph
        ArrayList[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }

        count = 0; // Initialize the count of k-divisible components to 0

        // Build the adjacency list from the edges
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            adj[u].add(v); // Add v to u's adjacency list
            adj[v].add(u); // Add u to v's adjacency list (since the graph is undirected)
        }

        // Start DFS traversal from node 0 with -1 as the parent (no parent for the root)
        sol(0, -1, adj, values, k);

        // Return the total number of k-divisible components found
        return count;
    }

    // Helper method for DFS traversal
    private int sol(int curr, int prev, ArrayList<Integer>[] adj, int[] values, int k) {
        int sum = 0; // Initialize the sum of values for the current subtree

        // Iterate over all adjacent nodes of the current node
        for (int v : adj[curr]) {
            if (v == prev) continue; // Skip the parent node to avoid revisiting it
            sum += sol(v, curr, adj, values, k); // Recursive call to process the subtree rooted at v
        }

        sum += values[curr]; // Add the value of the current node to the sum

        sum = sum % k; // Reduce the sum modulo k

        // If the sum modulo k is 0, we found a k-divisible component
        if (sum == 0) {
            count++; // Increment the count of k-divisible components
        }

        // Return the sum of the subtree to the parent node
        return sum;
    }
}
