https://leetcode.com/problems/count-ways-to-build-rooms-in-an-ant-colony/description/



1916. Count Ways to Build Rooms in an Ant Colony
Hard
Topics
Companies
Hint
You are an ant tasked with adding n new rooms numbered 0 to n-1 to your colony. You are given the expansion plan as a 0-indexed integer array of length n, prevRoom, where prevRoom[i] indicates that you must build room prevRoom[i] before building room i, and these two rooms must be connected directly. Room 0 is already built, so prevRoom[0] = -1. The expansion plan is given such that once all the rooms are built, every room will be reachable from room 0.

You can only build one room at a time, and you can travel freely between rooms you have already built only if they are connected. You can choose to build any room as long as its previous room is already built.

Return the number of different orders you can build all the rooms in. Since the answer may be large, return it modulo 109 + 7.

 

Example 1:


Input: prevRoom = [-1,0,1]
Output: 1
Explanation: There is only one way to build the additional rooms: 0 → 1 → 2
Example 2:


Input: prevRoom = [-1,0,0,1,2]
Output: 6
Explanation:
The 6 ways are:
0 → 1 → 3 → 2 → 4
0 → 2 → 4 → 1 → 3
0 → 1 → 2 → 3 → 4
0 → 1 → 2 → 4 → 3
0 → 2 → 1 → 3 → 4
0 → 2 → 1 → 4 → 3
 

Constraints:

n == prevRoom.length
2 <= n <= 105
prevRoom[0] == -1
0 <= prevRoom[i] < n for all 1 <= i < n
Every room is reachable from room 0 once all the rooms are built.


# java


class Solution {
    static final int MODULO = 1000000007;

    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        int[] degree = new int[n];
        for (int i = 0; i < n; i++) {
            if (prevRoom[i] >= 0)
                degree[prevRoom[i]]++;
        }
        int[] fac = new int[n + 1];
        Arrays.fill(fac, 1);
        int[] inv = new int[n + 1];
        Arrays.fill(inv, 1);
        for (int i = 2; i <= n; i++)
            fac[i] = (int) ((long) i * fac[i - 1] % MODULO);
        for (int i = 2; i <= n; i++)
            inv[i] = (int) power(fac[i], MODULO - 2);
        Queue<Integer> queue = new LinkedList<Integer>();
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        for (int i = 0; i < n; i++) {
            if (degree[i] == 0)
                queue.offer(i);
        }
        int[] sizes = new int[n];
        Arrays.fill(sizes, 1);
        while (!queue.isEmpty()) {
            int u = queue.poll();
            dp[u] = (int) ((long) dp[u] * fac[sizes[u] - 1] % MODULO);
            int v = prevRoom[u];
            if (v < 0)
                continue;
            sizes[v] += sizes[u];
            if (--degree[v] == 0)
                queue.offer(v);
            dp[v] = (int) ((long) dp[v] * inv[sizes[u]] % MODULO * dp[u] % MODULO);
        }
        return dp[0];
    }

    public long power(long x, int n) {
        long pow = 1;
        for (int i = n; i != 0; i /= 2) {
            if (i % 2 == 1)
                pow = pow * x % MODULO;
            x = x * x % MODULO;
        }
        return pow;
    }
}


or


import java.math.BigInteger;
import java.util.*;

public class Solution {
    private static final int p = 1_000_000_007;
    private static final BigInteger bigP = BigInteger.valueOf(p);


    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        List<Integer>[] children = new List[n];
        for (int i = 1; i < n; i++) {
            int father = prevRoom[i];
            if (children[father] == null) children[father] = new LinkedList<>();
            children[father].add(i);
        }

        int[] factors = new int[n];
        int[] inverses = new int[n];
        int[] reverseFactors = new int[n];
        factors[0] = 1;
        reverseFactors[0] = 1;
        for (int i = 1; i < n; i++) {
            factors[i] = (int) (factors[i - 1] * (long) i % p);
            inverses[i] = BigInteger.valueOf(i).modInverse(bigP).intValue();
            reverseFactors[i] = (int) (reverseFactors[i - 1] * (long) inverses[i] % p);
        }

        int[] size = new int[n];
        Arrays.fill(size, 1);
        long[] dp = new long[n];
        Arrays.fill(dp, -1);
        Deque<Integer> queue = new ArrayDeque<>();
        queue.addLast(0);
        while (!queue.isEmpty()) {
            Integer peek = queue.peekLast();
            if (dp[peek] == -1) {
                dp[peek] = 1;
                if (children[peek] != null) {
                    for (Integer child : children[peek]) {
                        queue.addLast(child);
                    }
                }
            } else {
                queue.pollLast();
                if (children[peek] != null) {
                    for (Integer child : children[peek]) {
                        size[peek] += size[child];
                        dp[peek] = dp[peek] * dp[child] % p * reverseFactors[size[child]] % p;
                    }
                    dp[peek] = dp[peek] * factors[size[peek] - 1] % p;
                }
            }
        }
        return (int) dp[0];
    }
}


or



class Solution {
    static final int MOD = 1_000_000_007;
    List<Integer>[] graph;
    long[] fact;
    long[] invFact;

    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        graph = new ArrayList[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        for (int i = 1; i < n; i++) graph[prevRoom[i]].add(i);

        precomputeFactorials(n);

        return (int) dfs(0)[0];
    }

    // Returns [ways, subtree size]
    private long[] dfs(int node) {
        long ways = 1;
        int size = 0;

        for (int child : graph[node]) {
            long[] res = dfs(child);
            long childWays = res[0];
            int childSize = (int) res[1];

            ways = ways * childWays % MOD;
            ways = ways * comb(size + childSize, childSize) % MOD;

            size += childSize;
        }

        return new long[]{ways, size + 1};
    }

    private void precomputeFactorials(int n) {
        fact = new long[n + 1];
        invFact = new long[n + 1];

        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i % MOD;
        }

        invFact[n] = modInverse(fact[n]);
        for (int i = n - 1; i >= 0; i--) {
            invFact[i] = invFact[i + 1] * (i + 1) % MOD;
        }
    }

    private long comb(int n, int k) {
        if (k < 0 || k > n) return 0;
        return fact[n] * invFact[k] % MOD * invFact[n - k] % MOD;
    }

    private long modInverse(long x) {
        return pow(x, MOD - 2);
    }

    private long pow(long x, long y) {
        long res = 1;
        while (y > 0) {
            if ((y & 1) == 1) res = res * x % MOD;
            x = x * x % MOD;
            y >>= 1;
        }
        return res;
    }
}


or


// beat


class Solution {
    public static final int MOD = (int)1e9 + 7;
    public int waysToBuildRooms(int[] prevRoom) {
        /*
        can view the rooms as a tree with 0 as the root.
        An order of building the rooms is represented by the order in which new nodes of the tree are traversed when going in a special way.
        Always start with the root node of the tree as build always starts with 0.
        From here, can go to any of the root nodes immediate children (i.e. any with prevRoom[i] = 0)
        
        Assume the root node as children c_1 - c_k. 
        If we want to calculate the travsersals/build orders if we first build c_i, observe what can do. 

        Obviously, can treat c_i as new root to it's own subtree and compute it's different traversal orders as a subproblem i.e. dp. 
        However, at any point can also return to start/build diffeernet child paths in c_1 - c_k of original tree.

        Let dp[i] be the ways to build all the rooms in the i-rooted subtree.
        
        Since we can branch and switch between child paths at any time, we can "interlace" different child paths. 

        So each child of i has dp[child[i]] orders for their own subtree, each of which we can combine with the other child orders, to get a product of all child
        orders. Additionally, these child orders can be interlaced in various ways. i.e. child1Tree, child2Tree, child1Tree -> child1Tree, child1Tree, child2Tree or 
        child2Tree, child1Tree, child1Tree are all valid if in tree orderings are valid as both trees should be disjoint. 

        Thus in addition to the combination of orders for dp[i] = product(dp[child[i]]) need to choose ways to interlace.
        know that ith (root) wiill always come first and there will be sz[i]-1 nodes in remaingin tree.
        Therefore sum(sz[child[i]]) for all children of i = sz[i]-1, or there are sz[i]-1 total descendants of ith node.

        Instead of interlacing all at once, we can set up arbitrary indices 1 - (sz[i]-1) where we we choose sz[child] of these indices for the subtree
        rooted at some direct descendant "child" of i to occupy. This gives ((sz[i]-1) choose sz[child]) seleections. 
        Then for the next child, "child2" of i, those indices have already been chosen so only have sz[i]-sz[child1]-1 indices to choose from so there are 
        ((sz[i]-sz[child]-1) choose sz[child2]) selections. This continues for all children until the last where we get 
        sz[child_k] choose sz[child_k] or 1 selection as it must take all not yet selected indices. 

        This means number of interlacings of any set of orderigns of children of tree rooted at i = 
        product((sz[i] - 1 - (sum(child_j) j = 1 to k-1) choose child_k) from k = 1 to s, where s is number of children of i. 
        Let this product = interlace. 

        then dp[i] = product(dp[child] for all children) * interlace.

        this interlace product is also just a multinomial coefficient (sz[i] - 1 choose (sz[child1], sz[child2], ... sz[childk])) = 
        could use the product of binomials for this or could use def = (sz[i]-1)! / (sz[child1]! * sz[child2]! * ...sz[childk]!)

        since am computing answer modulo, would use mod inverse not div, and since sizes are bounded up to n, can just precompute all 
        factorials and mod inv factorials, then compute 
        interlace = (sz[i]-1)! * invFact[sz[child1]] * ... invFact[sz[childk]]

        base case is for leaf nodes with no children, these obviously have one ordering of just themselves. 

        */
        int n = prevRoom.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1); //since all dp relations are products, fill with multiplicative identity to start with for convenience
        int[] sz = new int[n];
        Arrays.fill(sz, 1); //also all sizes default are 1 as has at least their own node.

        long[] factorial = new long[n];
        long[] invFactorial = new long[n];
        factorial[0] = 1;
        for(int i = 1; i < n; i++) {
            factorial[i] = (factorial[i-1]*i) % MOD;
        }
        invFactorial[n-1] = modExp(factorial[n-1], MOD-2);
        for(int i = n-1; i > 0; i--) {
            invFactorial[i-1] = (invFactorial[i] * i) % MOD; 
        }

        int[] childCnt = new int[n];
        int leaves = n;
        for(int i = 1; i < n; i++) {
            if(++childCnt[prevRoom[i]] == 1) leaves--;
        }

        int[] topoQueue = new int[leaves];
        int queueRight = 0, queueLeft = 0;
        for(int i = 0; i < n; i++) {
            if(childCnt[i] == 0) {
                topoQueue[queueRight++] = i; //leaf nodes are base case with answers = 1 and should be processed first in topological order.
            }
        }
        queueRight = 0;
        
        while(topoQueue[queueLeft] != 0) {
            int curr = topoQueue[queueLeft], parent = prevRoom[curr];
            queueLeft = (queueLeft + 1) % leaves; 

            dp[parent] = (dp[parent] * dp[curr]) % MOD;
            dp[parent] = (dp[parent] * invFactorial[sz[curr]]) % MOD;
            sz[parent] += sz[curr];
            if(--childCnt[parent] == 0) { //if processed all children, then finish dp calc and queue for topo processing
                dp[parent] = (dp[parent] * factorial[sz[parent]-1]) % MOD;
                topoQueue[queueRight] = parent;
                queueRight = (queueRight + 1) % leaves;
            }
        }

        return (int)dp[0];
    }


    private int modExp(long base, int exp) {
        long mult = base, res = 1;
        while(exp > 0) {
            if((exp & 1) == 1) res = (res * mult) % MOD;
            mult = (mult * mult) % MOD;
            exp >>= 1;
        }
        return (int)res;
    }

    
}


or

class Solution {
    int M = (int)1e9+7;
    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        long[] fact = new long[n];
        long[] invFact = new long[n];
        long[] inv = new long[n];
        fact[1]=fact[0]=invFact[0]=invFact[1]=inv[1]=1;
        for (int i = 2; i < n; i++){ // modInverse 
            fact[i] = fact[i-1]*i%M;
            inv[i] = M-M/i*inv[M%i]%M;
            invFact[i] = invFact[i-1]*inv[i]%M;
        }

        Map<Integer, List<Integer>> map = new HashMap<>();
        for (int i = 0; i < n; i++){ // add an edge from parent to child
            map.computeIfAbsent(prevRoom[i], o -> new ArrayList<>()).add(i);
        }

        long[] ans = new long[]{1};
        solve(0, fact, invFact, map, ans);
        return (int)ans[0];
    }

    private int solve(int i, long[] fact, long[] invFact, Map<Integer, List<Integer>> map, long[] ans){
        int sum = 0;
        for (int next : map.getOrDefault(i, List.of())){
            int cur = solve(next, fact, invFact, map, ans);
            ans[0] = ans[0] * invFact[cur] % M; // divide fact[cur] -> multiply invFact[cur]
            sum += cur;
        }
        ans[0] = ans[0] * fact[sum] % M;
        return sum+1;
    }
}


or


class Solution {
    int M = (int)1e9+7;
    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        long[] fact = new long[n];
        long[] invFact = new long[n];
        long[] inv = new long[n];
        fact[1]=fact[0]=invFact[0]=invFact[1]=inv[1]=1;
        for (int i = 2; i < n; i++){ // mod inverse
            fact[i] = fact[i-1]*i%M;
            inv[i] = M-M/i*inv[M%i]%M;
            invFact[i] = invFact[i-1]*inv[i]%M;
        }

        Node[] nodes = new Node[n];
        int[] ind = new int[n];
        for (int i = 0; i < n; i++){ // count ind
            nodes[i]=new Node(i);
            if (i>0){
                ind[prevRoom[i]]++;
            }
        }

        Queue<Node> queue = new ArrayDeque<>();
        for (int i = 0; i < n; i++){ // enqueue leaves node
            if (ind[i]==0){
                queue.offer(nodes[i]);
            }
        }

        long ans = 1;
        while(!queue.isEmpty()){ // top sort
            Node cur = queue.poll();
            ans = ans * fact[cur.sum] % M;
            for (int count : cur.childCount){
                ans = ans * invFact[count] % M;
            }
            if (cur.idx!=0){
                Node parent = nodes[prevRoom[cur.idx]];
                parent.sum += cur.sum+1;
                parent.childCount.add(cur.sum+1);
                if (--ind[prevRoom[cur.idx]]==0){
                    queue.offer(parent);
                }
            }
        }

        return (int)ans;
    }

    private class Node {
        List<Integer> childCount = new ArrayList<>();
        int sum = 0;
        int idx;
        Node(int idx){
            this.idx = idx;
        }
    }
}

or


import java.util.*;

class Solution {
    private static final int MOD = 1_000_000_007;
    private List<Integer>[] tree;
    private long[] factorial;
    private long[] invFactorial;
    
    public int waysToBuildRooms(int[] prevRoom) {
        int n = prevRoom.length;
        tree = new List[n];
        for (int i = 0; i < n; i++) {
            tree[i] = new ArrayList<>();
        }
        for (int i = 1; i < n; i++) {
            tree[prevRoom[i]].add(i);
        }

        factorial = new long[n + 1];
        invFactorial = new long[n + 1];
        preprocessFactorials(n);
        
        return (int) dfs(0)[1];
    }

    private void preprocessFactorials(int n) {
        factorial[0] = 1;
        for (int i = 1; i <= n; i++) {
            factorial[i] = factorial[i - 1] * i % MOD;
        }
        invFactorial[n] = modInverse(factorial[n]);
        for (int i = n - 1; i >= 0; i--) {
            invFactorial[i] = invFactorial[i + 1] * (i + 1) % MOD;
        }
    }

    private long modInverse(long x) {
        return power(x, MOD - 2);
    }

    private long power(long x, int y) {
        long result = 1;
        while (y > 0) {
            if (y % 2 != 0) {
                result = result * x % MOD;
            }
            x = x * x % MOD;
            y /= 2;
        }
        return result;
    }

    private long[] dfs(int node) {
        long ways = 1;
        int size = 0;
        for (int child : tree[node]) {
            long[] res = dfs(child);
            ways = ways * res[1] % MOD * invFactorial[(int) res[0]] % MOD;
            size += res[0];
        }
        ways = ways * factorial[size] % MOD;
        return new long[]{size + 1, ways};
    }
}


or


class Solution {
    public static final int MOD = (int)1e9 + 7;
    public int waysToBuildRooms(int[] prevRoom) {
        /*
        can view the rooms as a tree with 0 as the root.
        An order of building the rooms is represented by the order in which new nodes of the tree are traversed when going in a special way.
        Always start with the root node of the tree as build always starts with 0.
        From here, can go to any of the root nodes immediate children (i.e. any with prevRoom[i] = 0)
        
        Assume the root node as children c_1 - c_k. 
        If we want to calculate the travsersals/build orders if we first build c_i, observe what can do. 

        Obviously, can treat c_i as new root to it's own subtree and compute it's different traversal orders as a subproblem i.e. dp. 
        However, at any point can also return to start/build diffeernet child paths in c_1 - c_k of original tree.

        Let dp[i] be the ways to build all the rooms in the i-rooted subtree.
        
        Since we can branch and switch between child paths at any time, we can "interlace" different child paths. 

        So each child of i has dp[child[i]] orders for their own subtree, each of which we can combine with the other child orders, to get a product of all child
        orders. Additionally, these child orders can be interlaced in various ways. i.e. child1Tree, child2Tree, child1Tree -> child1Tree, child1Tree, child2Tree or 
        child2Tree, child1Tree, child1Tree are all valid if in tree orderings are valid as both trees should be disjoint. 

        Thus in addition to the combination of orders for dp[i] = product(dp[child[i]]) need to choose ways to interlace.
        know that ith (root) wiill always come first and there will be sz[i]-1 nodes in remaingin tree.
        Therefore sum(sz[child[i]]) for all children of i = sz[i]-1, or there are sz[i]-1 total descendants of ith node.

        Instead of interlacing all at once, we can set up arbitrary indices 1 - (sz[i]-1) where we we choose sz[child] of these indices for the subtree
        rooted at some direct descendant "child" of i to occupy. This gives ((sz[i]-1) choose sz[child]) seleections. 
        Then for the next child, "child2" of i, those indices have already been chosen so only have sz[i]-sz[child1]-1 indices to choose from so there are 
        ((sz[i]-sz[child]-1) choose sz[child2]) selections. This continues for all children until the last where we get 
        sz[child_k] choose sz[child_k] or 1 selection as it must take all not yet selected indices. 

        This means number of interlacings of any set of orderigns of children of tree rooted at i = 
        product((sz[i] - 1 - (sum(child_j) j = 1 to k-1) choose child_k) from k = 1 to s, where s is number of children of i. 
        Let this product = interlace. 

        then dp[i] = product(dp[child] for all children) * interlace.

        this interlace product is also just a multinomial coefficient (sz[i] - 1 choose (sz[child1], sz[child2], ... sz[childk])) = 
        could use the product of binomials for this or could use def = (sz[i]-1)! / (sz[child1]! * sz[child2]! * ...sz[childk]!)

        since am computing answer modulo, would use mod inverse not div, and since sizes are bounded up to n, can just precompute all 
        factorials and mod inv factorials, then compute 
        interlace = (sz[i]-1)! * invFact[sz[child1]] * ... invFact[sz[childk]]

        base case is for leaf nodes with no children, these obviously have one ordering of just themselves. 

        */
        int n = prevRoom.length;
        long[] dp = new long[n];
        Arrays.fill(dp, 1); //since all dp relations are products, fill with multiplicative identity to start with for convenience
        int[] sz = new int[n];
        Arrays.fill(sz, 1); //also all sizes default are 1 as has at least their own node.

        long[] factorial = new long[n];
        long[] invFactorial = new long[n];
        factorial[0] = 1;
        for(int i = 1; i < n; i++) {
            factorial[i] = (factorial[i-1]*i) % MOD;
        }
        invFactorial[n-1] = modExp(factorial[n-1], MOD-2);
        for(int i = n-1; i > 0; i--) {
            invFactorial[i-1] = (invFactorial[i] * i) % MOD; 
        }

        int[] childCnt = new int[n];
        int leaves = n;
        for(int i = 1; i < n; i++) {
            if(++childCnt[prevRoom[i]] == 1) leaves--;
        }

        int[] topoQueue = new int[leaves];
        int queueRight = 0, queueLeft = 0;
        for(int i = 0; i < n; i++) {
            if(childCnt[i] == 0) {
                topoQueue[queueRight++] = i; //leaf nodes are base case with answers = 1 and should be processed first in topological order.
            }
        }
        queueRight = 0;
        
        while(topoQueue[queueLeft] != 0) {
            int curr = topoQueue[queueLeft], parent = prevRoom[curr];
            queueLeft = (queueLeft + 1) % leaves; 

            dp[parent] = (dp[parent] * dp[curr]) % MOD;
            dp[parent] = (dp[parent] * invFactorial[sz[curr]]) % MOD;
            sz[parent] += sz[curr];
            if(--childCnt[parent] == 0) { //if processed all children, then finish dp calc and queue for topo processing
                dp[parent] = (dp[parent] * factorial[sz[parent]-1]) % MOD;
                topoQueue[queueRight] = parent;
                queueRight = (queueRight + 1) % leaves;
            }
        }

        return (int)dp[0];
    }


    private int modExp(long base, int exp) {
        long mult = base, res = 1;
        while(exp > 0) {
            if((exp & 1) == 1) res = (res * mult) % MOD;
            mult = (mult * mult) % MOD;
            exp >>= 1;
        }
        return (int)res;
    }

    
}
