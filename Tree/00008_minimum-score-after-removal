https://leetcode.com/problems/minimum-score-after-removals-on-a-tree/description/

2322. Minimum Score After Removals on a Tree
Hard
Topics
Companies
Hint
There is an undirected connected tree with n nodes labeled from 0 to n - 1 and n - 1 edges.

You are given a 0-indexed integer array nums of length n where nums[i] represents the value of the ith node. You are also given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

Remove two distinct edges of the tree to form three connected components. For a pair of removed edges, the following steps are defined:

Get the XOR of all the values of the nodes for each of the three components respectively.
The difference between the largest XOR value and the smallest XOR value is the score of the pair.
For example, say the three components have the node values: [4,5,7], [1,9], and [3,3,3]. The three XOR values are 4 ^ 5 ^ 7 = 6, 1 ^ 9 = 8, and 3 ^ 3 ^ 3 = 3. The largest XOR value is 8 and the smallest XOR value is 3. The score is then 8 - 3 = 5.
Return the minimum score of any possible pair of edge removals on the given tree.

 

Example 1:


Input: nums = [1,5,5,4,11], edges = [[0,1],[1,2],[1,3],[3,4]]
Output: 9
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [1,3,4] with values [5,4,11]. Its XOR value is 5 ^ 4 ^ 11 = 10.
- The 2nd component has node [0] with value [1]. Its XOR value is 1 = 1.
- The 3rd component has node [2] with value [5]. Its XOR value is 5 = 5.
The score is the difference between the largest and smallest XOR value which is 10 - 1 = 9.
It can be shown that no other pair of removals will obtain a smaller score than 9.
Example 2:


Input: nums = [5,5,2,4,4,2], edges = [[0,1],[1,2],[5,2],[4,3],[1,3]]
Output: 0
Explanation: The diagram above shows a way to make a pair of removals.
- The 1st component has nodes [3,4] with values [4,4]. Its XOR value is 4 ^ 4 = 0.
- The 2nd component has nodes [1,0] with values [5,5]. Its XOR value is 5 ^ 5 = 0.
- The 3rd component has nodes [2,5] with values [2,2]. Its XOR value is 2 ^ 2 = 0.
The score is the difference between the largest and smallest XOR value which is 0 - 0 = 0.
We cannot obtain a smaller score than 0.
 

Constraints:

n == nums.length
3 <= n <= 1000
1 <= nums[i] <= 108
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
ai != bi
edges represents a valid tree.


# java


class Solution {
  public int minimumScore(int[] nums, int[][] edges) {
    final int n = nums.length;
    final int xors = getXors(nums);
    int[] subXors = nums.clone();
    List<Integer>[] tree = new List[n];
    Set<Integer>[] children = new Set[n];

    for (int i = 0; i < n; ++i)
      tree[i] = new ArrayList<>();

    for (int i = 0; i < n; ++i)
      children[i] = new HashSet<>(Arrays.asList(i));

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      tree[u].add(v);
      tree[v].add(u);
    }

    dfs(tree, 0, -1, subXors, children);

    int ans = Integer.MAX_VALUE;

    for (int i = 0; i < edges.length; ++i) {
      int a = edges[i][0];
      int b = edges[i][1];
      if (children[a].contains(b)) {
        final int temp = a;
        a = b;
        b = a;
      }
      for (int j = 0; j < i; ++j) {
        int c = edges[j][0];
        int d = edges[j][1];
        if (children[c].contains(d)) {
          final int temp = c;
          c = d;
          d = temp;
        }
        int[] cands;
        if (a != c && children[a].contains(c))
          cands = new int[] {subXors[c], subXors[a] ^ subXors[c], xors ^ subXors[a]};
        else if (a != c && children[c].contains(a))
          cands = new int[] {subXors[a], subXors[c] ^ subXors[a], xors ^ subXors[c]};
        else
          cands = new int[] {subXors[a], subXors[c], xors ^ subXors[a] ^ subXors[c]};
        ans = Math.min(ans, Arrays.stream(cands).max().getAsInt() -
                                Arrays.stream(cands).min().getAsInt());
      }
    }

    return ans;
  }

  private Pair<Integer, Set<Integer>> dfs(List<Integer>[] tree, int u, int prev, int[] subXors,
                                          Set<Integer>[] children) {
    for (final int v : tree[u]) {
      if (v == prev)
        continue;
      final Pair<Integer, Set<Integer>> pair = dfs(tree, v, u, subXors, children);
      final int vXor = pair.getKey();
      final Set<Integer> vChildren = pair.getValue();
      subXors[u] ^= vXor;
      for (final int child : vChildren)
        children[u].add(child);
    }
    return new Pair<>(subXors[u], children[u]);
  }

  private int getXors(int[] nums) {
    int xors = 0;
    for (final int num : nums)
      xors ^= num;
    return xors;
  }
}


or


class Solution {
    private int s;
    private int s1;
    private int n;
    private int ans = Integer.MAX_VALUE;
    private int[] nums;
    private List<Integer>[] g;

    public int minimumScore(int[] nums, int[][] edges) {
        n = nums.length;
        g = new List[n];
        this.nums = nums;
        Arrays.setAll(g, k -> new ArrayList<>());
        for (int[] e : edges) {
            int a = e[0], b = e[1];
            g[a].add(b);
            g[b].add(a);
        }
        for (int v : nums) {
            s ^= v;
        }
        for (int i = 0; i < n; ++i) {
            for (int j : g[i]) {
                s1 = dfs(i, -1, j);
                dfs2(i, -1, j);
            }
        }
        return ans;
    }

    private int dfs(int i, int fa, int x) {
        int res = nums[i];
        for (int j : g[i]) {
            if (j != fa && j != x) {
                res ^= dfs(j, i, x);
            }
        }
        return res;
    }

    private int dfs2(int i, int fa, int x) {
        int res = nums[i];
        for (int j : g[i]) {
            if (j != fa && j != x) {
                int a = dfs2(j, i, x);
                res ^= a;
                int b = s1 ^ a;
                int c = s ^ s1;
                int t = Math.max(Math.max(a, b), c) - Math.min(Math.min(a, b), c);
                ans = Math.min(ans, t);
            }
        }
        return res;
    }
}


or


// TC : O(nodes*nodes)
// SC : O(nodes)

class Solution {
    private ArrayList<Integer> tree[];
    private int val[];
    private int minScore;
    
    public int minimumScore(int[] nums, int[][] edges) {
        val = nums;
        int nodes = nums.length;
        int len = edges.length;
        tree = new ArrayList[nodes];
        
        for(int node =0;node<nodes;node++) tree[node] = new ArrayList();
        for(int edge[] : edges){
            int node1 = edge[0];
            int node2 = edge[1];
            tree[node1].add(node2);
            tree[node2].add(node1);
        }
        
        minScore = Integer.MAX_VALUE;
        
        for(int idx =0;idx<len;idx++){
            int node1 = edges[idx][0];
            int node2 = edges[idx][1];
            
            int xor1 = dfs(node1,node2);
            int xor2 = dfs(node2,node1);
            
            dfs(node1,node2,xor1,xor2);
            dfs(node2,node1,xor2,xor1);
        }
        
        return minScore;
    }
    
    private int dfs(int parent,int node,int compXor1,int treeXor){
        int childXor = 0;
        
        for(int child : tree[node]){
            if(child!=parent){
                 int currChildXor = dfs(node,child,compXor1,treeXor);
                 int compXor2 = currChildXor;
                 int compXor3 = treeXor^compXor2;
                
                 int maxXor = Math.max(compXor1,Math.max(compXor2,compXor3));
                 int minXor = Math.min(compXor1,Math.min(compXor2,compXor3));

                 minScore = Math.min(minScore,maxXor-minXor);
                 childXor^=currChildXor;
            }
        }
        
        return childXor^val[node];
    }
    
    private int dfs(int node,int parent){
        int xor = val[node];
        
        for(int child : tree[node]){
            if(child!=parent) xor^=dfs(child,node);
        }
        
        return xor;
    }
}


or



class Solution {
    public int minimumScore(int[] nums, int[][] edges) {
        
        // 1.) Compute the adjacency table. Contains all paths, (including to root, must be filtered out later).
        Map<Integer, List<Integer>> adjGraph = computeAdjGraph(edges);
        
        // 2.) Know compute the total Xors of each node DFS style.
        Map<Integer, Integer> xorMap = new HashMap<>();
        computeNodeXorDfs(0, -1, nums, xorMap, adjGraph);
        int rootXor = xorMap.get(0);
        
        // 3.) Before computing all XORs in O(N^2) fashion, we want to compute a list of nodes of ascendant, descendant relationships.
            // Here we have to chose a SET instead of a list -> else we will run into TLS, obviously there are some duplicates.
        Map<Integer, Set<Integer>> descendants = new HashMap<>();
        Set<Integer> rootChildren = computeDescendants(0, -1, descendants, adjGraph);
        
        // 4.) We can check now the parent <-> child relationships. 
            // Compute each node under the root (not the root itself) for the following conditions:
                // node_i is parent of node_j
                    // rootXor = total ^ node_i (removing node_i from total)
                    // xor1 = node_i^ node_j (removing node_j from node_i)
                    // xor2 = node_j
                // node_j is parent of node_i
                    // rootXor = total ^ node_j (removing node_j from total)
                    // xor1 = node_j^ node_i (removing node_i from node_j)
                    // xor2 = node_i
                // node_j & node_i belong to different parents.
                    // rootXor = total ^ node_j^ nodE_i (removing node_i & node_j from total)
                    // xor1 = node_i
                    // xor2 = node_j
        
        int minScore = Integer.MAX_VALUE;
        
        for(int i = 1; i < adjGraph.keySet().size(); i++){
            for(int j = i+1; j < adjGraph.keySet().size(); j++){
                // Is node_i parent of node_j
                if(descendants.get(i).contains(j)){
                    int rootXor1 =  rootXor ^ xorMap.get(i);
                    int xor1 = xorMap.get(i) ^ xorMap.get(j);
                    int xor2 = xorMap.get(j);
                    int maxValue = Math.max(rootXor1, Math.max(xor1, xor2));
                    int minValue = Math.min(rootXor1, Math.min(xor1, xor2));
                    minScore = Math.min(minScore, maxValue - minValue);
                } else if(descendants.get(j).contains(i)){
                    int rootXor1 =  rootXor ^ xorMap.get(j);
                    int xor1 = xorMap.get(j) ^ xorMap.get(i);
                    int xor2 = xorMap.get(i);
                    int maxValue = Math.max(rootXor1, Math.max(xor1, xor2));
                    int minValue = Math.min(rootXor1, Math.min(xor1, xor2));
                    minScore = Math.min(minScore, maxValue - minValue);
                } else {
                    int rootXor1 =  rootXor ^ (xorMap.get(i) ^ xorMap.get(j));
                    int xor1 = xorMap.get(i);
                    int xor2 = xorMap.get(j);
                    int maxValue = Math.max(rootXor1, Math.max(xor1, xor2));
                    int minValue = Math.min(rootXor1, Math.min(xor1, xor2));
                    minScore = Math.min(minScore, maxValue - minValue);
                }
            }
        }
        
        
        return minScore;
    }
    
    Set<Integer> computeDescendants(int src, int parent, Map<Integer, Set<Integer>> descendants, Map<Integer, List<Integer>> adjGraph){
        
        Set<Integer> childrenOfNode = new HashSet<>();
        
        for(int child : adjGraph.get(src)){
            if(child != parent){
                // add the child node
                childrenOfNode.add(child);
                // add all its children.
                childrenOfNode.addAll(computeDescendants(child, src, descendants, adjGraph));
            }    
        }
        
        descendants.put(src, childrenOfNode);
        return childrenOfNode;
    }
        
    int computeNodeXorDfs(int src, int parent, int[] nums, Map<Integer, Integer> xorMap, Map<Integer, List<Integer>> adjGraph){
        
        int srcXor = nums[src];
        
        for(int child : adjGraph.get(src)){
            if(child != parent)
                srcXor ^= computeNodeXorDfs(child, src, nums, xorMap, adjGraph);
        }
        
        xorMap.put(src, srcXor);
        return srcXor;
    }
    
    Map<Integer, List<Integer>> computeAdjGraph(int[][] edges){
     
        Map<Integer, List<Integer>> adjGraph = new HashMap<>();
        
        for(int[] edge : edges){
            int v1 = edge[0];
            int v2 = edge[1];
            
            if(!adjGraph.containsKey(v1)){
                adjGraph.put(v1, new ArrayList<>());
            }
            
            if(!adjGraph.containsKey(v2)){
                adjGraph.put(v2, new ArrayList<>());
            }
            adjGraph.get(v1).add(v2);
            adjGraph.get(v2).add(v1);
        }
        return adjGraph;
    }
}

or


// TC : O(nodes*nodes)
// SC : O(nodes)

class Solution {
    private ArrayList<Integer> tree[];
    private int val[];
    private int minScore;
    
    public int minimumScore(int[] nums, int[][] edges) {
        val = nums;
        int nodes = nums.length;
        int len = edges.length;
        tree = new ArrayList[nodes];
        
        for(int node =0;node<nodes;node++) tree[node] = new ArrayList();
        for(int edge[] : edges){
            int node1 = edge[0];
            int node2 = edge[1];
            tree[node1].add(node2);
            tree[node2].add(node1);
        }
        
        minScore = Integer.MAX_VALUE;
        
        for(int idx =0;idx<len;idx++){
            int node1 = edges[idx][0];
            int node2 = edges[idx][1];
            
            int xor1 = dfs(node1,node2);
            int xor2 = dfs(node2,node1);
            
            dfs(node1,node2,xor1,xor2);
            dfs(node2,node1,xor2,xor1);
        }
        
        return minScore;
    }
    
    private int dfs(int parent,int node,int compXor1,int treeXor){
        int childXor = 0;
        
        for(int child : tree[node]){
            if(child!=parent){
                 int currChildXor = dfs(node,child,compXor1,treeXor);
                 int compXor2 = currChildXor;
                 int compXor3 = treeXor^compXor2;
                
                 int maxXor = Math.max(compXor1,Math.max(compXor2,compXor3));
                 int minXor = Math.min(compXor1,Math.min(compXor2,compXor3));

                 minScore = Math.min(minScore,maxXor-minXor);
                 childXor^=currChildXor;
            }
        }
        
        return childXor^val[node];
    }
    
    private int dfs(int node,int parent){
        int xor = val[node];
        
        for(int child : tree[node]){
            if(child!=parent) xor^=dfs(child,node);
        }
        
        return xor;
    }
}

or

import java.util.ArrayList;
import java.util.List;

public class Solution {
    // Adjacency list
    private List<Integer>[] adj;
    // subXOR[u] = XOR of subtree rooted at u (including u)
    private int[] subXOR;
    // tin[u], tout[u]: DFS entry/exit times
    private int[] tin, tout;
    // parent[u]: parent of u in the DFS tree
    private int[] parent;
    // Global DFS timer
    private int timer = 0;

    public int minimumScore(int[] nums, int[][] edges) {
        int n = nums.length;
        
        // 1) Build adjacency (undirected)
        adj = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            adj[e[0]].add(e[1]);
            adj[e[1]].add(e[0]);
        }

        // 2) Prepare arrays
        subXOR = new int[n];
        tin = new int[n];
        tout = new int[n];
        parent = new int[n];
        parent[0] = -1; // root has no parent

        // 3) DFS from node 0 to fill subXOR, tin/tout, parent[]
        dfs(0, -1, nums);

        // 4) Compute total XOR of all nodes
        int totalXOR = 0;
        for (int val : nums) {
            totalXOR ^= val;
        }

        // 5) Build a list/array of directed edges (parent -> child).
        //    We know each node (except the root) has exactly 1 parent in the DFS tree.
        //    So there are (n-1) edges total.
        int[][] directedEdges = new int[n - 1][2];
        int idx = 0;
        for (int u = 1; u < n; u++) {
            directedEdges[idx][0] = parent[u];  // p
            directedEdges[idx][1] = u;         // c
            idx++;
        }

        // 6) Try all pairs of edges
        int minScore = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            int p1 = directedEdges[i][0];
            int c1 = directedEdges[i][1];
            // subXOR of the child's subtree
            int xor1 = subXOR[c1];

            for (int j = i + 1; j < n - 1; j++) {
                int p2 = directedEdges[j][0];
                int c2 = directedEdges[j][1];
                int xor2 = subXOR[c2];

                // Check subtree relationships:
                boolean c2InC1 = (tin[c1] <= tin[c2] && tout[c2] <= tout[c1]);
                boolean c1InC2 = (tin[c2] <= tin[c1] && tout[c1] <= tout[c2]);

                int xA, xB, xC;
                if (c2InC1) {
                    // c2 is in the subtree of c1
                    // components: subXOR[c2], subXOR[c1]^subXOR[c2], totalXOR^subXOR[c1]
                    xA = xor2;
                    xB = xor1 ^ xor2;
                    xC = totalXOR ^ xor1;
                } else if (c1InC2) {
                    // c1 is in the subtree of c2
                    xA = xor1;
                    xB = xor2 ^ xor1;
                    xC = totalXOR ^ xor2;
                } else {
                    // disjoint
                    // components: subXOR[c1], subXOR[c2], totalXOR ^ subXOR[c1] ^ subXOR[c2]
                    xA = xor1;
                    xB = xor2;
                    xC = totalXOR ^ xor1 ^ xor2;
                }

                int curMax = Math.max(xA, Math.max(xB, xC));
                int curMin = Math.min(xA, Math.min(xB, xC));
                int score = curMax - curMin;
                if (score < minScore) {
                    minScore = score;
                    // Early stopping if we reach 0
                    if (minScore == 0) return 0;
                }
            }
        }

        return minScore;
    }

    /**
     * Single DFS to set:
     * - subXOR[u]: XOR of subtree rooted at u
     * - tin[u], tout[u]: entry/exit times
     * - parent[u]: the parent of u in the DFS tree
     */
    private void dfs(int u, int p, int[] nums) {
        tin[u] = timer++;
        subXOR[u] = nums[u];
        parent[u] = p;
        for (int v : adj[u]) {
            if (v == p) continue;
            dfs(v, u, nums);
            subXOR[u] ^= subXOR[v];
        }
        tout[u] = timer - 1;
    }
}


or


class Solution {
    ArrayList<Integer>[] graph;
    int[] values;
    int[] level;
    int[] xors;
    int[] parent;
    int[][] table;
    int MAXBIT=9;
    
    public int f(int src,int par,int lvl){
        xors[src]=values[src];
        level[src]=lvl;
        parent[src]=par;
        
        for(int nbr:graph[src]){
            if(nbr!=par){
                xors[src]^=f(nbr,src,lvl+1);
            }
        }
        return xors[src];
    }
    
    public void fillTable(){
        table[0]=parent;
        int n=table[0].length;
        
        for(int i=1;i<=MAXBIT;i++){
            for(int j=1;j<n;j++){
                table[i][j]=table[i-1][table[i-1][j]];
            }
        }
    }
    
    public int getLca(int x,int y){
        if(level[y]>level[x]){
            int t=x;
            x=y;
            y=t;
        }
        
        int k=level[x]-level[y];
        for(int i=0;i<=MAXBIT;i++){
            if((k & (1<<i)) > 0){
                x=table[i][x];
            }
        }

        if(x==y) return x;
        
        for(int i=MAXBIT;i>=0;i--){
            int nx=table[i][x];
            int ny=table[i][y];
            if(nx!=ny){
                x=nx;
                y=ny;
            }
        }
        
        return parent[x];
    }
    
    public int minimumScore(int[] nums, int[][] edges) {
        int n=nums.length;
        int m=edges.length;
        graph=new ArrayList[n];
        xors=new int[n];
        level=new int[n];
        parent=new int[n];
        table=new int[MAXBIT+1][n];
        values=nums;        
        
        for(int i=0;i<n;i++) graph[i]=new ArrayList<>();
        
        for(int i=0;i<m;i++){
            int u=edges[i][0];
            int v=edges[i][1];
            
            graph[u].add(v);
            graph[v].add(u);
        }
        
        f(0,0,1);
        
        fillTable();
        
        int score=Integer.MAX_VALUE;
        int a,b,c;
        for(int i=1;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                
                int lca=getLca(i,j);

                if(lca==i){
                    a=xors[0]^xors[i];
                    b=xors[i]^xors[j];
                    c=xors[j];
                } 
                else if(lca==j){
                    a=xors[0]^xors[j];
                    b=xors[j]^xors[i];
                    c=xors[i];
                }
                else{
                    a=xors[0]^xors[i]^xors[j];
                    b=xors[i];
                    c=xors[j];
                }
                score=Math.min(score, Math.max(a,Math.max(b,c))-Math.min(a,Math.min(b,c)));
            }
        }
        
        return score;
    }
}


or



class Solution {
    public int minimumScore(int[] nums, int[][] edges) {
        int n = nums.length;
        xor = new int[n];
        tree = new ArrayList[n];
        for(int i=0;i<n;i++)tree[i] = new ArrayList<>();
        for(int[] e : edges){
            tree[e[0]].add(e[1]);
            tree[e[1]].add(e[0]);

        }
        dfs1(0,-1,nums);
        // System.out.println(Arrays.toString(xor));
        dfs2(0,new HashSet<>(),-1);
        return ans;

    }  
    int ans = (int)1e9;
    List<Integer> [] tree;  
    int[] xor ;   
    private  void dfs1(int x, int p,int[] nums){
        xor[x] = nums[x];
        for(int y : tree[x]){
            if(y!=p){
                dfs1(y,x,nums);
                xor[x] ^= xor[y];
            }
            
        }
    }
    private void dfs2(int x, Set<Integer> set, int p){
        set.add(x);
        dfs3(0,-1,set,x);
        for(int y : tree[x])
            if(y!=p)dfs2(y,set,x);
        set.remove(x);
    }
    private void dfs3(int x, int p, Set<Integer> ancestor,int a){
        if(x == a)return;
        int b,c;
        if(ancestor.contains(x)){
             b = xor[x] ^ xor[a];
             c = xor[0] ^ xor[x];
        }else{
            b = xor[x];
            c = xor[0] ^ xor[a] ^ b;
        }
        int curr = Math.max(xor[a],Math.max(b,c)) - Math.min(xor[a],Math.min(b,c));
        if(x!=0)ans = Math.min(ans,curr);
        // System.out.println(x+" "+a+" "+xor[a]+" "+b+" "+c);
        for(int y : tree[x])
            if(y!=p)dfs3(y,x,ancestor,a);
    }
}


or


class Solution {
    int ans = Integer.MAX_VALUE;
    public int minimumScore(int[] nums, int[][] edges) {
        int xor = 0;
        Node[] nodes = new Node[nums.length];
        Arrays.setAll(nodes, o -> new Node(nums[o]));
        for (int[] e : edges){
            nodes[e[0]].children.add(e[1]);
            nodes[e[1]].children.add(e[0]);
        }
        for (int n : nums){ // xor all the values 
            xor ^= n;
        }
        dfs(0, -1, xor, nodes);
        return ans;
    }

    private int dfs(int cur, int parent, int xor, Node[] nodes){
        int val = nodes[cur].val;  // val -> current xor value for this component
        for (int next : nodes[cur].children){
            if (parent != next){
                val ^= dfs(next, cur, xor, nodes);
            }
        }
        if (cur != 0){ // ban node chosen, do dfs again for the other component.
            dfs2(0, -1, cur, xor, val, nodes);
        }
        return val;
    }

    private int dfs2(int cur, int parent, int ban, int xor, int axor, Node[] nodes){
        if (cur==ban)
            return 0;
        int val = nodes[cur].val; // val -> current xor value for this component
        for (int next : nodes[cur].children){
            if (parent != next){
                val ^= dfs2(next, cur, ban, xor, axor, nodes);
            }
        }
        if (cur != 0){ // if it is not a root node, we have a valid 3 components. Update ans.
            int bxor = xor^val^axor;
            ans = Math.min(ans, Math.max(val, Math.max(bxor, axor)) - Math.min(val, Math.min(bxor, axor)));
        }
        return val;
    }

    private class Node {
        int val;
        List<Integer> children = new ArrayList<>();
        Node (int val){
            this.val = val;
        }
    }
}
