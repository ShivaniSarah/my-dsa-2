https://leetcode.com/problems/minimum-cost-to-make-array-equal/description/


2448. Minimum Cost to Make Array Equal
Hard
Topics
Companies
Hint
You are given two 0-indexed arrays nums and cost consisting each of n positive integers.

You can do the following operation any number of times:

Increase or decrease any element of the array nums by 1.
The cost of doing one operation on the ith element is cost[i].

Return the minimum total cost such that all the elements of the array nums become equal.

 

Example 1:

Input: nums = [1,3,5,2], cost = [2,3,1,14]
Output: 8
Explanation: We can make all the elements equal to 2 in the following way:
- Increase the 0th element one time. The cost is 2.
- Decrease the 1st element one time. The cost is 3.
- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.
The total cost is 2 + 3 + 3 = 8.
It can be shown that we cannot make the array equal with a smaller cost.
Example 2:

Input: nums = [2,2,2,2,2], cost = [4,2,8,1,3]
Output: 0
Explanation: All the elements are already equal, so no operations are needed.
 

Constraints:

n == nums.length == cost.length
1 <= n <= 105
1 <= nums[i], cost[i] <= 106
Test cases are generated in a way that the output doesn't exceed 253-1



# java


class Solution {
    public long minCost(int[] nums, int[] cost) {
        int n = nums.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; ++i) {
            arr[i] = new int[] {nums[i], cost[i]};
        }
        Arrays.sort(arr, (a, b) -> a[0] - b[0]);
        long[] f = new long[n + 1];
        long[] g = new long[n + 1];
        for (int i = 1; i <= n; ++i) {
            long a = arr[i - 1][0], b = arr[i - 1][1];
            f[i] = f[i - 1] + a * b;
            g[i] = g[i - 1] + b;
        }
        long ans = Long.MAX_VALUE;
        for (int i = 1; i <= n; ++i) {
            long a = arr[i - 1][0];
            long l = a * g[i - 1] - f[i - 1];
            long r = f[n] - f[i] - a * (g[n] - g[i]);
            ans = Math.min(ans, l + r);
        }
        return ans;
    }
}


or


class Solution {
  public long minCost(int[] nums, int[] cost) {
    long ans = 0;
    int l = Arrays.stream(nums).min().getAsInt();
    int r = Arrays.stream(nums).max().getAsInt();

    while (l < r) {
      final int m = (l + r) / 2;
      final long cost1 = getCost(nums, cost, m);
      final long cost2 = getCost(nums, cost, m + 1);
      ans = Math.min(cost1, cost2);
      if (cost1 < cost2)
        r = m;
      else
        l = m + 1;
    }

    return ans;
  }

  private long getCost(int[] nums, int[] cost, int target) {
    long res = 0;
    for (int i = 0; i < nums.length; ++i)
      res += Math.abs(nums[i] - target) * (long) cost[i];
    return res;
  }
}


or

class Solution {
          private long findCost(int[] nums, int[] cost, long x) {
        long res = 0L;
        for (int i = 0; i < nums.length; i++){
            res += Math.abs(nums[i] - x) * cost[i];
        }
        return res;
    }
    public long minCost(int[] nums, int[] cost) {
        long left = 1L;
        long right = 1000000L;
        for (int num : nums) {
            left = Math.min(num, left);
            right = Math.max(num, right);
        }
        long ans = findCost(nums, cost, 1);
        while (left < right) {
            long mid = (left + right) / 2;
            long y1 = findCost(nums, cost, mid);
            long y2 = findCost(nums, cost, mid + 1);
            ans = Math.min(y1, y2);
            if (y1 < y2){
                right = mid;
            }
            else{
                left = mid + 1;
            }
        }
        return ans;
    }
}


or


class Solution {
    public long minCost(int[] nums, int[] cost) {
        int left = nums[0];
        int right = nums[0];
        for(int i: nums){
            left = Math.min(left,i);
            right = Math.max(right,i);
        }
        long ans = 0;
        while(left<right){
            int mid = (left+right)/2;
            long cost1 = helper(nums, cost, mid);
            long cost2 = helper(nums,cost, mid+1);
            if(cost1>cost2){
                left = mid+1;
                ans = cost2;
            }else{
                right = mid;
                ans = cost1;
            }
            
        }
        return ans;
    }
    
    public long helper(int [] nums, int [] cost, int all){
        long totalCost = 0L;
        for(int i = 0;i<nums.length;i++){
            totalCost += 1L*Math.abs(nums[i]-all)*cost[i];
        }
        return totalCost;
    }
}
