https://leetcode.com/problems/length-of-the-longest-increasing-path/description/


3288. Length of the Longest Increasing Path
Hard
Topics
Companies
Hint
You are given a 2D array of integers coordinates of length n and an integer k, where 0 <= k < n.

coordinates[i] = [xi, yi] indicates the point (xi, yi) in a 2D plane.

An increasing path of length m is defined as a list of points (x1, y1), (x2, y2), (x3, y3), ..., (xm, ym) such that:

xi < xi + 1 and yi < yi + 1 for all i where 1 <= i < m.
(xi, yi) is in the given coordinates for all i where 1 <= i <= m.
Return the maximum length of an increasing path that contains coordinates[k].

 

Example 1:

Input: coordinates = [[3,1],[2,2],[4,1],[0,0],[5,3]], k = 1

Output: 3

Explanation:

(0, 0), (2, 2), (5, 3) is the longest increasing path that contains (2, 2).

Example 2:

Input: coordinates = [[2,1],[7,0],[5,6]], k = 2

Output: 2

Explanation:

(2, 1), (5, 6) is the longest increasing path that contains (5, 6).

 

Constraints:

1 <= n == coordinates.length <= 105
coordinates[i].length == 2
0 <= coordinates[i][0], coordinates[i][1] <= 109
All elements in coordinates are distinct.
0 <= k <= n - 1


# java

class Solution {
  public int maxPathLength(int[][] coordinates, int k) {
    final int xk = coordinates[k][0];
    final int yk = coordinates[k][1];
    List<int[]> leftCoordinates = new ArrayList<>();
    List<int[]> rightCoordinates = new ArrayList<>();

    for (int[] coordinate : coordinates) {
      final int x = coordinate[0];
      final int y = coordinate[1];
      if (x < xk && y < yk)
        leftCoordinates.add(new int[] {x, y});
      else if (x > xk && y > yk)
        rightCoordinates.add(new int[] {x, y});
    }

    return 1 + lengthOfLIS(leftCoordinates) + lengthOfLIS(rightCoordinates);
  }

  // Similar to 300. Longest Increasing Subsequence
  private int lengthOfLIS(List<int[]> coordinates) {
    coordinates.sort(Comparator.comparingInt((int[] coordinate) -> coordinate[0])
                         .thenComparingInt((int[] coordinate) -> - coordinate[1]));
    // tails[i] := the minimum tail of all the increasing subsequences having
    // length i + 1
    List<Integer> tails = new ArrayList<>();
    for (int[] coordinate : coordinates) {
      final int y = coordinate[1];
      if (tails.isEmpty() || y > tails.get(tails.size() - 1))
        tails.add(y);
      else
        tails.set(firstGreaterEqual(tails, y), y);
    }
    return tails.size();
  }

  private int firstGreaterEqual(List<Integer> arr, int target) {
    final int i = Collections.binarySearch(arr, target);
    return i < 0 ? -i - 1 : i;
  }
}


or

// LIS

class Solution {
    public int maxPathLength(int[][] coordinates, int k) {
        int n = coordinates.length;
        int kx = coordinates[k][0];
        int ky = coordinates[k][1];

        // Sort coordinates by x and if equal, by decreasing y
        Arrays.sort(coordinates,(a,b) ->{
            if(a[0] == b[0]){
                return b[1] - a[1];
            }
            return a[0] - b[0];
        });

        List<Integer> coordinates1 = new ArrayList<>();
        List<Integer> coordinates2 = new ArrayList<>();

        // Indentify points which has x, y < kth coordinates and put y in coordinates1 && x,y > kth coordinates put y in coordinates2
        for(int i=0;i<n;i++){
            int x = coordinates[i][0];
            int y = coordinates[i][1];
            if(x < kx && y < ky){
                coordinates1.add(y);
            }
            if(x > kx && y > ky){
                coordinates2.add(y);
            }
        }
        
        int lcs1 = lcs(coordinates1);
        int lcs2 = lcs(coordinates2);

        return lcs1 + lcs2 + 1;
    }
    int lcs(List<Integer> list){
        if(list.size() == 0 || list.size() == 1){
            return list.size();
        }
        int len = 1;
        int[] tail = new int[list.size()];
        tail[0] = list.get(0);
        for(int i=1;i<list.size();i++){
            if(list.get(i) > tail[len-1]){
                tail[len] = list.get(i);
                len++;
            }else{
                int idx = ceilIdx(tail,0,len-1,list.get(i));
                tail[idx] = list.get(i);
            }
        }
        return len;
    }
    int ceilIdx(int[] tail,int l,int h,int x){
        int idx = l;
        while(l <= h){
            int m = (l + h) / 2;
            if(tail[m] >= x){
                idx = m;
                h = m - 1;
            }else{
                l = m + 1;
            }
        }
        return idx;
    }
}

or


class Solution {
    private int fun(List<int[]> c) {
        // Sort points by x and then by y (reverse order for y)
        Collections.sort(c, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);

        List<Integer> dp = new ArrayList<>();
        for (int[] p : c) {
            int y = p[1];
            int left = Collections.binarySearch(dp, y);
            if (left < 0) left = -(left + 1);  // Get insertion point
            if (left == dp.size()) dp.add(y); 
            else dp.set(left, y);
        }
        return dp.size();
    }

    public int maxPathLength(int[][] c, int k) {
        int[] p = c[k];
        int n = c.length;
        List<int[]> c1 = new ArrayList<>(), c2 = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (c[i][0] < p[0] && c[i][1] < p[1]) c1.add(c[i]);
            if (c[i][0] > p[0] && c[i][1] > p[1]) c2.add(c[i]);
        }

        int l1 = c1.size() > 0 ? fun(c1) : 0;
        int l2 = c2.size() > 0 ? fun(c2) : 0;

        return l1 + l2 + 1;
    }
}

or


// based on Russian dolls

public class Solution {
    public int maxPathLength(int[][] coordinates, int k) {
        int[] has = coordinates[k];
        
        List<int[]> coordsList = new ArrayList<>();
        for (int[] coord : coordinates) {
            coordsList.add(coord);
        }
        
        coordsList.sort((a, b) -> {
            if (a[0] != b[0]) return Integer.compare(a[0], b[0]);
            return Integer.compare(b[1], a[1]);
        });
        
        int current = -1;
        for (int i = 0; i < coordsList.size(); i++) {
            if (Arrays.equals(coordsList.get(i), has)) {
                current = i;
                break;
            }
        }
        
        List<int[]> left = coordsList.subList(0, current);
        for(int[] l: left){
            System.out.print(Arrays.toString(l)+" ");
        }
        System.out.println();
        List<int[]> right = coordsList.subList(current + 1, coordsList.size());
        for(int[] l: right){
            System.out.print(Arrays.toString(l)+" ");
        }
        List<int[]> l1 = filterSubset(left, has, true);
        l1.add(has);
        List<int[]> l2 = filterSubset(right, has, false);
        List<int[]> l3 = new ArrayList<>(l1);
        l3.addAll(l2);
        int[] height=new int[l3.size()];
        for(int i=0; i<height.length; i++)
        {height[i]=l3.get(i)[1];}
        return totalEnvelop(height);
    }
    public int totalEnvelop(int[] height)
    {
        int n=height.length;
        int piles =0;
        int[] stores = new int[n];
        for(int i=0; i<n; i++){
            int left=0, right=piles;
            while(left<right){
                int mid = left+(right-left)/2;
                if(stores[mid]>=height[i]){
                    right=mid;
                }
                else left = mid+1;
            }
            if(left==piles) piles++;
            stores[left]=height[i];
        }
        return piles;
    }
    public List<int[]> filterSubset(List<int[]> nums, int[] has, boolean isLeft) {
        List<int[]> result = new ArrayList<>();
        for (int[] coord : nums) {
            if (isLeft) {
                if (coord[0] < has[0] && coord[1] < has[1]) {
                    result.add(coord);
                }
            } else {
                if (coord[0] > has[0] && coord[1] > has[1]) {
                    result.add(coord);
                }
            }
        }
        return result;
    }
}

or

// binary search + LIS

// find all points with x and y strictly greater than that of coordinates[k] store them in  a list l1
// find all points with x and y strictly lesser than that of coordinates[k] store them in  a list l2


// apply LIS on both these lists for their y value
// sort them on basis of x , if two points have same x value then sort on basis of decreasing value of y 
// this ensures that u dont pick any two points with same value of x

class Solution {

    class Pair{
        int x ;
        int y ; 
        Pair(int x , int y){
            this.x = x ; 
            this.y = y ; 
        }
    }
    
    int lis(List<Pair> l){
        List<Integer> temp = new ArrayList<>() ; 

        for(Pair p : l){
            if(temp.size() == 0 || temp.get(temp.size()-1) < p.y) temp.add(p.y) ;
            else{
                 int idx = lowerBound(temp , p.y) ;
                 temp.set(idx , p.y) ;  
            }  
        }

        return temp.size() ; 
    }

    int lowerBound(List<Integer> li , int x){
        int ans = -1 , l = 0 , r = li.size()-1 ; 

        while(l <= r){
            int mid = l + (r-l) / 2 ; 
            if(li.get(mid) >= x){
               ans = mid ; 
               r = mid - 1 ; 
            }
            else l = mid + 1 ; 
        }

        return ans ; 
    }
    public int maxPathLength(int[][] coordinates, int k) {
        List<Pair> l1 = new ArrayList<>() ; 
        List<Pair> l2 = new ArrayList<>() ; 
        
        int[] tar = coordinates[k] ; 
        for(int[] x : coordinates){
            if(x[0] > tar[0] && x[1] > tar[1]) l2.add(new Pair(x[0] , x[1])) ;
            else if(x[0] < tar[0] && x[1] < tar[1])  l1.add(new Pair(x[0] , x[1])) ;
        }
        
        Collections.sort(l1 ,(x,y) -> x.x == y.x ? y.y - x.y : x.x - y.x) ; 
        Collections.sort(l2 ,(x,y) -> x.x == y.x ? y.y - x.y : x.x - y.x) ; 

        int pre = lis(l1) ; 
        int post = lis(l2) ; 

        return pre + 1 + post ; 
    }
}


or


// double LIS


class Solution {
    public int maxPathLength(int[][] coords, int k) {
        int x = coords[k][0], y = coords[k][1];
        Arrays.sort(coords, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        List<Integer> before = new ArrayList<>(), after = new ArrayList<>();
        for (int[] c : coords)
            if (c[0] < x && c[1] < y)
                insertLIS(before, c[1]);
            else if (c[0] > x && c[1] > y)
                insertLIS(after, c[1]);
        return 1 + before.size() + after.size();
    }

    void insertLIS(List<Integer> ms, int y) {
        int i = Collections.binarySearch(ms, y);
        if (i < 0) i = -i - 1;
        if (i == ms.size())
            ms.add(y);
        else
            ms.set(i, y);
    }
}
