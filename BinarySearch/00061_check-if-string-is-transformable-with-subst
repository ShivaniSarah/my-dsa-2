https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations/description/

1585. Check If String Is Transformable With Substring Sort Operations
Hard
Topics
Companies
Hint
Given two strings s and t, transform string s into string t using the following operation any number of times:

Choose a non-empty substring in s and sort it in place so the characters are in ascending order.
For example, applying the operation on the underlined substring in "14234" results in "12344".
Return true if it is possible to transform s into t. Otherwise, return false.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "84532", t = "34852"
Output: true
Explanation: You can transform s into t using the following sort operations:
"84532" (from index 2 to 3) -> "84352"
"84352" (from index 0 to 2) -> "34852"
Example 2:

Input: s = "34521", t = "23415"
Output: true
Explanation: You can transform s into t using the following sort operations:
"34521" -> "23451"
"23451" -> "23415"
Example 3:

Input: s = "12345", t = "12435"
Output: false
 

Constraints:

s.length == t.length
1 <= s.length <= 105
s and t consist of only digits.



# java


class Solution {
  public boolean isTransformable(String s, String t) {
    if (!Arrays.equals(getCount(s), getCount(t)))
      return false;

    Queue<Integer>[] positions = new Queue[10];
    for (int i = 0; i < 10; i++)
      positions[i] = new LinkedList<>();

    for (int i = 0; i < s.length(); i++)
      positions[s.charAt(i) - '0'].offer(i);

    // For each digit in `t`, check if we can put this digit in `s` at the same
    // position as `t`. Ensure that all the left digits are equal to or greater
    // than it. This is because the only operation we can perform is sorting in
    // ascending order. If there is a digit to the left that is smaller than it,
    // we can never move it to the same position as in `t`. However, if all the
    // digits to its left are equal to or greater than it, we can move it one
    // position to the left until it reaches the same position as in `t`.
    for (final char c : t.toCharArray()) {
      final int d = c - '0';
      final int front = positions[d].poll();
      for (int smaller = 0; smaller < d; ++smaller)
        if (!positions[smaller].isEmpty() && positions[smaller].peek() < front)
          return false;
    }

    return true;
  }

  private int[] getCount(String s) {
    int[] count = new int[10];
    for (char c : s.toCharArray())
      count[c - '0']++;
    return count;
  }
}


or



class Solution {
    public boolean isTransformable(String s, String t) {
        Deque<Integer>[] pos = new Deque[10];
        Arrays.setAll(pos, k -> new ArrayDeque<>());
        for (int i = 0; i < s.length(); ++i) {
            pos[s.charAt(i) - '0'].offer(i);
        }
        for (int i = 0; i < t.length(); ++i) {
            int x = t.charAt(i) - '0';
            if (pos[x].isEmpty()) {
                return false;
            }
            for (int j = 0; j < x; ++j) {
                if (!pos[j].isEmpty() && pos[j].peek() < pos[x].peek()) {
                    return false;
                }
            }
            pos[x].poll();
        }
        return true;
    }
}


or


class Solution {
    public boolean isTransformable(String s, String t) {
        if (!equal(s, t)) return false;
        int[] countS = new int[10];
        int[] countT = new int[10];
        int[][] prev = new int[10][10];
        int[][] after = new int[10][10];
        
        for (int i = 0; i < s.length(); i++) {
            int s1 = s.charAt(i) - '0';
            int t1 = t.charAt(i) - '0';
            countS[s1]++;
            countT[t1]++;
            
			// This step is to calculate how many digit less than s1/t1 occur before time i
			// Store the frequency pair into 2-d array
            for (int j = 0; j < s1; j++) {
                if (countS[j] == 0) continue;
                prev[j][s1] += countS[j];

            }
            
            for (int j = 0; j < t1; j++) {
                if (countT[j] == 0) continue;    
                after[j][t1] += countT[j];
            }
            
        }
        
        for (int i = 0; i <= 8; i++) {
            for (int j = i + 1; j <= 9; j++) {
                if (prev[i][j] == 0) continue;
				// Check if any ascending pair's frequency has been reduced after modified.
                if (after[i][j] < prev[i][j]) return false;
            }
        }
        
        return true;
    }
    
	// Judge whether the two strings has the same digits
    public boolean equal(String s, String t) {
        char[] sc = s.toCharArray();
        char[] tc = t.toCharArray();
        Arrays.sort(sc);
        Arrays.sort(tc);
        
        for (int i = 0; i < s.length(); i++) {
            if (sc[i] != tc[i]) return false;
        }
        
        return true;
    }
}
