https://leetcode.com/problems/find-the-occurrence-of-first-almost-equal-substring/description/


3303. Find the Occurrence of First Almost Equal Substring
Hard
Topics
Companies
Hint
You are given two strings s and pattern.

A string x is called almost equal to y if you can change at most one character in x to make it identical to y.

Return the smallest starting index of a substring in s that is almost equal to pattern. If no such index exists, return -1.

A substring is a contiguous non-empty sequence of characters within a string.
 

Example 1:

Input: s = "abcdefg", pattern = "bcdffg"

Output: 1

Explanation:

The substring s[1..6] == "bcdefg" can be converted to "bcdffg" by changing s[4] to "f".

Example 2:

Input: s = "ababbababa", pattern = "bacaba"

Output: 4

Explanation:

The substring s[4..9] == "bababa" can be converted to "bacaba" by changing s[6] to "c".

Example 3:

Input: s = "abcd", pattern = "dba"

Output: -1

Example 4:

Input: s = "dde", pattern = "d"

Output: 0

 

Constraints:

1 <= pattern.length < s.length <= 105
s and pattern consist only of lowercase English letters.
 

Follow-up: Could you solve the problem if at most k consecutive characters can be changed?


# java


class Solution {
  public int minStartingIndex(String s, String pattern) {
    int[] z1 = zFunction(new StringBuilder(pattern).append(s).toString());
    int[] z2 = zFunction(new StringBuilder(pattern)
                             .reverse() //
                             .append(new StringBuilder(s).reverse())
                             .toString());

    // Match s[i..i + len(pattern) - 1] with `pattern` from both the prefix and
    // the suffix.
    for (int i = 0; i <= s.length() - pattern.length(); ++i)
      if (z1[pattern.length() + i] + z2[s.length() - i] >= pattern.length() - 1)
        return i;

    return -1;
  }

  // Returns the z array, where z[i] is the length of the longest prefix of
  // s[i..n) which is also a prefix of s.
  //
  // https://cp-algorithms.com/string/z-function.html#implementation
  private int[] zFunction(final String s) {
    final int n = s.length();
    int[] z = new int[n];
    int l = 0;
    int r = 0;
    for (int i = 1; i < n; ++i) {
      if (i < r)
        z[i] = Math.min(r - i, z[i - l]);
      while (i + z[i] < n && s.charAt(z[i]) == s.charAt(i + z[i]))
        ++z[i];
      if (i + z[i] > r) {
        l = i;
        r = i + z[i];
      }
    }
    return z;
  }

  private String reversed(String s) {
    return new StringBuilder(s).reverse().toString();
  }
}



or



class Solution {
    public int[] zFunction(String input) {
        int length = input.length();
        int[] zArray = new int[length];
        int left = 0, right = 0;

        for (int i = 1; i < length; i++) {
            if (i < right) {
                zArray[i] = Math.min(right - i, zArray[i - left]);
            }
            while (i + zArray[i] < length && input.charAt(zArray[i]) == input.charAt(i + zArray[i])) {
                zArray[i]++;
            }
            if (i + zArray[i] > right) {
                left = i;
                right = i + zArray[i];
            }
        }
        return zArray;
    }

    public int minStartingIndex(String text, String pattern) {
        String concatenatedString = pattern + "#" + text;
        int textLength = text.length();
        int patternLength = pattern.length();
        String reversedString = text + "#" + pattern;
        StringBuilder reversedBuilder = new StringBuilder(reversedString).reverse();
        
        int[] zForward = zFunction(concatenatedString);
        int[] zBackward = zFunction(reversedBuilder.toString());
    
        for (int i = patternLength + 1; i < textLength + patternLength + 1; i++) {
            if (i + patternLength > textLength + patternLength + 1) {
                break;
            }

            int currentIndex = i - patternLength - 1;
            int matchedLength = zForward[i];
            if (matchedLength >= patternLength - 1) {
                return currentIndex;
            }
            matchedLength++;

            int requiredLength = patternLength - matchedLength;
            int newId = currentIndex + patternLength - 1;
            newId = textLength - 1 - newId;
            newId = patternLength + 1 + newId;
            if (zBackward[newId] >= requiredLength) {
                return currentIndex;    
            }   
        }
        return -1;
    }
}
