https://leetcode.com/problems/kth-smallest-amount-with-single-denomination-combination/description/

3116. Kth Smallest Amount With Single Denomination Combination
Hard
Topics
Companies
Hint
You are given an integer array coins representing coins of different denominations and an integer k.

You have an infinite number of coins of each denomination. However, you are not allowed to combine coins of different denominations.

Return the kth smallest amount that can be made using these coins.

 

Example 1:

Input: coins = [3,6,9], k = 3

Output: 9

Explanation: The given coins can make the following amounts:
Coin 3 produces multiples of 3: 3, 6, 9, 12, 15, etc.
Coin 6 produces multiples of 6: 6, 12, 18, 24, etc.
Coin 9 produces multiples of 9: 9, 18, 27, 36, etc.
All of the coins combined produce: 3, 6, 9, 12, 15, etc.

Example 2:

Input: coins = [5,2], k = 7

Output: 12

Explanation: The given coins can make the following amounts:
Coin 5 produces multiples of 5: 5, 10, 15, 20, etc.
Coin 2 produces multiples of 2: 2, 4, 6, 8, 10, 12, etc.
All of the coins combined produce: 2, 4, 5, 6, 8, 10, 12, 14, 15, etc.

 

Constraints:

1 <= coins.length <= 15
1 <= coins[i] <= 25
1 <= k <= 2 * 109
coins contains pairwise distinct integers.


# java

class Solution {
    private int[] coins;
    private int k;

    public long findKthSmallest(int[] coins, int k) {
        this.coins = coins;
        this.k = k;
        long l = 1, r = (long) 1e11;
        while (l < r) {
            long mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(long mx) {
        long cnt = 0;
        int n = coins.length;
        for (int i = 1; i < 1 << n; ++i) {
            long v = 1;
            for (int j = 0; j < n; ++j) {
                if ((i >> j & 1) == 1) {
                    v = lcm(v, coins[j]);
                    if (v > mx) {
                        break;
                    }
                }
            }
            int m = Integer.bitCount(i);
            if (m % 2 == 1) {
                cnt += mx / v;
            } else {
                cnt -= mx / v;
            }
        }
        return cnt >= k;
    }

    private long lcm(long a, long b) {
        return a * b / gcd(a, b);
    }

    private long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}

or


class Solution {
  public long findKthSmallest(int[] coins, int k) {
    List<Long>[] sizeToLcms = getSizeToLcms(coins);
    long l = 0;
    long r = (long) k * Arrays.stream(coins).min().getAsInt();

    while (l < r) {
      final long m = (l + r) / 2;
      if (numDenominationsNoGreaterThan(sizeToLcms, m) >= k)
        r = m;
      else
        l = m + 1;
    }

    return l;
  }

  // Returns the number of denominations <= m.
  private long numDenominationsNoGreaterThan(List<Long>[] sizeToLcms, long m) {
    long res = 0;
    for (int sz = 1; sz < sizeToLcms.length; ++sz)
      for (long lcm : sizeToLcms[sz])
        res += m / lcm * Math.pow(-1, sz + 1);
    return res;
  }

  // Returns the LCMs for each number of combination of coins.
  private List<Long>[] getSizeToLcms(int[] coins) {
    final int n = coins.length;
    final int maxMask = 1 << n;
    List<Long>[] sizeToLcms = new List[n + 1];

    for (int i = 1; i <= n; ++i)
      sizeToLcms[i] = new ArrayList<>();

    for (int mask = 1; mask < maxMask; ++mask) {
      long lcmOfSelectedCoins = 1;
      for (int i = 0; i < n; ++i)
        if ((mask >> i & 1) == 1)
          lcmOfSelectedCoins = lcm(lcmOfSelectedCoins, coins[i]);
      sizeToLcms[Integer.bitCount(mask)].add(lcmOfSelectedCoins);
    }

    return sizeToLcms;
  }

  private long lcm(long a, long b) {
    return a * b / gcd(a, b);
  }

  private long gcd(long a, long b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}


or


// Math | Inclusion-Exclusion Principle | Binary Search

class Solution {
    public long findKthSmallest(int[] coins, int k) {
        int n = coins.length;
        Map<Integer, List<Long>> dic = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            List<int[]> combs = combinations(coins, i);
            for (int[] comb : combs) {
                long lcm = 1;
                for (int x : comb) lcm = lcm(lcm, x);
                dic.computeIfAbsent(i, z -> new ArrayList<>()).add(lcm);
            }
        }

        long start = Arrays.stream(coins).min().getAsInt(), end = start * (long)k;
        while (start + 1 < end) {
            long mid = (start + end) / 2;
            if (count(dic, n, mid) >= k) end = mid;
            else start = mid;
        }
        return count(dic, n, start) >= k ? start : end;
    }

    private long count(Map<Integer, List<Long>> dic, int n, long target) {
        long ans = 0;
        for (int i = 1; i <= n; i++) {
            List<Long> list = dic.getOrDefault(i, new ArrayList<>());
            for (long lcm : list)
                ans += target / lcm * ((i % 2 == 1) ? 1 : -1);
        }
        return ans;
    }

    private List<int[]> combinations(int[] coins, int len) {
        List<int[]> res = new ArrayList<>();
        backtrack(coins, len, 0, new ArrayList<>(), res);
        return res;
    }

    private void backtrack(int[] coins, int len, int start, List<Integer> curr, List<int[]> res) {
        if (curr.size() == len) {
            res.add(curr.stream().mapToInt(i -> i).toArray());
            return;
        }
        for (int i = start; i < coins.length; i++) {
            curr.add(coins[i]);
            backtrack(coins, len, i + 1, curr, res);
            curr.remove(curr.size() - 1);
        }
    }

    private long lcm(long a, long b) {
        return a / gcd(a, b) * b;
    }

    private long gcd(long a, long b) {
        while (b != 0) {
            long tmp = b;
            b = a % b;
            a = tmp;
        }
        return a;
    }
}


or

// bit masking and Principle of Inclusion-Exclusion 

class Solution {
    long pie(int[] coins, long x) {
        int m = coins.length;
        int nn = 1 << m;
        long cnt = 0;
        for (int i = 1; i < nn; i++) {
            long lcmm = 1;
            for (int j = 0; j < m; j++) {
                if ((i & (1 << j)) != 0) {
                    lcmm = lcm(lcmm, coins[j]);
                }
            }
            if (Integer.bitCount(i) % 2 == 1)
                cnt += x / lcmm;
            else
                cnt -= x / lcmm;
        }
        return cnt;
    }

    public long findKthSmallest(int[] coins, int k) {
        long kk = k, l = 1, r = (long) 1e11, ans = 0;
        while (l <= r) {
            long m = l + (r - l) / 2, cnt = pie(coins, m);
            if (cnt < kk)
                l = m + 1;
            else {
                ans = m;
                r = m - 1;
            }
        }
        return ans;
    }

    long gcd(long a, long b) {
        while (b != 0) {
            long t = b;
            b = a % b;
            a = t;
        }
        return a;
    }

    long lcm(long a, long b) {
        return a / gcd(a, b) * b;
    }
}

or


// Binary Search & Bitmasking

class Solution {
    long pie(int[] coins, long x) {
        int m = coins.length, nn = 1 << m;
        long cnt = 0;
        for (int i = 1; i < nn; i++) {
            long lcmm = 1;
            for (int j = 0; j < m; j++) {
                if ((i & (1 << j)) != 0)
                    lcmm = lcm(lcmm, coins[j]);
            }
            if (Integer.bitCount(i) % 2 == 1)
                cnt += x / lcmm;
            else
                cnt -= x / lcmm;
        }
        return cnt;
    }

    public long findKthSmallest(int[] coins, int k) {
        long kk = k, l = 1, r = (long) 1e11, ans = 0;
        while (l <= r) {
            long m = l + (r - l) / 2, cnt = pie(coins, m);
            if (cnt < kk)
                l = m + 1;
            else {
                ans = m;
                r = m - 1;
            }
        }
        return ans;
    }

    long gcd(long a, long b) {
        while (b != 0) {
            long t = b;
            b = a % b;
            a = t;
        }
        return a;
    }

    long lcm(long a, long b) {
        return a / gcd(a, b) * b;
    }
}



or





class Solution {
    List<Long> v = new ArrayList<>();
    long convert = 1;

    long gcd(long a, long b) {
        while (b != 0) {
            long t = b;
            b = a % b;
            a = t;
        }
        return a;
    }

    long lcm(long a, long b) {
        return (a * b) / gcd(a, b);
    }

    long getCount(long x) {
        long ans = 0;
        for (int i = 0; i < v.size(); i++) {
            ans += x / Math.abs(v.get(i)) * (v.get(i) > 0 ? 1 : -1);
        }
        return ans;
    }

    boolean check(long mid, int[] v) {
        boolean ans = false;
        for (int i = 0; i < v.length; i++) {
            if (mid % v[i] == 0) {
                ans = true;
                break;
            }
        }
        return ans;
    }

    void solve(int[] coins, int index, int noe, long lcmm) {
        if (index == coins.length) {
            if (noe == 0) return;
            if (noe % 2 == 1)
                v.add(lcmm);
            else
                v.add(-1 * lcmm);
            return;
        }

        long newLcmm = lcm(coins[index], lcmm);
        solve(coins, index + 1, noe + 1, newLcmm);
        solve(coins, index + 1, noe, lcmm);
    }

    public long findKthSmallest(int[] coins, int k) {
        solve(coins, 0, 0, 1);
        long low = 1, high = (long) 1e12, K = k, ans = 0;

        while (low <= high) {
            long mid = low + (high - low) / 2;
            long cnt = getCount(mid);

            if (cnt > K)
                high = mid - 1;
            else if (cnt < K)
                low = mid + 1;
            else {
                ans = mid;
                high = mid - 1;
            }
        }

        return ans;
    }
}
