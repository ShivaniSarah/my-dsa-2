https://leetcode.com/problems/minimum-operations-to-make-the-array-k-increasing/description/

2111. Minimum Operations to Make the Array K-Increasing
Hard
Topics
Companies
Hint
You are given a 0-indexed array arr consisting of n positive integers, and a positive integer k.

The array arr is called K-increasing if arr[i-k] <= arr[i] holds for every index i, where k <= i <= n-1.

For example, arr = [4, 1, 5, 2, 6, 2] is K-increasing for k = 2 because:
arr[0] <= arr[2] (4 <= 5)
arr[1] <= arr[3] (1 <= 2)
arr[2] <= arr[4] (5 <= 6)
arr[3] <= arr[5] (2 <= 2)
However, the same arr is not K-increasing for k = 1 (because arr[0] > arr[1]) or k = 3 (because arr[0] > arr[3]).
In one operation, you can choose an index i and change arr[i] into any positive integer.

Return the minimum number of operations required to make the array K-increasing for the given k.

 

Example 1:

Input: arr = [5,4,3,2,1], k = 1
Output: 4
Explanation:
For k = 1, the resultant array has to be non-decreasing.
Some of the K-increasing arrays that can be formed are [5,6,7,8,9], [1,1,1,1,1], [2,2,3,4,4]. All of them require 4 operations.
It is suboptimal to change the array to, for example, [6,7,8,9,10] because it would take 5 operations.
It can be shown that we cannot make the array K-increasing in less than 4 operations.
Example 2:

Input: arr = [4,1,5,2,6,2], k = 2
Output: 0
Explanation:
This is the same example as the one in the problem description.
Here, for every index i where 2 <= i <= 5, arr[i-2] <= arr[i].
Since the given array is already K-increasing, we do not need to perform any operations.
Example 3:

Input: arr = [4,1,5,2,6,2], k = 3
Output: 2
Explanation:
Indices 3 and 5 are the only ones not satisfying arr[i-3] <= arr[i] for 3 <= i <= 5.
One of the ways we can make the array K-increasing is by changing arr[3] to 4 and arr[5] to 5.
The array will now be [4,1,5,4,6,5].
Note that there can be other ways to make the array K-increasing, but none of them require less than 2 operations.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i], k <= arr.length



# java


class Solution {
  public int kIncreasing(int[] arr1, int k) {
    int ans = 0;

    for (int i = 0; i < k; ++i) {
      List<Integer> arr = new ArrayList<>();
      for (int j = i; j < arr1.length; j += k)
        arr.add(arr1[j]);
      ans += numReplaced(arr);
    }

    return ans;
  }

  private int numReplaced(List<Integer> arr) {
    List<Integer> tails = new ArrayList<>();
    for (final int a : arr)
      if (tails.isEmpty() || tails.get(tails.size() - 1) <= a)
        tails.add(a);
      else
        tails.set(firstGreater(tails, a), a);
    return arr.size() - tails.size();
  }

  private int firstGreater(List<Integer> arr, int target) {
    final int i = Collections.binarySearch(arr, target + 1);
    return i < 0 ? -i - 1 : i;
  }
}


or


class Solution {
    public int kIncreasing(int[] arr, int k) {
        int n = arr.length;
        int ans = 0;
        for (int i = 0; i < k; ++i) {
            List<Integer> t = new ArrayList<>();
            for (int j = i; j < n; j += k) {
                t.add(arr[j]);
            }
            ans += lis(t);
        }
        return ans;
    }

    private int lis(List<Integer> arr) {
        List<Integer> t = new ArrayList<>();
        for (int x : arr) {
            int idx = searchRight(t, x);
            if (idx == t.size()) {
                t.add(x);
            } else {
                t.set(idx, x);
            }
        }
        return arr.size() - t.size();
    }

    private int searchRight(List<Integer> arr, int x) {
        int left = 0, right = arr.size();
        while (left < right) {
            int mid = (left + right) >> 1;
            if (arr.get(mid) > x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}


or


class Solution {
  public int kIncreasing(int[] arr, int k) {
    int total = 0;
    for(int i=0; i < k; i++){
      List<Integer> list = new ArrayList<>();
      for(int j=i; j < arr.length; j = j+k)
        list.add(arr[j]);
      total += list.size() - lengthOfLIS(list);
    }
    return total;
  }
  
  // Get the length of LIS by building an increasing List so as to perform binary search on it 
  // in case the current element is lesser than the last element in the increasing List. 
  // In such case we get the next greater element from the increasing List by doing a binary Search and 
  // replace that with the the current element in the increasing List, as the other element is no longer relevant in participating in LIS. 
  // The increasing List remains sorted and always maintain the max length of the increasing subsequence.
  public int lengthOfLIS(List<Integer> nums){
    List<Integer> incrList = new ArrayList<>();
    incrList.add(nums.get(0));

    for(int i=1; i < nums.size(); i++){
      int lastItem = incrList.get(incrList.size()-1);
      if(nums.get(i) >= lastItem){
        incrList.add(nums.get(i));
      } else {
        int idx = nextGreaterItem(incrList, nums.get(i));
        incrList.set(idx, nums.get(i));
      }
    }
    return incrList.size();
  }

  // Perform Binary Search to get the next greater element
  int nextGreaterItem(List<Integer> list, int num){
    int left = 0, right = list.size()-1;
    while(left < right) {
      int mid = left + (right - left) / 2;
      if(num >= list.get(mid))
        left = mid + 1;
      else
        right = mid;
    }
    return left;
  }
}
