https://leetcode.com/problems/closest-room/description/


1847. Closest Room
Hard
Topics
Companies
Hint
There is a hotel with n rooms. The rooms are represented by a 2D integer array rooms where rooms[i] = [roomIdi, sizei] denotes that there is a room with room number roomIdi and size equal to sizei. Each roomIdi is guaranteed to be unique.

You are also given k queries in a 2D array queries where queries[j] = [preferredj, minSizej]. The answer to the jth query is the room number id of a room such that:

The room has a size of at least minSizej, and
abs(id - preferredj) is minimized, where abs(x) is the absolute value of x.
If there is a tie in the absolute difference, then use the room with the smallest such id. If there is no such room, the answer is -1.

Return an array answer of length k where answer[j] contains the answer to the jth query.

 

Example 1:

Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]
Output: [3,-1,3]
Explanation: The answers to the queries are as follows:
Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.
Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.
Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.
Example 2:

Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]
Output: [2,1,3]
Explanation: The answers to the queries are as follows:
Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.
Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.
Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.
 

Constraints:

n == rooms.length
1 <= n <= 105
k == queries.length
1 <= k <= 104
1 <= roomIdi, preferredj <= 107
1 <= sizei, minSizej <= 107


# java


class Solution {
    public int[] closestRoom(int[][] rooms, int[][] queries) {
        Arrays.sort(rooms,new Pair());
        int[] ans=new int[queries.length];
        
        for(int i=0;i<ans.length;i++){
            int size=queries[i][1];
            int p=queries[i][0];
            
            int start=binarySearch(rooms,size);
            if(start==-1){
                ans[i]=-1;
                continue;
            }
            
            int index=find(rooms,start,p);
            ans[i]=rooms[index][0];
        }
        return ans;
    }
    
    private int find(int[][] rooms,int start,int p){
        int ans=start;
        int min=Math.abs(rooms[start][0]-p);
        for(int i=start+1;i<rooms.length;i++){
            int diff=Math.abs(rooms[i][0]-p);
            if(diff<min){
                min=diff;
                ans=i;
            }else if(diff==min){
                if(rooms[i][0]<rooms[ans][0]){
                    ans=i;
                }
            }
        }
        return ans;
    }
    
    private int binarySearch(int[][] rooms,int size){
        int lo=0 , hi=rooms.length-1;
        int ans=-1;
        while(lo<=hi){
            int mid=lo + (hi-lo)/2;
            
            if(rooms[mid][1]<size){
                lo=mid+1;
            }else{
                ans=mid;
                hi=mid-1;
            }
        }
        return ans;
    }
    
    public class Pair implements Comparator<int[]>{
        public int compare(int[] one,int[] two){
            return one[1]-two[1];
        }
    }
}



or


class Solution {
    public int[] closestRoom(int[][] rooms, int[][] queries) {
        int n = rooms.length;
        int k = queries.length;
        Arrays.sort(rooms, (a, b) -> a[1] - b[1]);
        Integer[] idx = new Integer[k];
        for (int i = 0; i < k; i++) {
            idx[i] = i;
        }
        Arrays.sort(idx, (i, j) -> queries[i][1] - queries[j][1]);
        int i = 0;
        TreeMap<Integer, Integer> tm = new TreeMap<>();
        for (int[] room : rooms) {
            tm.merge(room[0], 1, Integer::sum);
        }
        int[] ans = new int[k];
        Arrays.fill(ans, -1);
        for (int j : idx) {
            int prefer = queries[j][0], minSize = queries[j][1];
            while (i < n && rooms[i][1] < minSize) {
                if (tm.merge(rooms[i][0], -1, Integer::sum) == 0) {
                    tm.remove(rooms[i][0]);
                }
                ++i;
            }
            if (i == n) {
                break;
            }
            Integer p = tm.ceilingKey(prefer);
            if (p != null) {
                ans[j] = p;
            }
            p = tm.floorKey(prefer);
            if (p != null && (ans[j] == -1 || ans[j] - prefer >= prefer - p)) {
                ans[j] = p;
            }
        }
        return ans;
    }
}


or


class Solution {
  public int[] closestRoom(int[][] rooms, int[][] queries) {
    int[] ans = new int[queries.length];
    Integer[] indices = new Integer[queries.length];
    TreeSet<Integer> roomIds = new TreeSet<>();

    for (int i = 0; i < queries.length; ++i)
      indices[i] = i;

    Arrays.sort(rooms, Comparator.comparingInt(room -> - room[1]));
    Arrays.sort(indices, Comparator.comparingInt(index -> - queries[index][1]));

    int i = 0; // rooms' index
    for (final int index : indices) {
      while (i < rooms.length && rooms[i][1] >= queries[index][1])
        roomIds.add(rooms[i++][0]);
      ans[index] = searchClosestRoomId(roomIds, queries[index][0]);
    }

    return ans;
  }

  private int searchClosestRoomId(TreeSet<Integer> roomIds, int preferred) {
    Integer floor = roomIds.floor(preferred);
    Integer ceiling = roomIds.ceiling(preferred);
    final int id1 = floor == null ? -1 : floor;
    final int id2 = ceiling == null ? -1 : ceiling;
    if (id1 == -1)
      return id2;
    if (id2 == -1)
      return id1;
    if (Math.abs(preferred - id1) <= Math.abs(preferred - id2))
      return id1;
    return id2;
  }
}


or


import java.util.*;

class Solution {

    // Nested class to represent a room
    class Room {
        private int id;
        private int size;
        private int index; 

        // Constructor to initialize room attributes
        public Room(int id, int size, int index) {
            this.id = id;
            this.size = size;
            this.index = index;
        }

        // Getter method for room ID
        public int getId() {
            return id;
        }

        // Getter method for room size
        public int getSize() {
            return size;
        }

        // Getter method for room index in the original array
        public int getIndex() {
            return index;
        }

        // Override toString() method for better representation of Room object
        @Override
        public String toString() {
            return "Room{" +
                    "id=" + id +
                    ", size=" + size + ", index=" + index +
                    '}';
        }
    }

    // Method to find the closest room to each query
    public int[] closestRoom(int[][] rooms, int[][] queries) {
        // Comparator based on size and index
        Comparator<Room> roomComparator = Comparator
                .comparingInt(Room::getSize) // Compare rooms by size
                .thenComparingInt(Room::getIndex); // If sizes are equal, compare by index

        // TreeMap sorted by room size and index
        TreeMap<Room, List<Integer>> sortedSize = new TreeMap<>(roomComparator);
        // TreeMap to store room IDs mapped to their indices in the original array
        TreeMap<Integer, Integer> sortedID = new TreeMap<>();

        // Populate sortedSize and sortedID maps
        for (int i = 0; i < rooms.length; i++) {
            // Create a Room object for the current room with its attributes
            Room room = new Room(rooms[i][0], rooms[i][1], i);
            // Add room to sortedSize with an empty list for query indices
            sortedSize.put(room, new ArrayList<>());
            // Add room ID to sortedID mapped to its index in the original array
            sortedID.put(rooms[i][0], i);
        }

        // Processing queries and populating sortedSize
        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int minRoomSize = query[1];
            // Find the smallest room greater than or equal to the query's minimum size
            Room foundRoom = sortedSize.ceilingKey(new Room(-1, minRoomSize, 0)); // Initialize index with 0
            if (foundRoom != null) {
                // Add query index to the list corresponding to the found room in sortedSize
                sortedSize.get(foundRoom).add(i);
            }
        }

        // Initialize the result array
        int[] res = new int[queries.length];
        Arrays.fill(res, -1);
       
        // Processing queries and populating result array
        for (Room room : sortedSize.keySet()) {
            for (int qIndex : sortedSize.get(room)) {
                int desiredRoomID = queries[qIndex][0];
                // Find the room ID just greater or equal to the desired room ID
                Integer justGreater = sortedID.ceilingKey(desiredRoomID);
                // Find the room ID just smaller or equal to the desired room ID
                Integer justSmaller = sortedID.floorKey(desiredRoomID);
                // Choose the closest room ID based on absolute difference
                if (justGreater == null) {
                    res[qIndex] = justSmaller;
                } else if (justSmaller == null) {
                    res[qIndex] = justGreater;
                } else {
                    if (Math.abs(desiredRoomID - justGreater) < Math.abs(desiredRoomID - justSmaller)) {
                        res[qIndex] = justGreater;
                    } else {
                        res[qIndex] = justSmaller;
                    }
                }
            }
            // Remove the processed room ID from sortedID
            sortedID.remove(room.getId());
        }

        return res;
    }
}


or


import java.util.*;

class Solution {

    public int[] closestRoom(int[][] rooms, int[][] queries) {

        //rooms sort is room size
        //queries append index (result[i])
        //queries sort is room size

        int row = queries.length;
        int[] result = new int[queries.length];

        Arrays.sort(rooms, (a, b) -> b[1] - a[1]);

        int[][] query = new int[row][3];
        for (int i = 0; i < queries.length; i++) {
            query[i][0] = queries[i][0];
            query[i][1] = queries[i][1];
            query[i][2] = i;
        }

        //query sort room size
        Arrays.sort(query, (a, b) -> b[1] - a[1]);
        int idx = 0;
        TreeSet<Integer> set = new TreeSet<Integer>();

        for (int i = 0; i < query.length; i++) {
            //room size > query room size => after room id check
            while (idx < rooms.length && rooms[idx][1] >= query[i][1]) {
                set.add(rooms[idx++][0]);
            }

            //treeMap idx (Binary Search)
            Integer floor = set.floor(query[i][0]);
            Integer ceil = set.ceiling(query[i][0]);

            if (floor == null && ceil == null)
                result[query[i][2]] = -1; //not index

            else if (floor == null)
                result[query[i][2]] = ceil;

            else if (ceil == null)
                result[query[i][2]] = floor;

            else
                result[query[i][2]] = ceil - query[i][0] >= query[i][0] - floor ? floor : ceil;
        }

        return result;
    }
}



or

class Solution {
    public int[] closestRoom(int[][] rooms, int[][] queries) {
        
        int numRoom = rooms.length;
        int numQuery = queries.length;
        
        
        for(int i = 0; i < numQuery; i++){
			//append index
            queries[i] = new int[]{queries[i][0], queries[i][1], i};
        }
        
        //sort the roos and queries in increasing order of room size
        Arrays.sort(rooms, (a, b) -> (a[1] != b[1] ? (a[1] - b[1]) : (a[0] - b[0])));
        Arrays.sort(queries, (a, b) -> (a[1] != b[1] ? (a[1] - b[1]) : (a[0] - b[0])));
        
        TreeSet<Integer> roomIds = new TreeSet();
        int[] result = new int[numQuery];
        
        int j = numRoom - 1;
        for(int i = numQuery - 1; i >= 0; i--){
            
            int currRoomId = queries[i][0];
            int currRoomSize = queries[i][1];
            int currQueryIndex = queries[i][2];
            
            //add all the which size is greater or equal than query room size
            while(j >= 0 && rooms[j][1] >= currRoomSize){
                roomIds.add(rooms[j--][0]);
            }
            
            //found room with sufficient size,
            if(roomIds.contains(currRoomId)){
                //directly add this room
                result[currQueryIndex] = currRoomId;
                continue;
            }
            
            //next room which is just greater that current roomId
            Integer nextRoomId = roomIds.higher(currRoomId);
            
            //previous roomId which is just smaller than current roomId
            Integer prevRoomId = roomIds.lower(currRoomId);
            
            if(nextRoomId == null && prevRoomId == null){
                //no nearest roomId 
                result[currQueryIndex] = -1;
                
            }else if(nextRoomId == null){
                
                result[currQueryIndex] = prevRoomId;
                
            }else if(prevRoomId == null){
                
                result[currQueryIndex] = nextRoomId;
                
            }else if(nextRoomId != null && prevRoomId != null){
                //get the nearest roomId
                if((currRoomId - prevRoomId) <= (nextRoomId - currRoomId)){
                    result[currQueryIndex] = prevRoomId;
                }else{
                    result[currQueryIndex] = nextRoomId;
                }
            }
            
        }
        
        return result;
    }
}
