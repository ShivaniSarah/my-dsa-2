https://leetcode.com/problems/maximum-number-of-tasks-you-can-assign/description/

2071. Maximum Number of Tasks You Can Assign
Hard
Topics
Companies
Hint
You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

 

Example 1:

Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)
Example 2:

Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
Output: 1
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 0 (0 + 5 >= 5)
Example 3:

Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
Output: 2
Explanation:
We can assign the magical pills and tasks as follows:
- Give the magical pill to worker 0 and worker 1.
- Assign worker 0 to task 0 (0 + 10 >= 10)
- Assign worker 1 to task 1 (10 + 10 >= 15)
The last pill is not given because it will not make any worker strong enough for the last task.
 

Constraints:

n == tasks.length
m == workers.length
1 <= n, m <= 5 * 104
0 <= pills <= m
0 <= tasks[i], workers[j], strength <= 109


# java


class Solution {
    private int[] tasks;
    private int[] workers;
    private int strength;
    private int pills;
    private int m;
    private int n;

    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        this.tasks = tasks;
        this.workers = workers;
        this.strength = strength;
        this.pills = pills;
        n = tasks.length;
        m = workers.length;
        int left = 0, right = Math.min(m, n);
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            if (check(mid)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int x) {
        int i = 0;
        Deque<Integer> q = new ArrayDeque<>();
        int p = pills;
        for (int j = m - x; j < m; ++j) {
            while (i < x && tasks[i] <= workers[j] + strength) {
                q.offer(tasks[i++]);
            }
            if (q.isEmpty()) {
                return false;
            }
            if (q.peekFirst() <= workers[j]) {
                q.pollFirst();
            } else if (p == 0) {
                return false;
            } else {
                --p;
                q.pollLast();
            }
        }
        return true;
    }
}


or


class Solution {
  public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
    int ans = 0;
    int l = 0;
    int r = Math.min(tasks.length, workers.length);

    Arrays.sort(tasks);
    Arrays.sort(workers);

    while (l <= r) {
      final int m = (l + r) / 2;
      if (canComplete(tasks, workers, pills, strength, m)) {
        ans = m;
        l = m + 1;

      } else {
        r = m - 1;
      }
    }

    return ans;
  }

  // Returns true if we can finish k tasks.
  private boolean canComplete(int[] tasks, int[] workers, int pillsLeft, int strength, int k) {
    // k strongest workers
    TreeMap<Integer, Integer> sortedWorkers = new TreeMap<>();
    for (int i = workers.length - k; i < workers.length; ++i)
      sortedWorkers.merge(workers[i], 1, Integer::sum);

    // Out of the k smallest tasks, start from the biggest one.
    for (int i = k - 1; i >= 0; --i) {
      // Find the first worker that has strength >= tasks[i].
      Integer lo = sortedWorkers.ceilingKey(tasks[i]);
      if (lo != null) {
        sortedWorkers.merge(lo, -1, Integer::sum);
        if (sortedWorkers.get(lo) == 0) {
          sortedWorkers.remove(lo);
        }
      } else if (pillsLeft > 0) {
        // Find the first worker that has strength >= tasks[i] - strength.
        lo = sortedWorkers.ceilingKey(tasks[i] - strength);
        if (lo != null) {
          sortedWorkers.merge(lo, -1, Integer::sum);
          if (sortedWorkers.get(lo) == 0) {
            sortedWorkers.remove(lo);
          }
          --pillsLeft;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }

    return true;
  }
}

or

class Solution {
      public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int i : workers)
        	map.put(i, map.getOrDefault(i, 0) + 1);
        int res = 0, left = 0, right = Math.min(tasks.length, workers.length) - 1; 
        while (left <= right) {
        	int mid = (left + right) / 2;
        	if (validate(tasks, (TreeMap<Integer, Integer>)map.clone(), pills, strength, mid))
        		res = left = mid + 1;
        	else
        		right = mid - 1;
        }
        return res;
    }
    boolean validate(int[] tasks, TreeMap<Integer, Integer> map, int pills, int strength, int pos) {
    	for (; pos >= 0; pos--) {
	    	int maxStrength = map.lastKey(), t = tasks[pos];
	    	if (pills > 0 && strength + maxStrength < t || pills == 0 && maxStrength < t)
	    		return false;
	    	if (maxStrength < t) {
	    		t -= strength;
	    		pills--;
	    	}
    		int matchStrength = map.ceilingKey(t);
    		if (map.get(matchStrength) > 1)
    			map.put(matchStrength, map.get(matchStrength) - 1);
    		else
    			map.remove(matchStrength);
    	}
    	return true;
    }
}


or

class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);
        int m = tasks.length, n = workers.length;
        int start = 0, end = Math.min(m, n);
        while(start < end) {
            int mid = (end - start) / 2 + start;
            boolean isDone = true;  
            TreeMap<Integer, Integer> map = new TreeMap<>();
            for(int w : workers) {
                map.put(w, map.getOrDefault(w, 0) + 1);
            }
            int tries = pills;
            for(int i = mid; i >= 0; i--) {
                int w = map.lastKey();
                if(tasks[i] <= w) {// use the strongest workers for "easy tasks"
                    map.put(w, map.get(w) - 1);
                    if(map.get(w) == 0) map.remove(w);
                } else {   // use pill for qualify workers if the worker exists. If not, we exit the for-loop and try smaller size of tasks 
                    Integer w1 = map.ceilingKey(tasks[i] - strength);
                    if(w1 != null) {
                        tries --;
                        map.put(w1, map.get(w1) - 1);
                        if(map.get(w1) == 0) map.remove(w1);
                    } else {
                        isDone = false;
                        break;
                    }
                }
                if(tries < 0) {
                    isDone = false;
                    break;
                }
            }
            if(isDone) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }
        return start;
    }
}

or



import java.util.Collection;class Solution {
  
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
     int len = workers.length;
        Arrays.sort(tasks);
        Arrays.sort(workers);

        int left = len - Math.min(tasks.length, workers.length);
        int right = len;

        while (left < right) {
            int mid = (left + right) / 2;
            boolean canComplete = gg(tasks, workers, pills, strength, mid);
            
            if (canComplete) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }

        return len - left;
    }

    boolean gg(int[] tasks, int[] workers, int pills, int strength,int begin)
    {
        Deque<Integer>d=new LinkedList<>();
        if(begin==workers.length)
            return false;
        int i=0;
        for(int j=begin;j<workers.length;j++)
        {
            if(!d.isEmpty())
            {
                if(d.peek()<=workers[j])
                    d.poll();
                else{
                    if(pills==0)
                        return false;
                    while(i<tasks.length&&tasks[i]<=workers[j]+strength)
                        d.add(tasks[i++]);
                    d.pollLast();
                    pills--;
                }
            }
            else
                if(i==tasks.length)
                    return false;
                else if(tasks[i]<=workers[j])
                    i++;
                else
                    if(pills==0)
                        return false;
                else{
                 while(i<tasks.length&&tasks[i]<=workers[j]+strength)
                        d.add(tasks[i++]);
                    if(d.isEmpty())
                        return false;
                    d.pollLast();
                    pills--;
                }
        }
        return true;
    }
    
   
}
