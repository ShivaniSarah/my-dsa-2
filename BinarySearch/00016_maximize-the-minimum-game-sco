https://leetcode.com/problems/maximize-the-minimum-game-score/description/

3449. Maximize the Minimum Game Score
Hard
Topics
Companies
Hint
You are given an array points of size n and an integer m. There is another array gameScore of size n, where gameScore[i] represents the score achieved at the ith game. Initially, gameScore[i] == 0 for all i.

You start at index -1, which is outside the array (before the first position at index 0). You can make at most m moves. In each move, you can either:

Increase the index by 1 and add points[i] to gameScore[i].
Decrease the index by 1 and add points[i] to gameScore[i].
Note that the index must always remain within the bounds of the array after the first move.

Return the maximum possible minimum value in gameScore after at most m moves.

 

Example 1:

Input: points = [2,4], m = 3

Output: 4

Explanation:

Initially, index i = -1 and gameScore = [0, 0].

Move	Index	gameScore
Increase i	0	[2, 0]
Increase i	1	[2, 4]
Decrease i	0	[4, 4]
The minimum value in gameScore is 4, and this is the maximum possible minimum among all configurations. Hence, 4 is the output.

Example 2:

Input: points = [1,2,3], m = 5

Output: 2

Explanation:

Initially, index i = -1 and gameScore = [0, 0, 0].

Move	Index	gameScore
Increase i	0	[1, 0, 0]
Increase i	1	[1, 2, 0]
Decrease i	0	[2, 2, 0]
Increase i	1	[2, 4, 0]
Increase i	2	[2, 4, 3]
The minimum value in gameScore is 2, and this is the maximum possible minimum among all configurations. Hence, 2 is the output.

 

Constraints:

2 <= n == points.length <= 5 * 104
1 <= points[i] <= 106
1 <= m <= 109


# java


class Solution {
  public long maxScore(int[] points, int m) {
    long l = 0;
    long r = ((long) m + 1) / 2 * points[0] + 1;

    while (l < r) {
      final long mid = (l + r + 1) / 2;
      if (isPossible(points, mid, m))
        l = mid;
      else
        r = mid - 1;
    }

    return l;
  }

  // Returns true if it is possible to achieve the maximum minimum value `x`
  // with `m` number of moves.
  private boolean isPossible(int[] points, long minVal, long m) {
    long moves = 0;
    long prevMoves = 0; // to track remaining moves from the previous point
    for (int i = 0; i < points.length; ++i) {
      // ceil(minVal / point)
      final long required = Math.max(0, (minVal + points[i] - 1) / points[i] - prevMoves);
      if (required > 0) {
        moves += 2L * required - 1;
        prevMoves = required - 1;
      } else if (i + 1 < points.length) {
        moves += 1;
        prevMoves = 0;
      }
      if (moves > m)
        return false;
    }
    return true;
  }
}

or

class Solution {
    private boolean possible(long t, int[] pts, int M) {
        long mv = 0, ext = 0, bon = 0;
        for (int p : pts) {
            long req = (t + p - 1L) / p;
            if (ext >= req) { ext = 0; bon++; }
            else { long d = req - ext; mv += 2 * d - 1 + bon; ext = d - 1; bon = 0; }
            if (mv > M) return false;
        }
        return true;
    }
    public long maxScore(int[] pts, int M) {
        if (M < pts.length) return 0;
        long lo = 1, hi = (long)1e18, ans = 0;
        while (lo <= hi) {
            long mid = lo + (hi - lo) / 2;
            if (possible(mid, pts, M)) { ans = mid; lo = mid + 1; }
            else hi = mid - 1;
        }
        return ans;
    }
}

or


class Solution {
        public long maxScore(int[] A, int m) {
        long l = 0, r = 1L * (m + 1) / 2 * A[0];
        while (l < r) {
            long mid = (l + r + 1) / 2;
            if (check(A, mid, m)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }
    private boolean check(int[] A, long target, int m) {
        long res = 0, k = 0;
        int n = A.length;
        for (int i = 0; i < n; ++i) {
            if (i == n - 1 && 1L * k * A[i] >= target) break;
            k = Math.max((target + A[i] - 1) / A[i] - k - 1, 0);
            res += k * 2 + 1;
            if (res > m) {
                return false;
            }
        }
        return true;
    }
}

