https://leetcode.com/problems/find-the-longest-valid-obstacle-course-at-each-position/description/


1964. Find the Longest Valid Obstacle Course at Each Position
Hard
Topics
Companies
Hint
You want to build some obstacle courses. You are given a 0-indexed integer array obstacles of length n, where obstacles[i] describes the height of the ith obstacle.

For every index i between 0 and n - 1 (inclusive), find the length of the longest obstacle course in obstacles such that:

You choose any number of obstacles between 0 and i inclusive.
You must include the ith obstacle in the course.
You must put the chosen obstacles in the same order as they appear in obstacles.
Every obstacle (except the first) is taller than or the same height as the obstacle immediately before it.
Return an array ans of length n, where ans[i] is the length of the longest obstacle course for index i as described above.

 

Example 1:

Input: obstacles = [1,2,3,2]
Output: [1,2,3,3]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [1], [1] has length 1.
- i = 1: [1,2], [1,2] has length 2.
- i = 2: [1,2,3], [1,2,3] has length 3.
- i = 3: [1,2,3,2], [1,2,2] has length 3.
Example 2:

Input: obstacles = [2,2,1]
Output: [1,2,1]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [2], [2] has length 1.
- i = 1: [2,2], [2,2] has length 2.
- i = 2: [2,2,1], [1] has length 1.
Example 3:

Input: obstacles = [3,1,5,6,4,2]
Output: [1,1,2,3,2,2]
Explanation: The longest valid obstacle course at each position is:
- i = 0: [3], [3] has length 1.
- i = 1: [3,1], [1] has length 1.
- i = 2: [3,1,5], [3,5] has length 2. [1,5] is also valid.
- i = 3: [3,1,5,6], [3,5,6] has length 3. [1,5,6] is also valid.
- i = 4: [3,1,5,6,4], [3,4] has length 2. [1,4] is also valid.
- i = 5: [3,1,5,6,4,2], [1,2] has length 2.
 

Constraints:

n == obstacles.length
1 <= n <= 105
1 <= obstacles[i] <= 107

# java

class Solution {
  // Similar to 300. Longest Increasing Subsequence
  public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
    List<Integer> ans = new ArrayList<>();
    // tails[i] := the minimum tail of all the increasing subsequences with
    // length i + 1
    List<Integer> tails = new ArrayList<>();

    for (final int obstacle : obstacles)
      if (tails.isEmpty() || obstacle >= tails.get(tails.size() - 1)) {
        tails.add(obstacle);
        ans.add(tails.size());
      } else {
        final int index = firstGreater(tails, obstacle);
        tails.set(index, obstacle);
        ans.add(index + 1);
      }

    return ans.stream().mapToInt(Integer::intValue).toArray();
  }

  private int firstGreater(List<Integer> arr, int target) {
    int l = 0;
    int r = arr.size();
    while (l < r) {
      final int m = (l + r) / 2;
      if (arr.get(m) > target)
        r = m;
      else
        l = m + 1;
    }
    return l;
  }
}


or


class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        c = new int[n + 1];
    }

    public void update(int x, int v) {
        while (x <= n) {
            c[x] = Math.max(c[x], v);
            x += x & -x;
        }
    }

    public int query(int x) {
        int s = 0;
        while (x > 0) {
            s = Math.max(s, c[x]);
            x -= x & -x;
        }
        return s;
    }
}

class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] nums = obstacles.clone();
        Arrays.sort(nums);
        int n = nums.length;
        int[] ans = new int[n];
        BinaryIndexedTree tree = new BinaryIndexedTree(n);
        for (int k = 0; k < n; ++k) {
            int x = obstacles[k];
            int i = Arrays.binarySearch(nums, x) + 1;
            ans[k] = tree.query(i) + 1;
            tree.update(i, ans[k]);
        }
        return ans;
    }
}


or


class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int[] stack = new int[obstacles.length];
        int top = -1;
        int[] res = new int[obstacles.length];
        for (int i = 0; i < obstacles.length; i++) {
            if (top == -1 || obstacles[i] >= stack[top]) {
                stack[++top] = obstacles[i];
                res[i] = top + 1;
            } else {
                int l = 0, r = top, m;
                while (l < r) {
                    m = l + (r - l) / 2;
                    if (stack[m] <= obstacles[i]) {
                        l = m + 1;
                    } else {
                        r = m;
                    }
                }
                stack[r] = obstacles[i];
                res[i] = r + 1;
            }
        }
        return res;
    }
}

or

class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
        int n = obstacles.length;
        int[] dp = new int[n];  // stores the smallest ending number of an increasing subsequence
        int[] ans = new int[n]; // stores the length of the longest increasing subsequence that includes each obstacle
        
        int len = 0; // length of the longest increasing subsequence seen so far
        
        for (int i = 0; i < n; i++) {
            int idx = binarySearch(dp, 0, len - 1, obstacles[i]); // find the position where we can add the current obstacle
            
            dp[idx] = obstacles[i]; // add the current obstacle to the dp array at the correct position
            
            if (idx == len) { // if we added the current obstacle to the end of the dp array
                len++; // update the length of the longest increasing subsequence seen so far
            }
            
            ans[i] = idx + 1; // update the length of the longest increasing subsequence that includes the i-th obstacle
        }
        
        return ans;
    }
    
    // binary search to find the position where we can add the current obstacle in the dp array
    private int binarySearch(int[] dp, int left, int right, int target) {
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (dp[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }
}


or


class Solution {
   public int[] longestObstacleCourseAtEachPosition(int[] nums) {
    List<Integer> lkp = new ArrayList();
    int[] result = new int[nums.length];
    result[0] = 1;
    lkp.add(nums[0]);
    for(int i=1; i<nums.length; i++){
        if(lkp.get(lkp.size()-1) <= nums[i]){
            lkp.add(nums[i]);
            result[i] = lkp.size();
        }else{
            int itr =0;
            while(itr < lkp.size() && lkp.get(itr) <= nums[i]) itr++;
            lkp.set(itr, nums[i]);
            result[i] = itr+1;
        }
    }
    return result; 
}
}


or


// best


class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obstacles) {
    int length = obstacles.length;
    int longestObstacleCourse[] = new int[length]; // array to store the length of the longest obstacle course for each index i
    int lis[] = new int[length]; // array to store the lowest increasing subsequence of length i+1 seen so far
    int lisLength = 0; // variable to keep track of the length of the longest increasing subsequence seen so far
    for (int i = 0; i < length; i++) {
        int left = 0, right = lisLength;
        // perform binary search to find the rightmost insertion position for the current obstacle in the lis array
        while (left < right) {
            int middle = (left + right) >> 1;
            if (lis[middle] <= obstacles[i]) left = middle + 1;
            else right = middle;
        }
        // update the lis array with the current obstacle at the rightmost insertion position if the current obstacle is smaller than the obstacle at the rightmost insertion position
        if (left >= lisLength || lis[left] > obstacles[i]) lis[left] = obstacles[i];
        // if the rightmost insertion position is equal to lisLength, increment lisLength by 1
        if (left == lisLength) lisLength++;
        // update the longestObstacleCourse array with the length of the increasing subsequence seen so far, which is equal to the rightmost insertion position plus 1
        longestObstacleCourse[i] = left + 1;
    }
    return longestObstacleCourse; // return the longestObstacleCourse array as the final result
}
}
/*Time: O(nlogn)
Space: O(n)*/


or


class Solution {
    public int[] longestObstacleCourseAtEachPosition(int[] obs) {
        int n = obs.length, ans[] = new int[n];
        ArrayList<Integer> tmp = new ArrayList<>();
        tmp.add(obs[0]);
        ans[0] = 1;

        for (int i = 1; i < n; i++) {
            if (obs[i] >= tmp.get(tmp.size() - 1)) {
                tmp.add(obs[i]);
                ans[i] = tmp.size();
            } else {
                int ind = upper_bound(tmp, obs[i]);
                tmp.set(ind, obs[i]);
                ans[i] = ind + 1;
            }
        }
        return ans;
    }

    private int upper_bound(ArrayList<Integer> nums, int tar) {
        int l = 0, r = nums.size() - 1, ans = nums.size();

        while(l <= r) {
            int mid = (l+r)>>1;
            if(nums.get(mid) <= tar ) l = mid+1;
            else {
                ans = mid;
                r = mid-1;
            }
        }
        return ans;
    }
}
