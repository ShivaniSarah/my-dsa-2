https://leetcode.com/problems/minimum-number-of-increasing-subsequence-to-be-removed/description/

3231. Minimum Number of Increasing Subsequence to Be Removed ðŸ”’
Description
Given an array of integers nums, you are allowed to perform the following operation any number of times:

Remove a strictly increasing subsequence from the array.
Your task is to find the minimum number of operations required to make the array empty.

 

Example 1:

Input: nums = [5,3,1,4,2]

Output: 3

Explanation:

We remove subsequences [1, 2], [3, 4], [5].

Example 2:

Input: nums = [1,2,3,4,5]

Output: 1

Example 3:

Input: nums = [5,4,3,2,1]

Output: 5

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105


# jav




class Solution {
  public int minOperations(int[] nums) {
    // The length of the longest non-increasing subsequence is equal to the
    // number of strictly increasing subsequences needed to cover the entire
    // array. This is because any number in the non-increasing subsequence must
    // use one number from each of the strictly increasing subsequences. e.g.,
    // [4, 3, 1, 2] has 3 strictly increasing subsequences: [4], [3], and [1,
    // 2]. The longest non-increasing subsequences are [4, 3, 1] or [4, 3, 2].
    int[] reversedNums = new int[nums.length];
    for (int i = 0; i < nums.length; ++i)
      reversedNums[i] = nums[nums.length - 1 - i];
    return lengthOfLIS(reversedNums);
  }

  // Similar to 300. Longest Increasing Subsequence
  private int lengthOfLIS(int[] nums) {
    // tails[i] := the minimum tail of all the increasing subsequences having
    // length i + 1
    List<Integer> tails = new ArrayList<>();

    for (final int num : nums)
      if (tails.isEmpty() || num >= tails.get(tails.size() - 1))
        tails.add(num);
      else
        tails.set(firstGreater(tails, num), num);

    return tails.size();
  }

  private int firstGreater(List<Integer> arr, int target) {
    int l = 0;
    int r = arr.size();
    while (l < r) {
      final int m = (l + r) / 2;
      if (arr.get(m) > target)
        r = m;
      else
        l = m + 1;
    }
    return l;
  }
}



or



class Solution {
    public int minOperations(int[] nums) {
        List<Integer> g = new ArrayList<>();
        for (int x : nums) {
            int l = 0, r = g.size();
            while (l < r) {
                int mid = (l + r) >> 1;
                if (g.get(mid) < x) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            if (l == g.size()) {
                g.add(x);
            } else {
                g.set(l, x);
            }
        }
        return g.size();
    }
}


