https://leetcode.com/problems/minimum-time-to-complete-all-tasks/description/

2589. Minimum Time to Complete All Tasks
Hard
Topics
Companies
Hint
There is a computer that can run an unlimited number of tasks at the same time. You are given a 2D integer array tasks where tasks[i] = [starti, endi, durationi] indicates that the ith task should run for a total of durationi seconds (not necessarily continuous) within the inclusive time range [starti, endi].

You may turn on the computer only when it needs to run a task. You can also turn it off if it is idle.

Return the minimum time during which the computer should be turned on to complete all tasks.

 

Example 1:

Input: tasks = [[2,3,1],[4,5,1],[1,5,2]]
Output: 2
Explanation: 
- The first task can be run in the inclusive time range [2, 2].
- The second task can be run in the inclusive time range [5, 5].
- The third task can be run in the two inclusive time ranges [2, 2] and [5, 5].
The computer will be on for a total of 2 seconds.
Example 2:

Input: tasks = [[1,3,2],[2,5,3],[5,6,2]]
Output: 4
Explanation: 
- The first task can be run in the inclusive time range [2, 3].
- The second task can be run in the inclusive time ranges [2, 3] and [5, 5].
- The third task can be run in the two inclusive time range [5, 6].
The computer will be on for a total of 4 seconds.
 

Constraints:

1 <= tasks.length <= 2000
tasks[i].length == 3
1 <= starti, endi <= 2000
1 <= durationi <= endi - starti + 1 



#  java


class Solution {
    public int findMinimumTime(int[][] tasks) {
        Arrays.sort(tasks, (a, b) -> a[1] - b[1]);
        int[] vis = new int[2010];
        int ans = 0;
        for (var task : tasks) {
            int start = task[0], end = task[1], duration = task[2];
            for (int i = start; i <= end; ++i) {
                duration -= vis[i];
            }
            for (int i = end; i >= start && duration > 0; --i) {
                if (vis[i] == 0) {
                    --duration;
                    ans += vis[i] = 1;
                }
            }
        }
        return ans;
    }
}



or


class Solution {
  public int findMinimumTime(int[][] tasks) {
    final int MAX = 2000;
    boolean[] running = new boolean[MAX + 1];

    // Sort tasks by end.
    Arrays.sort(tasks, Comparator.comparingInt(task -> task[1]));

    for (int[] task : tasks) {
      final int start = task[0];
      final int end = task[1];
      final int duration = task[2];
      int neededDuration = duration;
      for (int i = start; i <= end; ++i)
        if (running[i])
          --neededDuration;
      // Greedily run the task as late as possible so that later tasks can run
      // simultaneously.
      for (int i = end; neededDuration > 0; --i) {
        if (!running[i]) {
          running[i] = true;
          --neededDuration;
        }
      }
    }

    return (int) IntStream.range(0, running.length)
        .mapToObj(i -> running[i])
        .filter(r -> r)
        .count();
  }
}


or


class Solution {
    public int findMinimumTime(int[][] tasks) {
        Arrays.sort(tasks,(t1,t2)->(t1[1]==t2[1])?t1[0]-t2[0]:t1[1]-t2[1]);
        Set<Integer> used = new HashSet<>();
        int answer = 0;
        for(int[] task: tasks){
            int usedTime = 0;
            for(int i=task[0];i<=task[1];i++) if(used.contains(i)) usedTime++;
            int time_left = task[2]-usedTime;
            for(int i=task[1];time_left>0;i--){
                if(used.add(i)){
                    answer++;
                    time_left--;
                }
            }
        }
        return answer;
    }
}


or



class Solution {
    public int findMinimumTime(int[][] tasks) {
        int[] line = new int[2001]; 
        Arrays.sort(tasks, (a, b)->Integer.compare(a[1], b[1])); 
        for (var t : tasks) {
            int lo = t[0], hi = t[1], time = t[2]; 
            for (int x = lo; x <= hi && time > 0; ++x) time -= line[x]; 
            for (int x = hi; x >= lo && time > 0; --x) {
                if (line[x] == 0) {
                    line[x] = 1; 
                    --time; 
                }
            }
        }
        return Arrays.stream(line).sum(); 
    }
}



or



class Solution {
    public int findMinimumTime(final int[][] tasks) {
        final boolean[] on = new boolean[2001];

        Arrays.sort(tasks, (a, b) -> a[0] - b[0]);

        int count = 0;

        for(int j = tasks.length - 1; j >= 0; --j) {
            final int[] task = tasks[j];
            final int start = task[0], end = task[1];
            int duration = task[2];

            for(int i = end; i >= start; --i)
                if(on[i])
                    duration--;

            for(int i = start; duration > 0; ++i) {
                if(!on[i]) {
                    on[i] = true;
                    duration--;
                    count++;
                }
            }
        }

        return count;
    }
}
