https://leetcode.com/problems/online-majority-element-in-subarray/

1157. Online Majority Element In Subarray
Hard
Topics
Companies
Hint
Design a data structure that efficiently finds the majority element of a given subarray.

The majority element of a subarray is an element that occurs threshold times or more in the subarray.

Implementing the MajorityChecker class:

MajorityChecker(int[] arr) Initializes the instance of the class with the given array arr.
int query(int left, int right, int threshold) returns the element in the subarray arr[left...right] that occurs at least threshold times, or -1 if no such element exists.
 

Example 1:

Input
["MajorityChecker", "query", "query", "query"]
[[[1, 1, 2, 2, 1, 1]], [0, 5, 4], [0, 3, 3], [2, 3, 2]]
Output
[null, 1, -1, 2]

Explanation
MajorityChecker majorityChecker = new MajorityChecker([1, 1, 2, 2, 1, 1]);
majorityChecker.query(0, 5, 4); // return 1
majorityChecker.query(0, 3, 3); // return -1
majorityChecker.query(2, 3, 2); // return 2
 

Constraints:

1 <= arr.length <= 2 * 104
1 <= arr[i] <= 2 * 104
0 <= left <= right < arr.length
threshold <= right - left + 1
2 * threshold > right - left + 1
At most 104 calls will be made to query.



# java

class MajorityChecker {
  public MajorityChecker(int[] arr) {
    this.arr = arr;
    for (int i = 0; i < arr.length; ++i) {
      if (!numToIndices.containsKey(arr[i]))
        numToIndices.put(arr[i], new ArrayList<>());
      numToIndices.get(arr[i]).add(i);
    }
  }

  public int query(int left, int right, int threshold) {
    for (int i = 0; i < TIMES; ++i) {
      final int randIndex = rand.nextInt(right - left + 1) + left;
      final int num = arr[randIndex];
      List<Integer> indices = numToIndices.get(num);
      final int l = firstGreaterEqual(indices, left);
      final int r = firstGreaterEqual(indices, right + 1);
      if (r - l >= threshold)
        return num;
    }

    return -1;
  }

  private static final int TIMES = 20; // 2^TIMES >> |arr|
  private int[] arr;
  private Map<Integer, List<Integer>> numToIndices = new HashMap<>();
  private Random rand = new Random();

  private int firstGreaterEqual(List<Integer> A, int target) {
    final int i = Collections.binarySearch(A, target);
    return i < 0 ? -i - 1 : i;
  }
}

/**
 * Your MajorityChecker object will be instantiated and called as such:
 * MajorityChecker obj = new MajorityChecker(arr);
 * int param_1 = obj.query(left,right,threshold);
 */




or




class Node {
    int l, r;
    int x, cnt;
}

class SegmentTree {
    private Node[] tr;
    private int[] nums;

    public SegmentTree(int[] nums) {
        int n = nums.length;
        this.nums = nums;
        tr = new Node[n << 2];
        for (int i = 0; i < tr.length; ++i) {
            tr[i] = new Node();
        }
        build(1, 1, n);
    }

    private void build(int u, int l, int r) {
        tr[u].l = l;
        tr[u].r = r;
        if (l == r) {
            tr[u].x = nums[l - 1];
            tr[u].cnt = 1;
            return;
        }
        int mid = (l + r) >> 1;
        build(u << 1, l, mid);
        build(u << 1 | 1, mid + 1, r);
        pushup(u);
    }

    public int[] query(int u, int l, int r) {
        if (tr[u].l >= l && tr[u].r <= r) {
            return new int[] {tr[u].x, tr[u].cnt};
        }
        int mid = (tr[u].l + tr[u].r) >> 1;
        if (r <= mid) {
            return query(u << 1, l, r);
        }
        if (l > mid) {
            return query(u << 1 | 1, l, r);
        }
        var left = query(u << 1, l, r);
        var right = query(u << 1 | 1, l, r);
        if (left[0] == right[0]) {
            left[1] += right[1];
        } else if (left[1] >= right[1]) {
            left[1] -= right[1];
        } else {
            right[1] -= left[1];
            left = right;
        }
        return left;
    }

    private void pushup(int u) {
        if (tr[u << 1].x == tr[u << 1 | 1].x) {
            tr[u].x = tr[u << 1].x;
            tr[u].cnt = tr[u << 1].cnt + tr[u << 1 | 1].cnt;
        } else if (tr[u << 1].cnt >= tr[u << 1 | 1].cnt) {
            tr[u].x = tr[u << 1].x;
            tr[u].cnt = tr[u << 1].cnt - tr[u << 1 | 1].cnt;
        } else {
            tr[u].x = tr[u << 1 | 1].x;
            tr[u].cnt = tr[u << 1 | 1].cnt - tr[u << 1].cnt;
        }
    }
}

class MajorityChecker {
    private SegmentTree tree;
    private Map<Integer, List<Integer>> d = new HashMap<>();

    public MajorityChecker(int[] arr) {
        tree = new SegmentTree(arr);
        for (int i = 0; i < arr.length; ++i) {
            d.computeIfAbsent(arr[i], k -> new ArrayList<>()).add(i);
        }
    }

    public int query(int left, int right, int threshold) {
        int x = tree.query(1, left + 1, right + 1)[0];
        int l = search(d.get(x), left);
        int r = search(d.get(x), right + 1);
        return r - l >= threshold ? x : -1;
    }

    private int search(List<Integer> arr, int x) {
        int left = 0, right = arr.size();
        while (left < right) {
            int mid = (left + right) >> 1;
            if (arr.get(mid) >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}

or


class MajorityChecker {
    
    private final int digits=15;
    private int[][]presum;
    private ArrayList<Integer>[]pos;
    
    public MajorityChecker(int[] arr) {
        int len=arr.length;
        presum=new int[len+1][digits];
        pos=new ArrayList[20001];
        
        for(int i=0;i<len;i++){
            int n=arr[i];
            if(pos[n]==null)pos[n]=new ArrayList();
            pos[n].add(i);
            
            for(int j=0;j<digits;j++){
                presum[i+1][j]=presum[i][j]+(n&1);
                n>>=1;
            }
        }
    }
    
    public int query(int left, int right, int threshold) {
        int ans=0;
        for(int i=digits-1;i>=0;i--){
            int cnt=presum[right+1][i]-presum[left][i];
            int b=1;
            if(cnt>=threshold)b=1;
            else if(right-left+1-cnt>=threshold)b=0;
            else return -1;
            ans=(ans<<1)+b;
        }
        
        // check
        ArrayList<Integer>list=pos[ans];
        if(list==null)return -1;
        int L=floor(list,left-1);
        int R=floor(list,right);
        if(R-L>=threshold)return ans;
        return -1;
    }
    
    private int floor(ArrayList<Integer>list,int n){
        int left=0, right=list.size()-1, mid;
        while(left<=right){
            mid=left+(right-left)/2;
            int index=list.get(mid);
            if(index==n)return mid;
            else if(index<n)left=mid+1;
            else right=mid-1;
        }
        return right;
    }
    
}
