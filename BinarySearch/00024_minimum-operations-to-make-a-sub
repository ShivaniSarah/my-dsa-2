https://leetcode.com/problems/minimum-operations-to-make-a-subsequence/

1713. Minimum Operations to Make a Subsequence
Hard
Topics
Companies
Hint
You are given an array target that consists of distinct integers and another integer array arr that can have duplicates.

In one operation, you can insert any integer at any position in arr. For example, if arr = [1,4,1,2], you can add 3 in the middle and make it [1,4,3,1,2]. Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make target a subsequence of arr.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, [2,7,4] is a subsequence of [4,2,3,7,2,1,4] (the underlined elements), while [2,4,2] is not.

 

Example 1:

Input: target = [5,1,3], arr = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.
Example 2:

Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]
Output: 3
 

Constraints:

1 <= target.length, arr.length <= 105
1 <= target[i], arr[i] <= 109
target contains no duplicates.


# java


class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        this.c = new int[n + 1];
    }

    public static int lowbit(int x) {
        return x & -x;
    }

    public void update(int x, int val) {
        while (x <= n) {
            c[x] = Math.max(c[x], val);
            x += lowbit(x);
        }
    }

    public int query(int x) {
        int s = 0;
        while (x > 0) {
            s = Math.max(s, c[x]);
            x -= lowbit(x);
        }
        return s;
    }
}

class Solution {
    public int minOperations(int[] target, int[] arr) {
        Map<Integer, Integer> d = new HashMap<>();
        for (int i = 0; i < target.length; ++i) {
            d.put(target[i], i);
        }
        List<Integer> nums = new ArrayList<>();
        for (int i = 0; i < arr.length; ++i) {
            if (d.containsKey(arr[i])) {
                nums.add(d.get(arr[i]));
            }
        }
        return target.length - lengthOfLIS(nums);
    }

    private int lengthOfLIS(List<Integer> nums) {
        TreeSet<Integer> ts = new TreeSet();
        for (int v : nums) {
            ts.add(v);
        }
        int idx = 1;
        Map<Integer, Integer> d = new HashMap<>();
        for (int v : ts) {
            d.put(v, idx++);
        }
        int ans = 0;
        BinaryIndexedTree tree = new BinaryIndexedTree(nums.size());
        for (int v : nums) {
            int x = d.get(v);
            int t = tree.query(x - 1) + 1;
            ans = Math.max(ans, t);
            tree.update(x, t);
        }
        return ans;
    }
}

or


class Solution {
  public int minOperations(int[] target, int[] arr) {
    List<Integer> indices = new ArrayList<>();
    Map<Integer, Integer> numToIndex = new HashMap<>();

    for (int i = 0; i < target.length; ++i)
      numToIndex.put(target[i], i);

    for (final int a : arr)
      if (numToIndex.containsKey(a))
        indices.add(numToIndex.get(a));

    return target.length - lengthOfLIS(indices);
  }

  // Same as 300. Longest Increasing Subsequence
  private int lengthOfLIS(List<Integer> nums) {
    // tails[i] := the minimum tail of all the increasing subsequences with
    // length i + 1
    List<Integer> tails = new ArrayList<>();
    for (final int num : nums)
      if (tails.isEmpty() || num > tails.get(tails.size() - 1))
        tails.add(num);
      else
        tails.set(firstGreaterEqual(tails, num), num);
    return tails.size();
  }

  private int firstGreaterEqual(List<Integer> arr, int target) {
    final int i = Collections.binarySearch(arr, target);
    return i < 0 ? -i - 1 : i;
  }
}


or


class Solution {
    int[] tail;
    int idx;
    public int minOperations(int[] target, int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        int[] indices = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            int num = arr[i];
            int index = map.getOrDefault(num, -1);
            indices[i] = index;
        }
        tail = new int[arr.length];
        idx = -1;
        for (int i = 0; i < indices.length; i++) {
            int index = indices[i];
            if (index == -1) continue;
            binarySearch(0, idx, index);
        }
        return target.length - idx - 1;
    }

    private void binarySearch(int start, int end, int target) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (tail[mid] < target) start = mid + 1;
            else end = mid - 1;
        }
        if (start > idx) idx = start;
        tail[start] = target;
    }
}


or

class Solution {
        public int minOperations(int[] target, int[] A) {
        Map<Integer, Integer> h = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            h.put(target[i], i);
        }
        TreeSet<Integer> stack = new TreeSet<>();
        for (int a : A) {
            if (!h.containsKey(a)) {
                continue;
            }
            if (stack.isEmpty() || stack.last() < h.get(a)) {
                stack.add(h.get(a));
                continue;
            }
            int key = stack.ceiling(h.get(a));
            stack.remove(key);
            stack.add(h.get(a));
        }
        return target.length - stack.size();
    }
}

or


class Solution {
            public int minOperations(int[] target, int[] A) {
        Map<Integer, Integer> h = new HashMap<>();
        for (int i = 0; i < target.length; ++i) {
            h.put(target[i], i);
        }
        int lis = 0, stack[] = new int[A.length + 1];
        for (int a : A) {
            if (!h.containsKey(a)) continue;
            int i = Arrays.binarySearch(stack, 0, lis, h.get(a));
            i = Math.max(i, ~i);
            stack[i] = h.get(a);
            lis = Math.max(lis, i + 1);
        }
        return target.length - lis;
    }
}


or

class Solution {
           public int minOperations(int[] target, int[] A) {
        Map<Integer, Integer> h = new HashMap<>();
        for (int i = 0; i < target.length; ++i)
            h.put(target[i], i);

        ArrayList<Integer> stack = new ArrayList<>();
        for (int a : A) {
            if (!h.containsKey(a)) continue;
            if (stack.size() == 0 || h.get(a) > stack.get(stack.size() - 1)) {
                stack.add(h.get(a));
                continue;
            }
            int left = 0, right = stack.size() - 1, mid;
            while (left < right) {
                mid = (left + right) / 2;
                if (stack.get(mid) < h.get(a))
                    left = mid + 1;
                else
                    right = mid;
            }
            stack.set(left, h.get(a));
        }
        return target.length - stack.size();
    }
}


or


import java.util.*;

class Solution {
    public int minOperations(int[] target, int[] arr) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < target.length; i++) {
            map.put(target[i], i);
        }
        
        List<Integer> sequence = new ArrayList<>();
        for (int num : arr) {
            if (map.containsKey(num)) {
                sequence.add(map.get(num));
            }
        }
        
        int maxSubsequence = lis(sequence);
        return target.length - maxSubsequence;
    }
    
    private int lis(List<Integer> list) {
        List<Integer> max = new ArrayList<>();
        for (int num : list) {
            if (max.isEmpty() || num > max.get(max.size() - 1)) {
                max.add(num);
            } else {
                int pos = Collections.binarySearch(max, num);
                if (pos >= 0) {
                    max.set(pos, num);
                } else {
                    max.set(-(pos + 1), num);
                }
            }
        }
        return max.size();
    }
}

or

class Solution {
    public int minOperations(int[] a, int[] b) {
        int m = a.length;
        int n = b.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < m; i++) {
            map.put(a[i], i);
        }
        int[] c = new int[m];
        int k = 0;
        for (int i = 0; i < n; i++) {
            b[i] = map.getOrDefault(b[i], -1);
            if (b[i] >= 0) {
                if (k == 0 || b[i] > c[k - 1]) {
                    c[k++] = b[i];
                }
                else {
                    int j = Arrays.binarySearch(c, 0, k, b[i]);
                    if (j < 0) j = - (j + 1);
                    c[j] = b[i];
                }
            }
        }
        return m - k;
    }
}
