https://leetcode.com/problems/count-good-triplets-in-an-array/description/


2179. Count Good Triplets in an Array
Hard
Topics
Companies
Hint
You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].

A good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.

Return the total number of good triplets.

 

Example 1:

Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3]
Output: 1
Explanation: 
There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). 
Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.
Example 2:

Input: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]
Output: 4
Explanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).
 

Constraints:

n == nums1.length == nums2.length
3 <= n <= 105
0 <= nums1[i], nums2[i] <= n - 1
nums1 and nums2 are permutations of [0, 1, ..., n - 1].



#  java

class SegmentTree {
    int[] tree;
    int n;
    SegmentTree(int[] arr) {
        n = arr.length;
        tree = new int[4 * n];
        build(arr, 0, 0, n - 1);
    }
    void build(int[] arr, int node, int start, int end) {
        if (start == end) {
            tree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            build(arr, 2 * node + 1, start, mid);
            build(arr, 2 * node + 2, mid + 1, end);
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    }
    void update(int idx, int val) {
        update(idx, val, 0, 0, n - 1);
    }
    void update(int idx, int val, int node, int start, int end) {
        if (start == end) {
            tree[node] = val;
        } else {
            int mid = (start + end) / 2;
            if (idx <= mid)
                update(idx, val, 2 * node + 1, start, mid);
            else
                update(idx, val, 2 * node + 2, mid + 1, end);
            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];
        }
    }
    int query(int l, int r) {
        if (l > r) return 0;
        return query(l, r, 0, 0, n - 1);
    }
    int query(int l, int r, int node, int start, int end) {
        if (l > end || r < start)
            return 0;
        if (l <= start && end <= r)
            return tree[node];
        int mid = (start + end) / 2;
        int leftSum = query(l, r, 2 * node + 1, start, mid);
        int rightSum = query(l, r, 2 * node + 2, mid + 1, end);
        return leftSum + rightSum;
    }
}

class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        java.util.HashMap<Integer, Integer> mpp = new java.util.HashMap<>();
        int temp = 1;
        for (int x : nums1) mpp.put(x, temp++);
        for (int i = 0; i < nums2.length; i++) nums2[i] = mpp.get(nums2[i]);
        int n = nums1.length;
        int[] leftArr = new int[n];
        int[] rightArr = new int[n];
        for (int i = 0; i < n; i++) rightArr[i] = 1;
        SegmentTree leftTree = new SegmentTree(leftArr);
        SegmentTree rightTree = new SegmentTree(rightArr);
        leftTree.update(nums2[0] - 1, 1);
        rightTree.update(nums2[0] - 1, 0);
        long total = 0;
        for (int i = 1; i < n - 1; i++) {
            int idx = nums2[i];
            rightTree.update(idx - 1, 0);
            int left = idx - 2 >= 0 ? leftTree.query(0, idx - 2) : 0;
            int right = rightTree.query(idx, n - 1);
            total += (long) left * right;
            leftTree.update(idx - 1, 1);
        }
        return total;
    }
}

or

class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int len = nums2.length;
        int[] indNum2 = new int[len];
        List<Integer> collect = new ArrayList<>();
        for(int i = 0;i < len;i++){
            indNum2[nums2[i]] = i;
            collect.add(i);
        }
        long ans = 0;
        List<Integer> counted = new ArrayList<>();
        for(int i = 0;i < len;i++){
            int tar = indNum2[nums1[i]];
            int req = binaryAdd(counted, tar);
            int cnt = binary(collect, tar);
            ans += ((long) cnt *req);
        }
        return ans;
    }
    public int binaryAdd(List<Integer> arr, int tar){
        if(arr.isEmpty()){
            arr.add(tar);
            return 0;
        }
        int start = 0;
        int end = arr.size()-1;
        while(start <= end){
            int mid = (start+end)/2;
            if(arr.get(mid) <= tar){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        arr.add(start, tar);
        return start;
    }
    public int binary(List<Integer> arr, int tar){
        int start = 0;
        int end = arr.size()-1;
        while(start <= end){
            int mid = (start+end)/2;
            if(arr.get(mid) == tar){
                arr.remove(mid);
                return arr.size()-mid;
            }
            else if(arr.get(mid) < tar){
                start = mid+1;
            }
            else{
                end = mid-1;
            }
        }
        return 0;
    }
}


or



class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[] pos = new int[n];
        BinaryIndexedTree tree = new BinaryIndexedTree(n);
        for (int i = 0; i < n; ++i) {
            pos[nums2[i]] = i + 1;
        }
        long ans = 0;
        for (int num : nums1) {
            int p = pos[num];
            long left = tree.query(p);
            long right = n - p - (tree.query(n) - tree.query(p));
            ans += left * right;
            tree.update(p, 1);
        }
        return ans;
    }
}

class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        c = new int[n + 1];
    }

    public void update(int x, int delta) {
        while (x <= n) {
            c[x] += delta;
            x += lowbit(x);
        }
    }

    public int query(int x) {
        int s = 0;
        while (x > 0) {
            s += c[x];
            x -= lowbit(x);
        }
        return s;
    }

    public static int lowbit(int x) {
        return x & -x;
    }
}


or

class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int []pos = new int[n];
        FenwickTree ft = new FenwickTree(n+1);
        for(int i=0;i<n;i++)
            pos[nums2[i]]=i;
        long []left=new long[n];
        long []right = new long[n];
        for(int i=0;i<n;i++){
            int idx = pos[nums1[i]];
            left[i] = ft.sum(idx-1);
            ft.update(idx,1);
        }
        ft=new FenwickTree(n+1);
        
        for(int i=n-1;i>=0;i--){
            int idx = pos[nums1[i]];
            right[i]= ft.sum(n+1)-ft.sum(idx);
            ft.update(idx,1);
        }
        long ans=0;
        for (int i=0;i<n;i++)
            ans+= left[i]*right[i];
        return ans;
    }
}

class FenwickTree {
    int[] bit;
    int n;
    FenwickTree(int n) {
        this.n = n;
        this.bit = new int[n + 2];
    }
    public void update(int i, int val) {
        i++;
        while (i < bit.length) {
            bit[i] += val;
            i += (i & (-i));
        }
    }
    public int sum(int i) {
        int sum = 0;
        i++;
        while (i > 0) {
            sum += bit[i];
            i -= (i & (-i));
        }
        return sum;
    }
}

or

class FenwickTree {
  public FenwickTree(int n) {
    sums = new int[n + 1];
  }

  public void add(int i, int delta) {
    while (i < sums.length) {
      sums[i] += delta;
      i += lowbit(i);
    }
  }

  public int get(int i) {
    int sum = 0;
    while (i > 0) {
      sum += sums[i];
      i -= lowbit(i);
    }
    return sum;
  }

  private int[] sums;

  private static int lowbit(int i) {
    return i & -i;
  }
}

class Solution {
  public long goodTriplets(int[] nums1, int[] nums2) {
    final int n = nums1.length;
    long ans = 0;
    Map<Integer, Integer> numToIndex = new HashMap<>();
    int[] arr = new int[n];
    // leftSmaller[i] := the number of arr[j] < arr[i], where 0 <= j < i
    int[] leftSmaller = new int[n];
    // rightLarger[i] := the number of arr[j] > arr[i], where i < j < n
    int[] rightLarger = new int[n];
    FenwickTree tree1 = new FenwickTree(n); // Calculates `leftSmaller`.
    FenwickTree tree2 = new FenwickTree(n); // Calculates `rightLarger`.

    for (int i = 0; i < n; ++i)
      numToIndex.put(nums1[i], i);

    // Remap each number in `nums2` to the according index in `nums1` as `arr`.
    // So the problem is to find the number of increasing tripets in `arr`.
    for (int i = 0; i < n; ++i)
      arr[i] = numToIndex.get(nums2[i]);

    for (int i = 0; i < n; ++i) {
      leftSmaller[i] = tree1.get(arr[i]);
      tree1.add(arr[i] + 1, 1);
    }

    for (int i = n - 1; i >= 0; --i) {
      rightLarger[i] = tree2.get(n) - tree2.get(arr[i]);
      tree2.add(arr[i] + 1, 1);
    }

    for (int i = 0; i < n; ++i)
      ans += (long) leftSmaller[i] * rightLarger[i];

    return ans;
  }
}


or


class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[] pos = new int[n];

        // Position map â€“ where is each element in nums2?
        for (int i = 0; i < n; i++) {
            pos[nums2[i]] = i;
        }

        int[] mapped = new int[n];
        for (int i = 0; i < n; i++) {
            mapped[i] = pos[nums1[i]];
        }

        long[] left = new long[n];
        int[] bit = new int[n + 2]; // extra room for classic off-by-one safety

        for (int i = 0; i < n; i++) {
            left[i] = query(bit, mapped[i]);
            update(bit, mapped[i] + 1, 1);  // 1-indexed... thanks BIT \U0001f643
        }

        long[] right = new long[n];
        bit = new int[n + 2];

        for (int i = n - 1; i >= 0; i--) {
            right[i] = query(bit, n) - query(bit, mapped[i] + 1);
            update(bit, mapped[i] + 1, 1);
        }

        long res = 0;
        for (int i = 0; i < n; i++) {
            res += left[i] * right[i]; // Middle element magic
        }
        return res;
    }

    void update(int[] bit, int i, int val) {
        while (i < bit.length) {
            bit[i] += val;
            i += i & -i;
        }
    }

    int query(int[] bit, int i) {
        int res = 0;
        while (i > 0) {
            res += bit[i];
            i -= i & -i;
        }
        return res;
    }
}


or


class Solution {
    public long goodTriplets(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> mpp = new HashMap<>();
        for (int i = 0; i < nums1.length; i++) mpp.put(nums1[i], i);
        int n = nums2.length;
        long total = 0;
        ArrayList<Integer> st = new ArrayList<>();
        for (int x : nums2) {
            int idx = mpp.get(x);
            int left = orderOfKey(st, idx);
            int right = (n - 1 - idx) - (st.size() - left);
            total += (long) left * right;
            int pos = Collections.binarySearch(st, idx);
            if (pos < 0) pos = -pos - 1;
            st.add(pos, idx);
        }
        return total;
    }
    
    private int orderOfKey(ArrayList<Integer> st, int key) {
        int pos = Collections.binarySearch(st, key);
        return pos < 0 ? -pos - 1 : pos;
    }
}


or


class Solution {
    private int binarySearch(List<Integer> nums, int target) {
        int low = 0;
        int high = nums.size() - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums.get(mid) == target) {
                return mid;
            }
            if (nums.get(mid) > target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return low;
    }

    public long goodTriplets(int[] nums1, int[] nums2) {
        long count = 0;
        int n = nums1.length;
        int[] indexMap1 = new int[n + 1];
        for (int i = 0; i < n; i++) {
            indexMap1[nums1[i]] = i;
        }
        int[] perm2 = new int[n];
        for (int i = 0; i < n; i++) {
            perm2[i] = indexMap1[nums2[i]];
        }
        int[] leftSmaller = new int[n];
        List<Integer> sortedList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            int index = binarySearch(sortedList, perm2[i]);
            leftSmaller[i] = index;
            sortedList.add(index, perm2[i]);
        }
        int[] rightGreater = new int[n];
        sortedList.clear();
        for (int i = n - 1; i >= 0; i--) {
            int index = binarySearch(sortedList, perm2[i]);
            rightGreater[i] = sortedList.size() - index;
            sortedList.add(index, perm2[i]);
        }
        for (int i = 0; i < n; i++) {
            count += (long) leftSmaller[i] * rightGreater[i];
        }
        return count;
    }
}

