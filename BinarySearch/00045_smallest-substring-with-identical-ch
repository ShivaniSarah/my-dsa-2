https://leetcode.com/problems/smallest-substring-with-identical-characters-ii/description/

3399. Smallest Substring With Identical Characters II
Hard
Topics
Companies
Hint
You are given a binary string s of length n and an integer numOps.

You are allowed to perform the following operation on s at most numOps times:

Select any index i (where 0 <= i < n) and flip s[i]. If s[i] == '1', change s[i] to '0' and vice versa.
You need to minimize the length of the longest substring of s such that all the characters in the substring are identical.

Return the minimum length after the operations.

 

Example 1:

Input: s = "000001", numOps = 1

Output: 2

Explanation: 

By changing s[2] to '1', s becomes "001001". The longest substrings with identical characters are s[0..1] and s[3..4].

Example 2:

Input: s = "0000", numOps = 2

Output: 1

Explanation: 

By changing s[0] and s[2] to '1', s becomes "1010".

Example 3:

Input: s = "0101", numOps = 0

Output: 1

 

Constraints:

1 <= n == s.length <= 105
s consists only of '0' and '1'.
0 <= numOps <= n


# java


class Solution {
    private char[] s;
    private int numOps;

    public int minLength(String s, int numOps) {
        this.numOps = numOps;
        this.s = s.toCharArray();
        int l = 1, r = s.length();
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(int m) {
        int cnt = 0;
        if (m == 1) {
            char[] t = {'0', '1'};
            for (int i = 0; i < s.length; ++i) {
                if (s[i] == t[i & 1]) {
                    ++cnt;
                }
            }
            cnt = Math.min(cnt, s.length - cnt);
        } else {
            int k = 0;
            for (int i = 0; i < s.length; ++i) {
                ++k;
                if (i == s.length - 1 || s[i] != s[i + 1]) {
                    cnt += k / (m + 1);
                    k = 0;
                }
            }
        }
        return cnt <= numOps;
    }
}


or


class Solution {
  // Same as 3398. Smallest Substring With Identical Characters I
  public int minLength(String s, int numOps) {
    int l = 1;
    int r = s.length();

    while (l < r) {
      final int m = (l + r) / 2;
      if (getMinOps(s, m) <= numOps)
        r = m;
      else
        l = m + 1;
    }

    return l;
  }

  // Returns the minimum number of operations needed to make all groups of
  // identical characters of length k or less.
  private int getMinOps(final String s, int k) {
    if (k == 1) {
      int res = 0;
      for (int i = 0; i < s.length(); ++i)
        if (s.charAt(i) - '0' == i % 2)
          ++res;
      return Math.min(res, s.length() - res);
    }

    int res = 0;
    int runningLen = 1;

    for (int i = 1; i < s.length(); ++i)
      if (s.charAt(i) == s.charAt(i - 1)) {
        ++runningLen;
      } else {
        res += runningLen / (k + 1);
        runningLen = 1;
      }

    return res + runningLen / (k + 1);
  }
}


or

class Solution {
    public int minLength(String s, int k) {
        char chars[] = s.toCharArray();
        int l = 1;
        int r = s.length();
        int ans = 0;

        while(l <= r ) {
            int mid = ( r + l) >> 1;
            if(isValidLength(mid, chars, k)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return ans;
    }

   boolean isValidLength(int len, char chars[], int ops) {
    if(len == 1) {
       return alternatingString(chars, ops);
    }
    int idx = 0;
    while(idx < chars.length) {
        int reps = identicalCharacters(chars, idx); // gives the length of repeating ch
        int used = performOperations(len, reps, ops);
        ops = ops - used;
        if(ops < 0) {
            return false;
        }
        idx += reps;
    }
    return true;
  }

  int identicalCharacters(char chars[], int idx) {
      int count = 0;
      int start = idx;
      while(idx < chars.length && chars[start] == chars[idx]) {
          count++;
          idx++;
      }
      return count;
      
  }

  int performOperations(int len, int reps , int k) {
    if(reps <= len) {
        return 0;
    }
    int l = 0; 
    int r = k;
    int ans = k + 1;
    while(l <= r) {
        int mid = (l + r) >> 1;
        if((reps/ (mid + 1)) <= len) {
            ans = mid;
            r = mid - 1;
        } else {
            l = mid + 1;
        }
    }
    return ans;
  }

    
   boolean alternatingString(char chars[], int ops) {
        return ops >= Math.min(countMissMatch(chars, 0), countMissMatch(chars, 1));
   }
    int countMissMatch(char chars[], int start) {
        int count = 0;
        for(char ch : chars) {
            if(start != (ch - '0')) {
                count++;
            }
            start = 1 - start;
        }
        return count;
    }
}


or


class Solution {
    static public int minLength(String s, int numOps) {
        char[] arr = s.toCharArray();
        int n = arr.length, start = 2, end = n, mid = 0, ans = n;
        while (start <= end) {
            mid = start + (end - start) / 2;
            boolean can = can(mid, arr, numOps);
            if (can) {
                ans = mid;
                end = mid - 1;
            } else start = mid + 1;
        }
        if (ans == 2 && checkForOne(arr, numOps)) return 1;
        return ans;
    }

    static boolean checkForOne(char[] arr, int opr) {
        int n = arr.length;
        char[] temp1 = new char[n];
        for (int i = 0; i < n; i++) 
            temp1[i] = (i % 2 == 1) ? '0' : '1';
        int cuts = 0;
        for (int i = 0; i < n; i++) if (arr[i] != temp1[i]) cuts++;
        if (cuts <= opr) return true;
        for (int i = 0; i < n; i++)
           temp1[i] = (i % 2 == 0) ? '0' : '1';
        cuts = 0;
        for (int i = 0; i < n; i++) if (arr[i] != temp1[i])  cuts++;
        return cuts <= opr;
    }

    static boolean can(int mid, char[] arr, int k) {
        int cuts = 0, n = arr.length, i = 0;
        while (i < n) {
            char current = arr[i];
            int freq = 0;
            while (i < n && arr[i] == current && freq <= mid) {
                i++;
                freq++;
            }
            if (freq > mid) cuts++;
        }
        return cuts <= k;
    }
}


or

class Solution {
    public int minLength(String ss, int numOps) {
      int s=1;
      int e=ss.length();
      int ans=0;
      while(s<=e){
        int m=(s+e)/2;
        if(f(m,numOps,ss)){
            ans=m;
            e=m-1;
        }
        else s=m+1;
      }  
      return ans;
    }
    public boolean f(int m,int n,String s){
        if(m==1){
            return ff(s,n,'0')||ff(s,n,'1');
        }
        int c=1;
        int f=s.charAt(0)-'0';
        for(int i=1;i<s.length();i++){
            if(s.charAt(i)==s.charAt(i-1)){
                c++;
            }
            else{
                n-=(c)/(m+1);
                c=1;
            }
        }
        n-=(c)/(m+1);
        return n>=0;

    }
    public boolean ff(String s,int n,char ch){
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)==ch){
                
            }
            else n--;
            ch=ch=='1'?'0':'1';
        }
        return n>=0;
    }

}


or

class Solution {
    public int minLength(String s, int numOps) {
        int temp = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) - '0' == i % 2) temp++;
        }
        if (temp <= numOps || s.length() - temp <= numOps) return 1;
        ArrayList<Integer> arr = new ArrayList<>();
        int count = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i) == s.charAt(i - 1)) count++;
            else {
                arr.add(count);
                count = 1;
            }
        }
        arr.add(count);
        int l = 2;
        int r = s.length();
        while (l < r) {
            int mid = (l + r) / 2;
            int sum = 0;
            for (int i : arr) {
                sum += i / (mid + 1);
            }
            if (sum <= numOps) r = mid;
            else l = mid + 1;
        }
        return l;
    }
}

