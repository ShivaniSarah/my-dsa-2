https://leetcode.com/problems/create-sorted-array-through-instructions/description/

1649. Create Sorted Array through Instructions
Hard
Topics
Companies
Hint
Given an integer array instructions, you are asked to create a sorted array from the elements in instructions. You start with an empty container nums. For each element from left to right in instructions, insert it into nums. The cost of each insertion is the minimum of the following:

The number of elements currently in nums that are strictly less than instructions[i].
The number of elements currently in nums that are strictly greater than instructions[i].
For example, if inserting element 3 into nums = [1,2,3,5], the cost of insertion is min(2, 1) (elements 1 and 2 are less than 3, element 5 is greater than 3) and nums will become [1,2,3,3,5].

Return the total cost to insert all elements from instructions into nums. Since the answer may be large, return it modulo 109 + 7

 

Example 1:

Input: instructions = [1,5,6,2]
Output: 1
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 5 with cost min(1, 0) = 0, now nums = [1,5].
Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].
Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].
The total cost is 0 + 0 + 0 + 1 = 1.
Example 2:

Input: instructions = [1,2,3,6,5,4]
Output: 3
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 2 with cost min(1, 0) = 0, now nums = [1,2].
Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].
Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].
Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].
Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].
The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.
Example 3:

Input: instructions = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Begin with nums = [].
Insert 1 with cost min(0, 0) = 0, now nums = [1].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].
Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].
Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].
Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].
​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].
​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].
The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.
 

Constraints:

1 <= instructions.length <= 105
1 <= instructions[i] <= 105



# java


class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        this.c = new int[n + 1];
    }

    public void update(int x, int v) {
        while (x <= n) {
            c[x] += v;
            x += x & -x;
        }
    }

    public int query(int x) {
        int s = 0;
        while (x > 0) {
            s += c[x];
            x -= x & -x;
        }
        return s;
    }
}

class Solution {
    public int createSortedArray(int[] instructions) {
        int m = 0;
        for (int x : instructions) {
            m = Math.max(m, x);
        }
        BinaryIndexedTree tree = new BinaryIndexedTree(m);
        int ans = 0;
        final int mod = (int) 1e9 + 7;
        for (int i = 0; i < instructions.length; ++i) {
            int x = instructions[i];
            int cost = Math.min(tree.query(x - 1), i - tree.query(x));
            ans = (ans + cost) % mod;
            tree.update(x, 1);
        }
        return ans;
    }
}

or

// double BS, best

class Solution {
    public int createSortedArray(int[] instructions) {
        List<Integer> list = new ArrayList<>();
        long cost = 0;
        for(int add : instructions){
            cost += helper(add, list);
            cost %= 1000000007;
        }
        return (int)cost;
    }
    
    int helper(int add, List<Integer> list){
        int front = 0;
        int back = 0;
        int size = list.size();
        
        int head = 0; 
        int tail = size;
        while(head < tail){
            int mid = head + (tail-head)/2;
            if(list.get(mid) >= add)
                tail = mid;
            else
                head = mid+1;
        }
        front = head;
        
        head = 0;
        tail = size;
        while(head < tail){
            int mid = head + (tail-head)/2;
            if(list.get(mid) > add)
                tail = mid;
            else
                head = mid+1;
        }
        back = head;
        
        int costF = front;
        int costB = size - back;
        
        list.add(front, add);
        return Math.min(costF, costB);
        
        
    }
}


or


class Solution {
    public int createSortedArray(int[] instructions) {
        ArrayList<Integer> list=new ArrayList<Integer>();
        long result=0;
        for(int i=0;i<instructions.length;i++)
        {
            if(i==0)
            {
                list.add(instructions[i]);
            }
            else
            {
                int low=0,high=list.size()-1;
                int lowerIndex=0;
                while(low<=high)
                {
                    int mid=(low+high)/2;
                    if(list.get(mid)>=instructions[i])
                    {
                        lowerIndex=mid;
                        high=mid-1;
                    }
                    else
                    {
                        lowerIndex=mid+1;
                        low=mid+1;
                    }
                }
                int upperIndex=0;
                low=0;
                high=list.size()-1;
                while(low<=high)
                {
                    int mid=(low+high)/2;
                    if(list.get(mid)>instructions[i])
                    {
                        high=mid-1;
                        upperIndex=mid;
                    }
                    else
                    {
                        upperIndex=mid+1;
                        low=mid+1;
                    }
                }
                result+=Math.min(lowerIndex,list.size()-upperIndex);
                list.add(lowerIndex,instructions[i]);
                result=result%(1000000007);

            }
        }

        return (int)result;
    }
}



or


public class Solution {


    // SOLUTION 3: USE BIT
    public int createSortedArray(int[] instructions) {
        int mod = (int) Math.pow(10, 9) + 7;
        long ans = 0;
        int[] valToCnt = new int[100001];
        BIT bit = new BIT(100000);
        for (int i = 0; i < instructions.length; i++) {
            int curr = instructions[i];
            int currCnt = valToCnt[curr];
            int lowerCnt = bit.getCntUpTo(curr - 1);
            int biggerCnt = i - currCnt - lowerCnt; // totalCnt - currCnt - lowerCnt = strictly bigger cnt
            ans = (ans + Math.min(lowerCnt, biggerCnt)) % mod;

            valToCnt[curr]++; // update for curr cnt
            bit.updateDelta(curr, 1); // update for lower cnt
        }
        return (int) (ans % mod);
    }
    class BIT {

        int[] bitArr;
        BIT(int size){
            bitArr = new int[size + 1];
        }

        void updateDelta(int i, int delta){
            while (i < bitArr.length) {
                bitArr[i] += delta;
                i += i & -i;
            }
        }

        int getCntUpTo(int i) {
            int sum = 0;
            while (i > 0) {
                sum += bitArr[i];
                i -= i & -i;
            }
            return sum;
        }
    }
}
