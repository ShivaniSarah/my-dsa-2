https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/description/


302. Smallest Rectangle Enclosing Black Pixels
Description
You are given an m x n binary matrix image where 0 represents a white pixel and 1 represents a black pixel.

The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.

Given two integers x and y that represents the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.

You must write an algorithm with less than O(mn) runtime complexity

 

Example 1:



Input: image = [["0","0","1","0"],["0","1","1","0"],["0","1","0","0"]], x = 0, y = 2
Output: 6
Example 2:

Input: image = [["1"]], x = 0, y = 0
Output: 1
 

Constraints:

m == image.length
n == image[i].length
1 <= m, n <= 100
image[i][j] is either '0' or '1'.
0 <= x < m
0 <= y < n
image[x][y] == '1'.
The black pixels in the image only form one component.




# java

class Solution {
  public int minArea(char[][] image, int x, int y) {
    final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    final int m = image.length;
    final int n = image[0].length;
    int[] topLeft = {x, y};
    int[] bottomRight = {x, y};
    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>(List.of(new Pair<>(x, y)));
    image[x][y] = '2'; // Mark as visited.

    while (!q.isEmpty()) {
      final int i = q.peek().getKey();
      final int j = q.poll().getValue();
      for (int[] dir : DIRS) {
        final int r = i + dir[0];
        final int c = j + dir[1];
        if (r < 0 || r == m || c < 0 || c == n)
          continue;
        if (image[r][c] != '1')
          continue;
        topLeft[0] = Math.min(topLeft[0], r);
        topLeft[1] = Math.min(topLeft[1], c);
        bottomRight[0] = Math.max(bottomRight[0], r);
        bottomRight[1] = Math.max(bottomRight[1], c);
        q.offer(new Pair<>(r, c));
        image[r][c] = '2';
      }
    }

    final int width = bottomRight[1] - topLeft[1] + 1;
    final int height = bottomRight[0] - topLeft[0] + 1;
    return width * height;
  }
}



or


class Solution {
  public int minArea(char[][] image, int x, int y) {
    this.image = image;
    final int x1 = firstAnyOne(0, x, rowAllZeros);
    final int x2 = firstAllZeros(x + 1, image.length, rowAllZeros);
    final int y1 = firstAnyOne(0, y, colAllZeros);
    final int y2 = firstAllZeros(y + 1, image[0].length, colAllZeros);
    return (x2 - x1) * (y2 - y1);
  }

  private char[][] image;

  private int firstAnyOne(int l, int r, Function<Integer, Boolean> allZeros) {
    while (l < r) {
      final int m = (l + r) / 2;
      if (allZeros.apply(m))
        l = m + 1;
      else
        r = m;
    }
    return l;
  }

  private int firstAllZeros(int l, int r, Function<Integer, Boolean> allZeros) {
    while (l < r) {
      final int m = (l + r) / 2;
      if (allZeros.apply(m))
        r = m;
      else
        l = m + 1;
    }
    return l;
  }

  Function<Integer, Boolean> rowAllZeros = new Function<>() {
    public Boolean apply(Integer rowIndex) {
      return new String(image[rowIndex]).chars().allMatch(pixel -> pixel == '0');
    }
  };

  Function<Integer, Boolean> colAllZeros = new Function<>() {
    public Boolean apply(Integer colIndex) {
      for (int i = 0; i < image.length; ++i)
        if (image[i][colIndex] == '1')
          return false;
      return true;
    }
  };
}


or


public class Solution {
        /**
         * @param image: a binary matrix with '0' and '1'
         * @param x: the location of one of the black pixels
         * @param y: the location of one of the black pixels
         * @return: an integer
         */
        public int minArea(char[][] image, int x, int y) {
            if (image == null || image.length == 0) {
                return 0;
            }

            int m = image.length;
            int n = image[0].length;

            int up = binarySearch(image, true, 0, x, 0, n, true);
            int down = binarySearch(image, true, x + 1, m, 0, n, false);
            int left = binarySearch(image, false, 0, y, up, down, true); // @note: re-use up/down to narrow down
            int right = binarySearch(image, false, y + 1, n, up, down, false);

            return (right - left) * (down - up);
        }

        int binarySearch(char[][] image, boolean isHorizontal, int i, int j, int low, int high, boolean opt) {

            while (i < j) {
                int k = low;
                int mid = (i + j) / 2;

                while (k < high && (isHorizontal ? image[mid][k] : image[k][mid]) == '0') {
                    ++k;
                }

                if (k < high == opt) {
                    j = mid;
                } else {
                    i = mid + 1;
                }
            }

            return i;
        }

    }


or


// bf

class Solution {
        public int minArea(char[][] image, int x, int y) {
            int rows = image.length, columns = image[0].length;
            int top = x, bottom = x, left = y, right = y;
            int[][] directions = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
            image[x][y] = '2';
            Queue<int[]> queue = new LinkedList<int[]>();
            queue.offer(new int[]{x, y});
            while (!queue.isEmpty()) {
                int[] cell = queue.poll();
                int row = cell[0], column = cell[1];
                for (int[] direction : directions) {
                    int newRow = row + direction[0], newColumn = column + direction[1];
                    if (newRow >= 0 && newRow < rows && newColumn >= 0 && newColumn < columns && image[newRow][newColumn] == '1') {
                        image[newRow][newColumn] = '2';
                        top = Math.min(top, newRow);
                        bottom = Math.max(bottom, newRow);
                        left = Math.min(left, newColumn);
                        right = Math.max(right, newColumn);
                        queue.offer(new int[]{newRow, newColumn});
                    }
                }
            }
            return (bottom - top + 1) * (right - left + 1);
        }
    }


or


class Solution {
    public int minArea(char[][] image, int x, int y) {
        int m = image.length, n = image[0].length;
        int left = 0, right = x;
        while (left < right) {
            int mid = (left + right) >> 1;
            int c = 0;
            while (c < n && image[mid][c] == '0') {
                ++c;
            }
            if (c < n) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        int u = left;
        left = x;
        right = m - 1;
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            int c = 0;
            while (c < n && image[mid][c] == '0') {
                ++c;
            }
            if (c < n) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        int d = left;
        left = 0;
        right = y;
        while (left < right) {
            int mid = (left + right) >> 1;
            int r = 0;
            while (r < m && image[r][mid] == '0') {
                ++r;
            }
            if (r < m) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        int l = left;
        left = y;
        right = n - 1;
        while (left < right) {
            int mid = (left + right + 1) >> 1;
            int r = 0;
            while (r < m && image[r][mid] == '0') {
                ++r;
            }
            if (r < m) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        int r = left;
        return (d - u + 1) * (r - l + 1);
    }
}



