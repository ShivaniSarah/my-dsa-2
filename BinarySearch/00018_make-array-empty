https://leetcode.com/problems/make-array-empty/description/

2659. Make Array Empty
Hard
Topics
Companies
Hint
You are given an integer array nums containing distinct numbers, and you can perform the following operations until the array is empty:

If the first element has the smallest value, remove it
Otherwise, put the first element at the end of the array.
Return an integer denoting the number of operations it takes to make nums empty.

 

Example 1:

Input: nums = [3,4,-1]
Output: 5
Operation	Array
1	[4, -1, 3]
2	[-1, 3, 4]
3	[3, 4]
4	[4]
5	[]
Example 2:

Input: nums = [1,2,4,3]
Output: 5
Operation	Array
1	[2, 4, 3]
2	[4, 3]
3	[3, 4]
4	[4]
5	[]
Example 3:

Input: nums = [1,2,3]
Output: 3
Operation	Array
1	[2, 3]
2	[3]
3	[]
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109
All values in nums are distinct.


# java

class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        c = new int[n + 1];
    }

    public void update(int x, int delta) {
        while (x <= n) {
            c[x] += delta;
            x += x & -x;
        }
    }

    public int query(int x) {
        int s = 0;
        while (x > 0) {
            s += c[x];
            x -= x & -x;
        }
        return s;
    }
}

class Solution {
    public long countOperationsToEmptyArray(int[] nums) {
        int n = nums.length;
        Map<Integer, Integer> pos = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            pos.put(nums[i], i);
        }
        Arrays.sort(nums);
        long ans = pos.get(nums[0]) + 1;
        BinaryIndexedTree tree = new BinaryIndexedTree(n);
        for (int k = 0; k < n - 1; ++k) {
            int i = pos.get(nums[k]), j = pos.get(nums[k + 1]);
            long d = j - i - (tree.query(j + 1) - tree.query(i + 1));
            ans += d + (n - k) * (i > j ? 1 : 0);
            tree.update(i + 1, 1);
        }
        return ans;
    }
}



or


class Solution {
  public long countOperationsToEmptyArray(int[] nums) {
    final int n = nums.length;
    long ans = n;
    Map<Integer, Integer> numToIndex = new HashMap<>();

    for (int i = 0; i < n; ++i)
      numToIndex.put(nums[i], i);

    Arrays.sort(nums);

    for (int i = 1; i < n; ++i)
      // On the i-th step we've already removed the i - 1 smallest numbers and
      // can ignore them. If an element nums[i] has smaller index in origin
      // array than nums[i - 1], we should rotate the whole left array n - i
      // times to set nums[i] element on the first position.
      if (numToIndex.get(nums[i]) < numToIndex.get(nums[i - 1]))
        ans += n - i;

    return ans;
  }
}


or



class Solution {
      public long countOperationsToEmptyArray(int[] A) {
        Map<Integer, Integer> pos = new HashMap<>();
        long n = A.length, res = n;
        for (int i = 0; i < n; ++i)
            pos.put(A[i], i);
        Arrays.sort(A);
        for (int i = 1; i < n; ++i)
            if (pos.get(A[i]) < pos.get(A[i - 1]))
                res += n - i;
        return res;
    }
}


or


class Solution {
        public long countOperationsToEmptyArray(int[] A) {
        int n = A.length;
        Integer[] pos = new Integer[n];
        for (int i = 0; i < n; ++i)
            pos[i] = i;
        Arrays.sort(pos, (i, j) -> A[i] - A[j]);
        long res = n;
        for (int i = 1; i < n; ++i)
            if (pos[i] < pos[i - 1])
                res += n - i;
        return res;
    }
}


or


class Solution {
    public long countOperationsToEmptyArray(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; i++)
            map.put(nums[i], i);
        Arrays.sort(nums);
        long ans = 1;
        for (int i = n - 2; i >= 0; i--) {
            ans += (map.get(nums[i]) > map.get(nums[i + 1])) ? n - i : 1;
        }
        return ans;
    }
}



