https://leetcode.com/problems/maximum-gcd-sum-of-a-subarray/description/


2941. Maximum GCD-Sum of a Subarray
Description
You are given an array of integers nums and an integer k.

The gcd-sum of an array a is calculated as follows:

Let s be the sum of all the elements of a.
Let g be the greatest common divisor of all the elements of a.
The gcd-sum of a is equal to s * g.
Return the maximum gcd-sum of a subarray of nums with at least k elements.

 

Example 1:

Input: nums = [2,1,4,4,4,2], k = 2
Output: 48
Explanation: We take the subarray [4,4,4], the gcd-sum of this array is 4 * (4 + 4 + 4) = 48.
It can be shown that we can not select any other subarray with a gcd-sum greater than 48.
Example 2:

Input: nums = [7,3,9,4], k = 1
Output: 81
Explanation: We take the subarray [9], the gcd-sum of this array is 9 * 9 = 81.
It can be shown that we can not select any other subarray with a gcd-sum greater than 81.
 

Constraints:

n == nums.length
1 <= n <= 105
1 <= nums[i] <= 106
1 <= k <= n


# java


class Solution {
  public long maxGcdSum(int[] nums, int k) {
    long ans = 0;
    // [(startIndex, gcd of subarray starting at startIndex)]
    List<Pair<Integer, Integer>> startIndexAndGcds = new ArrayList<>();
    long[] prefix = new long[nums.length + 1];

    for (int i = 0; i < nums.length; ++i)
      prefix[i + 1] = (long) nums[i] + prefix[i];

    for (int i = 0; i < nums.length; ++i) {
      List<Pair<Integer, Integer>> nextStartIndexAndGcds = new ArrayList<>();
      for (Pair<Integer, Integer> pair : startIndexAndGcds) {
        final int startIndex = pair.getKey();
        final int gcd = pair.getValue();
        final int nextGcd = gcd(gcd, nums[i]);
        if (nextStartIndexAndGcds.isEmpty() ||
            !nextStartIndexAndGcds.get(nextStartIndexAndGcds.size() - 1)
                 .getValue()
                 .equals(nextGcd)) // Skip duplicates.
          nextStartIndexAndGcds.add(new Pair<>(startIndex, nextGcd));
      }
      startIndexAndGcds = new ArrayList<>(nextStartIndexAndGcds);
      startIndexAndGcds.add(new Pair<>(i, nums[i]));
      for (Pair<Integer, Integer> pair : startIndexAndGcds) {
        final int startIndex = pair.getKey();
        final int gcd = pair.getValue();
        if (i - startIndex + 1 >= k)
          ans = Math.max(ans, (prefix[i + 1] - prefix[startIndex]) * gcd);
      }
    }

    return ans;
  }

  private int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}


or



class Solution {
    public long maxGcdSum(int[] nums, int k) {
        int n = nums.length;
        long[] s = new long[n + 1];
        for (int i = 1; i <= n; ++i) {
            s[i] = s[i - 1] + nums[i - 1];
        }
        List<int[]> f = new ArrayList<>();
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            List<int[]> g = new ArrayList<>();
            for (var e : f) {
                int j = e[0], x = e[1];
                int y = gcd(x, nums[i]);
                if (g.isEmpty() || g.get(g.size() - 1)[1] != y) {
                    g.add(new int[] {j, y});
                }
            }
            f = g;
            f.add(new int[] {i, nums[i]});
            for (var e : f) {
                int j = e[0], x = e[1];
                if (i - j + 1 >= k) {
                    ans = Math.max(ans, (s[i + 1] - s[j]) * x);
                }
            }
        }
        return ans;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}




