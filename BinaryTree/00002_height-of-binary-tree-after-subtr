https://leetcode.com/problems/height-of-binary-tree-after-subtree-removal-queries/description/

2458. Height of Binary Tree After Subtree Removal Queries
Hard
Topics
Companies
Hint
You are given the root of a binary tree with n nodes. Each node is assigned a unique value from 1 to n. You are also given an array queries of size m.

You have to perform m independent queries on the tree where in the ith query you do the following:

Remove the subtree rooted at the node with the value queries[i] from the tree. It is guaranteed that queries[i] will not be equal to the value of the root.
Return an array answer of size m where answer[i] is the height of the tree after performing the ith query.

Note:

The queries are independent, so the tree returns to its initial state after each query.
The height of a tree is the number of edges in the longest simple path from the root to some node in the tree.
 

Example 1:


Input: root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]
Output: [2]
Explanation: The diagram above shows the tree after removing the subtree rooted at node with value 4.
The height of the tree is 2 (The path 1 -> 3 -> 2).
Example 2:


Input: root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]
Output: [3,2,3,2]
Explanation: We have the following queries:
- Removing the subtree rooted at node with value 3. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 4).
- Removing the subtree rooted at node with value 2. The height of the tree becomes 2 (The path 5 -> 8 -> 1).
- Removing the subtree rooted at node with value 4. The height of the tree becomes 3 (The path 5 -> 8 -> 2 -> 6).
- Removing the subtree rooted at node with value 8. The height of the tree becomes 2 (The path 5 -> 9 -> 3).
 

Constraints:

The number of nodes in the tree is n.
2 <= n <= 105
1 <= Node.val <= n
All the values in the tree are unique.
m == queries.length
1 <= m <= min(n, 104)
1 <= queries[i] <= n
queries[i] != root.val


# java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public int[] treeQueries(TreeNode root, int[] queries) {
        // Maps to store node depths and heights
        Map<Integer, Integer> nodeDepths = new HashMap<>();
        Map<Integer, Integer> subtreeHeights = new HashMap<>();

        // Maps to store the first and second largest heights at each level
        Map<Integer, Integer> firstLargestHeight = new HashMap<>();
        Map<Integer, Integer> secondLargestHeight = new HashMap<>();

        // Perform DFS to calculate depths and heights
        dfs(
            root,
            0,
            nodeDepths,
            subtreeHeights,
            firstLargestHeight,
            secondLargestHeight
        );

        int[] results = new int[queries.length];

        // Process each query
        for (int i = 0; i < queries.length; i++) {
            int queryNode = queries[i];
            int nodeLevel = nodeDepths.get(queryNode);

            // Calculate the height of the tree after removing the query node
            if (
                subtreeHeights
                    .get(queryNode)
                    .equals(firstLargestHeight.get(nodeLevel))
            ) {
                results[i] = nodeLevel +
                secondLargestHeight.getOrDefault(nodeLevel, 0) -
                1;
            } else {
                results[i] = nodeLevel +
                firstLargestHeight.getOrDefault(nodeLevel, 0) -
                1;
            }
        }

        return results;
    }

    // Depth-first search to calculate node depths and subtree heights
    private int dfs(
        TreeNode node,
        int level,
        Map<Integer, Integer> nodeDepths,
        Map<Integer, Integer> subtreeHeights,
        Map<Integer, Integer> firstLargestHeight,
        Map<Integer, Integer> secondLargestHeight
    ) {
        if (node == null) return 0;

        nodeDepths.put(node.val, level);

        // Calculate the height of the current subtree
        int leftHeight = dfs(
            node.left,
            level + 1,
            nodeDepths,
            subtreeHeights,
            firstLargestHeight,
            secondLargestHeight
        );
        int rightHeight = dfs(
            node.right,
            level + 1,
            nodeDepths,
            subtreeHeights,
            firstLargestHeight,
            secondLargestHeight
        );
        int currentHeight = 1 + Math.max(leftHeight, rightHeight);

        subtreeHeights.put(node.val, currentHeight);

        // Update the largest and second largest heights at the current level
        int currentFirstLargest = firstLargestHeight.getOrDefault(level, 0);
        if (currentHeight > currentFirstLargest) {
            secondLargestHeight.put(level, currentFirstLargest);
            firstLargestHeight.put(level, currentHeight);
        } else if (currentHeight > secondLargestHeight.getOrDefault(level, 0)) {
            secondLargestHeight.put(level, currentHeight);
        }

        return currentHeight;
    }
}


or


class Solution {

    public int[] treeQueries(TreeNode root, int[] queries) {
        // Lists and maps to store tree information
        List<Integer> eulerTour = new ArrayList<>();
        Map<Integer, Integer> nodeHeights = new HashMap<>();
        Map<Integer, Integer> firstOccurrence = new HashMap<>();
        Map<Integer, Integer> lastOccurrence = new HashMap<>();

        // Perform DFS to build Euler tour and node information
        dfs(root, 0, eulerTour, nodeHeights, firstOccurrence, lastOccurrence);

        int tourSize = eulerTour.size();
        int[] maxDepthLeft = new int[tourSize];
        int[] maxDepthRight = new int[tourSize];

        // Initialize the first and last elements of maxHeight arrays
        maxDepthLeft[0] = maxDepthRight[tourSize - 1] = nodeHeights.get(
            root.val
        );

        // Build maxDepthLeft and maxDepthRight array
        for (int i = 1; i < tourSize; i++) {
            maxDepthLeft[i] = Math.max(
                maxDepthLeft[i - 1],
                nodeHeights.get(eulerTour.get(i))
            );
        }

        for (int i = tourSize - 2; i >= 0; i--) {
            maxDepthRight[i] = Math.max(
                maxDepthRight[i + 1],
                nodeHeights.get(eulerTour.get(i))
            );
        }

        // Process queries
        int[] results = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int queryNode = queries[i];
            int leftMax = (firstOccurrence.get(queryNode) > 0)
                ? maxDepthLeft[firstOccurrence.get(queryNode) - 1]
                : 0;
            int rightMax = (lastOccurrence.get(queryNode) < tourSize - 1)
                ? maxDepthRight[lastOccurrence.get(queryNode) + 1]
                : 0;
            results[i] = Math.max(leftMax, rightMax);
        }

        return results;
    }

    // Depth-first search to build the Euler tour and store node information
    private void dfs(
        TreeNode root,
        int height,
        List<Integer> eulerTour,
        Map<Integer, Integer> nodeHeights,
        Map<Integer, Integer> firstOccurrence,
        Map<Integer, Integer> lastOccurrence
    ) {
        if (root == null) return;

        nodeHeights.put(root.val, height);
        firstOccurrence.put(root.val, eulerTour.size());
        eulerTour.add(root.val);

        dfs(
            root.left,
            height + 1,
            eulerTour,
            nodeHeights,
            firstOccurrence,
            lastOccurrence
        );
        dfs(
            root.right,
            height + 1,
            eulerTour,
            nodeHeights,
            firstOccurrence,
            lastOccurrence
        );

        lastOccurrence.put(root.val, eulerTour.size());
        eulerTour.add(root.val);
    }
}

or



class Solution {

    public int[] treeQueries(TreeNode root, int[] queries) {
        // Map to store the index of each node value
        Map<Integer, Integer> nodeIndexMap = new HashMap<>();

        // Map to store the number of nodes in subtree for each node
        Map<Integer, Integer> subtreeSize = new HashMap<>();

        // Lists to store node depths and maximum depths from left and right
        List<Integer> nodeDepths = new ArrayList<>();
        List<Integer> maxDepthFromLeft = new ArrayList<>();
        List<Integer> maxDepthFromRight = new ArrayList<>();

        // Perform DFS to populate nodeIndexMap and nodeDepths
        dfs(root, 0, nodeIndexMap, nodeDepths);

        int totalNodes = nodeDepths.size();

        // Calculate subtree sizes
        calculateSubtreeSize(root, subtreeSize);

        // Calculate maximum depths from left and right
        maxDepthFromLeft.add(nodeDepths.get(0));
        maxDepthFromRight.add(nodeDepths.get(totalNodes - 1));

        for (int i = 1; i < totalNodes; i++) {
            maxDepthFromLeft.add(
                Math.max(maxDepthFromLeft.get(i - 1), nodeDepths.get(i))
            );
            maxDepthFromRight.add(
                Math.max(
                    maxDepthFromRight.get(i - 1),
                    nodeDepths.get(totalNodes - i - 1)
                )
            );
        }
        Collections.reverse(maxDepthFromRight);

        // Process queries
        int[] results = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int queryNode = queries[i];
            int startIndex = nodeIndexMap.get(queryNode) - 1;
            int endIndex = startIndex + 1 + subtreeSize.get(queryNode);

            int maxDepth = maxDepthFromLeft.get(startIndex);
            if (endIndex < totalNodes) {
                maxDepth = Math.max(maxDepth, maxDepthFromRight.get(endIndex));
            }

            results[i] = maxDepth;
        }

        return results;
    }

    // Depth-first search to populate nodeIndexMap and nodeDepths
    private void dfs(
        TreeNode root,
        int depth,
        Map<Integer, Integer> nodeIndexMap,
        List<Integer> nodeDepths
    ) {
        if (root == null) return;

        nodeIndexMap.put(root.val, nodeDepths.size());
        nodeDepths.add(depth);

        dfs(root.left, depth + 1, nodeIndexMap, nodeDepths);
        dfs(root.right, depth + 1, nodeIndexMap, nodeDepths);
    }

    // Calculate the size of subtree for each node
    private int calculateSubtreeSize(
        TreeNode root,
        Map<Integer, Integer> subtreeSize
    ) {
        if (root == null) return 0;

        int leftSize = calculateSubtreeSize(root.left, subtreeSize);
        int rightSize = calculateSubtreeSize(root.right, subtreeSize);

        int totalSize = leftSize + rightSize + 1;
        subtreeSize.put(root.val, totalSize);

        return totalSize;
    }
}

or

class Solution {

    public int[] treeQueries(TreeNode root, int[] queries) {
        Map<Integer, Integer> resultMap = new HashMap<>();
        Map<TreeNode, Integer> heightCache = new HashMap<>();

        // Run DFS to fill resultMap with maximum heights after each query
        dfs(root, 0, 0, resultMap, heightCache);

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            result[i] = resultMap.get(queries[i]);
        }
        return result;
    }

    // Function to calculate the height of the tree
    private int height(TreeNode node, Map<TreeNode, Integer> heightCache) {
        if (node == null) {
            return -1;
        }

        // Return cached height if already calculated
        if (heightCache.containsKey(node)) {
            return heightCache.get(node);
        }

        int h =
            1 +
            Math.max(
                height(node.left, heightCache),
                height(node.right, heightCache)
            );
        heightCache.put(node, h);
        return h;
    }

    // DFS to precompute the maximum values after removing the subtree
    private void dfs(
        TreeNode node,
        int depth,
        int maxVal,
        Map<Integer, Integer> resultMap,
        Map<TreeNode, Integer> heightCache
    ) {
        if (node == null) {
            return;
        }

        resultMap.put(node.val, maxVal);

        // Traverse left and right subtrees while updating max values
        dfs(
            node.left,
            depth + 1,
            Math.max(maxVal, depth + 1 + height(node.right, heightCache)),
            resultMap,
            heightCache
        );
        dfs(
            node.right,
            depth + 1,
            Math.max(maxVal, depth + 1 + height(node.left, heightCache)),
            resultMap,
            heightCache
        );
    }
}


or


class Solution {

    // Array to store the maximum height of the tree after removing each node
    static final int[] maxHeightAfterRemoval = new int[100001];

    int currentMaxHeight = 0;

    public int[] treeQueries(TreeNode root, int[] queries) {
        traverseLeftToRight(root, 0);
        currentMaxHeight = 0; // Reset for the second traversal
        traverseRightToLeft(root, 0);

        // Process queries and build the result array
        int queryCount = queries.length;
        int[] queryResults = new int[queryCount];
        for (int i = 0; i < queryCount; i++) {
            queryResults[i] = maxHeightAfterRemoval[queries[i]];
        }

        return queryResults;
    }

    private void traverseLeftToRight(TreeNode node, int currentHeight) {
        if (node == null) return;

        // Store the maximum height if this node were removed
        maxHeightAfterRemoval[node.val] = currentMaxHeight;

        // Update the current maximum height
        currentMaxHeight = Math.max(currentMaxHeight, currentHeight);

        // Traverse left subtree first, then right
        traverseLeftToRight(node.left, currentHeight + 1);
        traverseLeftToRight(node.right, currentHeight + 1);
    }

    private void traverseRightToLeft(TreeNode node, int currentHeight) {
        if (node == null) return;

        // Update the maximum height if this node were removed
        maxHeightAfterRemoval[node.val] = Math.max(
            maxHeightAfterRemoval[node.val],
            currentMaxHeight
        );

        // Update the current maximum height
        currentMaxHeight = Math.max(currentHeight, currentMaxHeight);

        // Traverse right subtree first, then left
        traverseRightToLeft(node.right, currentHeight + 1);
        traverseRightToLeft(node.left, currentHeight + 1);
    }
}

or


class Solution {
    int depth[];
    int levelArr[];
    int max1[];
    int max2[];
    public int height(TreeNode root, int level)
    {
     if(root==null)
         return 0; 
     levelArr[root.val] = level; 
     depth[root.val] = 1 + Math.max(height(root.left, level+1), height(root.right, level+1));
     if(max1[level]<depth[root.val]) 
     {
         max2[level] = max1[level];
         max1[level] = depth[root.val];
     }
        else if(max2[level]<depth[root.val])
            max2[level] = depth[root.val]; 
     return depth[root.val];
    }
    
    
    public int[] treeQueries(TreeNode root, int[] queries) {
        depth = new int[100001];
        levelArr = new int[100001];
        max1 = new int[100001];
        max2 = new int[100001];
        
        height(root, 0);
        for(int i=0; i<queries.length; i++)
        {
         int q = queries[i];
         int level = levelArr[q];
         queries[i] = (max1[level]==depth[q]? max2[level] : max1[level]) + level - 1;  
            
        }
        
       return queries; 
    }
}
