https://leetcode.com/problems/maximum-genetic-difference-query/description/


1938. Maximum Genetic Difference Query
Hard
Topics
Companies
Hint
There is a rooted tree consisting of n nodes numbered 0 to n - 1. Each node's number denotes its unique genetic value (i.e. the genetic value of node x is x). The genetic difference between two genetic values is defined as the bitwise-XOR of their values. You are given the integer array parents, where parents[i] is the parent for node i. If node x is the root of the tree, then parents[x] == -1.

You are also given the array queries where queries[i] = [nodei, vali]. For each query i, find the maximum genetic difference between vali and pi, where pi is the genetic value of any node that is on the path between nodei and the root (including nodei and the root). More formally, you want to maximize vali XOR pi.

Return an array ans where ans[i] is the answer to the ith query.

 

Example 1:


Input: parents = [-1,0,1,1], queries = [[0,2],[3,2],[2,5]]
Output: [2,3,7]
Explanation: The queries are processed as follows:
- [0,2]: The node with the maximum genetic difference is 0, with a difference of 2 XOR 0 = 2.
- [3,2]: The node with the maximum genetic difference is 1, with a difference of 2 XOR 1 = 3.
- [2,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.
Example 2:


Input: parents = [3,7,-1,2,0,7,0,2], queries = [[4,6],[1,15],[0,5]]
Output: [6,14,7]
Explanation: The queries are processed as follows:
- [4,6]: The node with the maximum genetic difference is 0, with a difference of 6 XOR 0 = 6.
- [1,15]: The node with the maximum genetic difference is 1, with a difference of 15 XOR 1 = 14.
- [0,5]: The node with the maximum genetic difference is 2, with a difference of 5 XOR 2 = 7.
 

Constraints:

2 <= parents.length <= 105
0 <= parents[i] <= parents.length - 1 for every node i that is not the root.
parents[root] == -1
1 <= queries.length <= 3 * 104
0 <= nodei <= parents.length - 1
0 <= vali <= 2 * 105


# java

class TrieNode {
  public TrieNode[] children = new TrieNode[2];
  public int count = 0;
}

class Trie {
  public void update(int num, int val) {
    TrieNode node = root;
    for (int i = HEIGHT; i >= 0; --i) {
      final int bit = (num >> i) & 1;
      if (node.children[bit] == null)
        node.children[bit] = new TrieNode();
      node = node.children[bit];
      node.count += val;
    }
  }

  public int query(int num) {
    int ans = 0;
    TrieNode node = root;
    for (int i = HEIGHT; i >= 0; --i) {
      final int bit = (num >> i) & 1;
      final int targetBit = bit ^ 1;
      if (node.children[targetBit] != null && node.children[targetBit].count > 0) {
        ans += 1 << i;
        node = node.children[targetBit];
      } else {
        node = node.children[targetBit ^ 1];
      }
    }
    return ans;
  }

  private static final int HEIGHT = 17;
  TrieNode root = new TrieNode();
}

class Solution {
  public int[] maxGeneticDifference(int[] parents, int[][] queries) {
    final int n = parents.length;
    int[] ans = new int[queries.length];
    int rootVal = -1;
    List<Integer>[] tree = new List[n];

    for (int i = 0; i < n; ++i)
      tree[i] = new ArrayList<>();

    // {node: (index, val)}
    Map<Integer, List<Pair<Integer, Integer>>> nodeToQueries = new HashMap<>();
    Trie trie = new Trie();

    for (int i = 0; i < parents.length; ++i)
      if (parents[i] == -1)
        rootVal = i;
      else
        tree[parents[i]].add(i);

    for (int i = 0; i < queries.length; ++i) {
      final int node = queries[i][0];
      final int val = queries[i][1];
      nodeToQueries.putIfAbsent(node, new ArrayList<>());
      nodeToQueries.get(node).add(new Pair<>(i, val));
    }

    dfs(rootVal, trie, tree, nodeToQueries, ans);
    return ans;
  }

  private void dfs(int node, Trie trie, List<Integer>[] tree,
                   Map<Integer, List<Pair<Integer, Integer>>> nodeToQueries, int[] ans) {
    trie.update(node, 1);

    if (nodeToQueries.containsKey(node))
      for (Pair<Integer, Integer> query : nodeToQueries.get(node)) {
        final int i = query.getKey();
        final int val = query.getValue();
        ans[i] = trie.query(val);
      }

    for (final int child : tree[node])
      dfs(child, trie, tree, nodeToQueries, ans);

    trie.update(node, -1);
  }
}


or


class Solution {
    static final int MAXD = 17;

    public int[] maxGeneticDifference(int[] parents, int[][] queries) {
        int n = parents.length;
        List<List<Integer>> edges = new ArrayList<List<Integer>>();
        for (int i = 0; i < n; i++)
            edges.add(new ArrayList<Integer>());
        int rootIndex = -1;
        for (int i = 0; i < n; i++) {
            if (parents[i] == -1)
                rootIndex = i;
            else
                edges.get(parents[i]).add(i);
        }
        List<List<int[]>> stored = new ArrayList<List<int[]>>();
        for (int i = 0; i < n; i++)
            stored.add(new ArrayList<int[]>());
        int queriesCount = queries.length;
        int[] ans = new int[queriesCount];
        for (int i = 0; i < queriesCount; i++)
            stored.get(queries[i][0]).add(new int[]{i, queries[i][1]});
        TrieNode root = new TrieNode();
        depthFirstSearch(ans, root, rootIndex, edges, stored);
        return ans;
    }

    public void insert(TrieNode root, int x) {
        TrieNode curr = root;
        for (int i = MAXD; i >= 0; i--) {
            if ((x & (1 << i)) != 0) {
                if (curr.children[1] == null)
                    curr.children[1] = new TrieNode();
                curr = curr.children[1];
            } else {
                if (curr.children[0] == null)
                    curr.children[0] = new TrieNode();
                curr = curr.children[0];
            }
            curr.count++;
        }
    }

    public int query(TrieNode root, int x) {
        int queryMax = 0;
        TrieNode curr = root;
        for (int i = MAXD; i >= 0; i--) {
            if ((x & (1 << i)) != 0) {
                if (curr.children[0] != null && curr.children[0].count > 0) {
                    queryMax |= 1 << i;
                    curr = curr.children[0];
                } else
                    curr = curr.children[1];
            } else {
                if (curr.children[1] != null && curr.children[1].count > 0) {
                    queryMax |= 1 << i;
                    curr = curr.children[1];
                } else
                    curr = curr.children[0];
            }
        }
        return queryMax;
    }

    public void erase(TrieNode root, int x) {
        TrieNode curr = root;
        for (int i = MAXD; i >= 0; i--) {
            if ((x & (1 << i)) != 0)
                curr = curr.children[1];
            else
                curr = curr.children[0];
            curr.count--;
        }
    }

    public void depthFirstSearch(int[] ans, TrieNode root, int node, List<List<Integer>> edges, List<List<int[]>> stored) {
        insert(root, node);
        List<int[]> list = stored.get(node);
        for (int[] pair : list) {
            int index = pair[0], num = pair[1];
            ans[index] = query(root, num);
        }
        List<Integer> nextNodes = edges.get(node);
        for (int nextNode : nextNodes)
            depthFirstSearch(ans, root, nextNode, edges, stored);
        erase(root, node);
    }
}

class TrieNode {
    int count;
    TrieNode[] children;

    public TrieNode() {
        children = new TrieNode[2];
        count = 0;
    }
}
