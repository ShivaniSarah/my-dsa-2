https://leetcode.com/problems/minimum-unique-word-abbreviation/description/

411. Minimum Unique Word Abbreviation
Level
Hard

Description
A string such as "word" contains the following abbreviations:

["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]
Given a target string and a set of strings in a dictionary, find an abbreviation of this target string with the smallest possible length such that it does not conflict with abbreviations of the strings in the dictionary.

Each number or letter in the abbreviation is considered length = 1. For example, the abbreviation “a32bc” has length = 4.

Note:

In the case of multiple answers as shown in the second example below, you may return any one of them.
Assume length of target string = m, and dictionary size = n. You may assume that m ≤ 21, n ≤ 1000, and log2(n) + m ≤ 20.
Examples:

"apple", ["blade"] -> "a4" (because "5" or "4e" conflicts with "blade")

"apple", ["plain", "amber", "blade"] -> "1p3" (other valid answers include "ap3", "a3e", "2p2", "3le", "3l1").



# java



class Solution {
    public String minAbbreviation(String target, String[] dictionary) {
        int length = target.length();
        int totalCount = 1 << length;
        String minAbbr = target;
        int minLength = length;
        for (int i = totalCount; i > 0; i--) {
            String abbr = generateAbbreviation(target, i);
            if (abbr.length() > minLength)
                continue;
            boolean flag = true;
            for (String word : dictionary) {
                if (word.length() == length) {
                    String abbr2 = generateAbbreviation(word, i);
                    if (abbr2.equals(abbr)) {
                        flag = false;
                        break;
                    }
                }
            }
            if (flag) {
                if (abbr.length() < minLength) {
                    minAbbr = abbr;
                    minLength = abbr.length();
                }
            }
        }
        return minAbbr;
    }

    public String generateAbbreviation(String word, int num) {
        StringBuffer sb = new StringBuffer();
        int consecutiveCount = 0;
        int length = word.length();
        for (int i = 0; i < length; i++) {
            int cur = num & 1;
            if (cur == 1)
                consecutiveCount++;
            else {
                if (consecutiveCount > 0) {
                    sb.append(consecutiveCount);
                    consecutiveCount = 0;
                }
                sb.append(word.charAt(i));
            }
            num >>= 1;
        }
        if (consecutiveCount > 0)
            sb.append(consecutiveCount);
        return sb.toString();
    }
}



or


class Solution {
  public String minAbbreviation(String target, String[] dictionary) {
    final int m = target.length();
    List<Integer> masks = new ArrayList<>();

    for (final String word : dictionary) {
      if (word.length() != m)
        continue;
      masks.add(getMask(target, word));
    }

    if (masks.isEmpty())
      return String.valueOf(m);

    List<String> abbrs = new ArrayList<>();

    final int maxCand = (int) Math.pow(2, m);
    // all the candidate representation of the target
    for (int i = 0; i < maxCand; ++i) {
      final int cand = i;
      // All the masks have at lease one bit different from the candidate.
      if (masks.stream().allMatch(mask -> (cand & mask) > 0))
        abbrs.add(getAbbr(target, cand));
    }

    String ans = target;

    for (final String abbr : abbrs)
      if (getAbbrLen(abbr) < getAbbrLen(ans))
        ans = abbr;

    return ans;
  }

  private int getMask(final String target, final String word) {
    final int m = target.length();
    // mask[i] = 0 := target[i] == word[i]
    // mask[i] = 1 := target[i] != word[i]
    // e.g. target = "apple"
    //        word = "blade"
    //        mask =  11110
    int mask = 0;
    for (int i = 0; i < m; ++i)
      if (word.charAt(i) != target.charAt(i))
        mask |= 1 << m - 1 - i;
    return mask;
  }

  String getAbbr(final String target, int cand) {
    final int m = target.length();
    StringBuilder sb = new StringBuilder();
    int replacedCount = 0;
    for (int i = 0; i < m; ++i)
      if ((cand >> m - 1 - i & 1) == 1) {
        // If cand[i] = 1, `abbr` should show the original character.
        if (replacedCount > 0)
          sb.append(replacedCount);
        sb.append(target.charAt(i));
        replacedCount = 0;
      } else {
        // If cand[i] = 0, `abbr` can be replaced.
        ++replacedCount;
      }
    if (replacedCount > 0)
      sb.append(replacedCount);
    return sb.toString();
  }

  int getAbbrLen(final String abbr) {
    int abbrLen = 0;
    int i = 0;
    int j = 0;
    while (i < abbr.length()) {
      if (Character.isAlphabetic(abbr.charAt(j)))
        ++j;
      else
        while (j < abbr.length() && Character.isDigit(abbr.charAt(j)))
          ++j;
      ++abbrLen;
      i = j;
    }
    return abbrLen;
  }
}



