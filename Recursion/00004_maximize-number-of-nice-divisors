https://leetcode.com/problems/maximize-number-of-nice-divisors/description/


1808. Maximize Number of Nice Divisors
Hard
Topics
Companies
Hint
You are given a positive integer primeFactors. You are asked to construct a positive integer n that satisfies the following conditions:

The number of prime factors of n (not necessarily distinct) is at most primeFactors.
The number of nice divisors of n is maximized. Note that a divisor of n is nice if it is divisible by every prime factor of n. For example, if n = 12, then its prime factors are [2,2,3], then 6 and 12 are nice divisors, while 3 and 4 are not.
Return the number of nice divisors of n. Since that number can be too large, return it modulo 109 + 7.

Note that a prime number is a natural number greater than 1 that is not a product of two smaller natural numbers. The prime factors of a number n is a list of prime numbers such that their product equals n.

 

Example 1:

Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.
It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].
There is not other value of n that has at most 5 prime factors and more nice divisors.
Example 2:

Input: primeFactors = 8
Output: 18
 

Constraints:

1 <= primeFactors <= 109



# java


class Solution {
  public int maxNiceDivisors(int primeFactors) {
    if (primeFactors <= 3)
      return primeFactors;
    if (primeFactors % 3 == 0)
      return (int) (modPow(3, primeFactors / 3) % MOD);
    if (primeFactors % 3 == 1)
      return (int) (4 * modPow(3, (primeFactors - 4) / 3) % MOD);
    return (int) (2 * modPow(3, (primeFactors - 2) / 3) % MOD);
  }

  private static final int MOD = 1_000_000_007;

  private long modPow(long x, long n) {
    if (n == 0)
      return 1;
    if (n % 2 == 1)
      return x * modPow(x, n - 1) % MOD;
    return modPow(x * x % MOD, n / 2);
  }
}


or


class Solution {
    private final int mod = (int) 1e9 + 7;

    public int maxNiceDivisors(int primeFactors) {
        if (primeFactors < 4) {
            return primeFactors;
        }
        if (primeFactors % 3 == 0) {
            return qpow(3, primeFactors / 3);
        }
        if (primeFactors % 3 == 1) {
            return (int) (4L * qpow(3, primeFactors / 3 - 1) % mod);
        }
        return 2 * qpow(3, primeFactors / 3) % mod;
    }

    private int qpow(long a, long n) {
        long ans = 1;
        for (; n > 0; n >>= 1) {
            if ((n & 1) == 1) {
                ans = ans * a % mod;
            }
            a = a * a % mod;
        }
        return (int) ans;
    }
}



or



class Solution {
    int MOD = (int)(1e9+7);

    public int maxNiceDivisors(int n) {
        if(n <= 3) return n;
        
        /*
            Approach
            let say
            m = (p1 ^ e1) * (p2 ^ e2) ....  (pn ^ en)
            where p1, p2 ..... pn are primes
            and e1, e2, .. ..en are exponeent (power)
            
            As given n is the prime factor, 
            n will be n = e1 + e2 + e3 .... en
            
            and number of divisor will 
              divisorCount =  e1 * e2 * e3 .... en
            
            
            As in give problem statement, we want maximum divisor count
            so if want max divisor, so must large exponent,
            for largerst exponent, we must have smallest prime number as
            possible as.
            
            
            for this we can use only 2 numbers ,  2 and 3 as prime numbers
            
            we can convert any big number into 2s, 3s power
            
            Algorithm
            1. Keep adding 3s as long as n â‰¥ 5 and then subtarct 3 
            2. at end it will left, either 0, 2, 4
            3. so multiple the result by remaining n (except 0)
            
        */
        
        
        long divisorCount = 1L;
        int remainder = n % 3;
        
        if(remainder == 0){
            divisorCount = power(3, n / 3);
        
        }else if(remainder == 1) {
            divisorCount = 4 * power(3, (n - 4) / 3); 
        
        }else if(remainder == 2){
            divisorCount = 2 * power(3, n / 3);
        }
        
        return (int) (divisorCount % MOD);
    }
    
    private long power(long num, long exp){
        if (exp == 1) return num;
        if (exp == 0) return 1;
        
        long k1 = power(num, exp / 2);
        if (exp % 2 == 0) {
            return (k1 * k1) % MOD;
        } else {
            return (k1 * k1 * num) % MOD;
        }
    }
}


or


class Solution {
private static long mod = 1000000007;
private static long pow(long n){
    if(n==0) return 1;
    long half=pow(n/2);
    if(n%2==0) return (half*half)%mod;
    return (3*half*half)%mod;
}
public int maxNiceDivisors(int n) {
    if(n<5) return n;
    if(n%3==0) return (int)pow(n/3);
    if(n%3==1) return (int)((pow(n/3-1)*4)%mod);
    return (int)((pow(n/3)*2)%mod);
}
}



