https://leetcode.com/problems/basic-calculator-iv/description/

770. Basic Calculator IV
Hard
Topics
Companies
Hint
Given an expression such as expression = "e + 8 - a + 5" and an evaluation map such as {"e": 1} (given in terms of evalvars = ["e"] and evalints = [1]), return a list of tokens representing the simplified expression, such as ["-1*a","14"]

An expression alternates chunks and symbols, with a space separating each chunk and symbol.
A chunk is either an expression in parentheses, a variable, or a non-negative integer.
A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like "2x" or "-x".
Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction.

For example, expression = "1 + 2 * 3" has an answer of ["7"].
The format of the output is as follows:

For each term of free variables with a non-zero coefficient, we write the free variables within a term in sorted order lexicographically.
For example, we would never write a term like "b*a*c", only "a*b*c".
Terms have degrees equal to the number of free variables being multiplied, counting multiplicity. We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.
For example, "a*a*b*c" has degree 4.
The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) A leading coefficient of 1 is still printed.
An example of a well-formatted answer is ["-2*a*a*a", "3*a*a*b", "3*b*b", "4*a", "5*c", "-6"].
Terms (including constant terms) with coefficient 0 are not included.
For example, an expression of "0" has an output of [].
Note: You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

 

Example 1:

Input: expression = "e + 8 - a + 5", evalvars = ["e"], evalints = [1]
Output: ["-1*a","14"]
Example 2:

Input: expression = "e - 8 + temperature - pressure", evalvars = ["e", "temperature"], evalints = [1, 12]
Output: ["-1*pressure","5"]
Example 3:

Input: expression = "(e + 8) * (e - 8)", evalvars = [], evalints = []
Output: ["1*e*e","-64"]
 

Constraints:

1 <= expression.length <= 250
expression consists of lowercase English letters, digits, '+', '-', '*', '(', ')', ' '.
expression does not contain any leading or trailing spaces.
All the tokens in expression are separated by a single space.
0 <= evalvars.length <= 100
1 <= evalvars[i].length <= 20
evalvars[i] consists of lowercase English letters.
evalints.length == evalvars.length
-100 <= evalints[i] <= 100


# java


class Solution {
    public List<String> basicCalculatorIV(String expression, String[] evalVars, int[] evalInts) {
        Map<String, Integer> evalMap = new HashMap();
        for (int i = 0; i < evalVars.length; ++i)
            evalMap.put(evalVars[i], evalInts[i]);

        return parse(expression).evaluate(evalMap).toList();
    }

    public Poly make(String expr) {
        Poly ans = new Poly();
        List<String> list = new ArrayList();
        if (Character.isDigit(expr.charAt(0))) {
            ans.update(list, Integer.valueOf(expr));
        } else {
            list.add(expr);
            ans.update(list, 1);
        }
        return ans;
    }

    public Poly combine(Poly left, Poly right, char symbol) {
        if (symbol == '+') return left.add(right);
        if (symbol == '-') return left.sub(right);
        if (symbol == '*') return left.mul(right);
        throw null;
    }

    public Poly parse(String expr) {
        List<Poly> bucket = new ArrayList();
        List<Character> symbols = new ArrayList();
        int i = 0;
        while (i < expr.length()) {
            if (expr.charAt(i) == '(') {
                int bal = 0, j = i;
                for (; j < expr.length(); ++j) {
                    if (expr.charAt(j) == '(') bal++;
                    if (expr.charAt(j) == ')') bal--;
                    if (bal == 0) break;
                }
                bucket.add(parse(expr.substring(i+1, j)));
                i = j;
            } else if (Character.isLetterOrDigit(expr.charAt(i))) {
                int j = i;
                search : {
                    for (; j < expr.length(); ++j)
                        if (expr.charAt(j) == ' ') {
                            bucket.add(make(expr.substring(i, j)));
                            break search;
                        }
                    bucket.add(make(expr.substring(i)));
                }
                i = j;
            } else if (expr.charAt(i) != ' ') {
                symbols.add(expr.charAt(i));
            }
            i++;
        }

        for (int j = symbols.size() - 1; j >= 0; --j)
            if (symbols.get(j) == '*')
                bucket.set(j, combine(bucket.get(j), bucket.remove(j+1), symbols.remove(j)));

        if (bucket.isEmpty()) return new Poly();
        Poly ans = bucket.get(0);
        for (int j = 0; j < symbols.size(); ++j)
            ans = combine(ans, bucket.get(j+1), symbols.get(j));

        return ans;
    }
}

class Poly {
    HashMap<List<String>, Integer> count;
    Poly() {count = new HashMap();}

    void update(List<String> key, int val) {
        this.count.put(key, this.count.getOrDefault(key, 0) + val);
    }

    Poly add(Poly that) {
        Poly ans = new Poly();
        for (List<String> k: this.count.keySet())
            ans.update(k, this.count.get(k));
        for (List<String> k: that.count.keySet())
            ans.update(k, that.count.get(k));
        return ans;
    }

    Poly sub(Poly that) {
        Poly ans = new Poly();
        for (List<String> k: this.count.keySet())
            ans.update(k, this.count.get(k));
        for (List<String> k: that.count.keySet())
            ans.update(k, -that.count.get(k));
        return ans;
    }

    Poly mul(Poly that) {
        Poly ans = new Poly();
        for (List<String> k1: this.count.keySet())
            for (List<String> k2: that.count.keySet()) {
                List<String> kNew = new ArrayList();
                for (String x: k1) kNew.add(x);
                for (String x: k2) kNew.add(x);
                Collections.sort(kNew);
                ans.update(kNew, this.count.get(k1) * that.count.get(k2));
            }
        return ans;
    }

    Poly evaluate(Map<String, Integer> evalMap) {
        Poly ans = new Poly();
        for (List<String> k: this.count.keySet()) {
            int c = this.count.get(k);
            List<String> free = new ArrayList();
            for (String token: k) {
                if (evalMap.containsKey(token))
                    c *= evalMap.get(token);
                else
                    free.add(token);
            }
            ans.update(free, c);
        }
        return ans;
    }

    int compareList(List<String> A, List<String> B) {
        int i = 0;
        for (String x: A) {
            String y = B.get(i++);
            if (x.compareTo(y) != 0) return x.compareTo(y);
        }
        return 0;
    }
    List<String> toList() {
        List<String> ans = new ArrayList();
        List<List<String>> keys = new ArrayList(this.count.keySet());
        Collections.sort(keys, (a, b) ->
            a.size() != b.size() ? b.size() - a.size() : compareList(a, b));

        for (List<String> key: keys) {
            int v = this.count.get(key);
            if (v == 0) continue;
            StringBuilder word = new StringBuilder();
            word.append("" + v);
            for (String token: key) {
                word.append('*');
                word.append(token);
            }
            ans.add(word.toString());
        }
        return ans;
    }
}


or


class Solution {
    public List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {
        Polynomial polynomial = parse(expression);
        Map<String, Integer> evaluateMap = new HashMap<String, Integer>();
        int length = evalvars.length;
        for (int i = 0; i < length; i++)
            evaluateMap.put(evalvars[i], evalints[i]);
        Polynomial evaluation = polynomial.evaluate(evaluateMap);
        List<String> list = evaluation.toList();
        return list;
    }

    public Polynomial parse(String expression) {
        List<Polynomial> bucket = new ArrayList<Polynomial>();
        List<Character> operators = new ArrayList<Character>();
        int index = 0, length = expression.length();
        while (index < length) {
            if (expression.charAt(index) == '(') {
                int balance = 0;
                int curIndex = index;
                while (curIndex < length) {
                    if (expression.charAt(curIndex) == '(')
                        balance++;
                    else if (expression.charAt(curIndex) == ')')
                        balance--;
                    if (balance == 0)
                        break;
                    curIndex++;
                }
                Polynomial curPolynomial = parse(expression.substring(index + 1, curIndex));
                bucket.add(curPolynomial);
                index = curIndex;
            } else if (Character.isLetterOrDigit(expression.charAt(index))) {
                boolean flag = true;
                int curIndex = index;
                while (curIndex < length) {
                    if (expression.charAt(curIndex) == ' ') {
                        Polynomial curPolynomial = make(expression.substring(index, curIndex));
                        bucket.add(curPolynomial);
                        flag = false;
                        break;
                    }
                    curIndex++;
                }
                if (flag) {
                    Polynomial polynomial = make(expression.substring(index));
                    bucket.add(polynomial);
                }
                index = curIndex;
            } else if (expression.charAt(index) != ' ')
                operators.add(expression.charAt(index));
            index++;
        }
        for (int i = operators.size() - 1; i >= 0; i--) {
            if (operators.get(i) == '*') {
                Polynomial newPolynomial = combine(bucket.get(i), bucket.remove(i + 1), operators.remove(i));
                bucket.set(i, newPolynomial);
            }
        }
        if (bucket.isEmpty())
            return new Polynomial();
        Polynomial polynomial = bucket.get(0);
        int size = operators.size();
        for (int i = 0; i < size; i++)
            polynomial = combine(polynomial, bucket.get(i + 1), operators.get(i));
        return polynomial;
    }

    public Polynomial make(String expression) {
        Polynomial polynomial = new Polynomial();
        List<String> list = new ArrayList<String>();
        if (Character.isDigit(expression.charAt(0)))
            polynomial.update(list, Integer.valueOf(expression));
        else {
            list.add(expression);
            polynomial.update(list, 1);
        }
        return polynomial;
    }

    public Polynomial combine(Polynomial polynomial1, Polynomial polynomial2, char operator) {
        if (operator == '+')
            return polynomial1.add(polynomial2);
        else if (operator == '-')
            return polynomial1.subtract(polynomial2);
        else if (operator == '*')
            return polynomial1.multiply(polynomial2);
        else
            return null;
    }
}

class Polynomial {
    Map<List<String>, Integer> countMap;

    public Polynomial() {
        countMap = new HashMap<List<String>, Integer>();
    }

    public void update(List<String> key, int count) {
        int newCount = countMap.getOrDefault(key, 0) + count;
        countMap.put(key, newCount);
    }

    public Polynomial add(Polynomial polynomial2) {
        Polynomial sum = new Polynomial();
        Set<List<String>> keySet1 = countMap.keySet();
        for (List<String> list : keySet1)
            sum.update(list, countMap.get(list));
        Set<List<String>> keySet2 = polynomial2.countMap.keySet();
        for (List<String> list : keySet2)
            sum.update(list, polynomial2.countMap.get(list));
        return sum;
    }

    public Polynomial subtract(Polynomial polynomial2) {
        Polynomial difference = new Polynomial();
        Set<List<String>> keySet1 = countMap.keySet();
        for (List<String> list : keySet1)
            difference.update(list, countMap.get(list));
        Set<List<String>> keySet2 = polynomial2.countMap.keySet();
        for (List<String> list : keySet2)
            difference.update(list, -polynomial2.countMap.get(list));
        return difference;
    }

    public Polynomial multiply(Polynomial polynomial2) {
        Polynomial product = new Polynomial();
        Set<List<String>> keySet1 = countMap.keySet();
        Set<List<String>> keySet2 = polynomial2.countMap.keySet();
        for (List<String> list1 : keySet1) {
            for (List<String> list2 : keySet2) {
                List<String> newList = new ArrayList<String>();
                for (String str : list1)
                    newList.add(str);
                for (String str : list2)
                    newList.add(str);
                Collections.sort(newList);
                product.update(newList, countMap.get(list1) * polynomial2.countMap.get(list2));
            }
        }
        return product;
    }

    public Polynomial evaluate(Map<String, Integer> evaluateMap) {
        Polynomial polynomial = new Polynomial();
        Set<List<String>> keySet = countMap.keySet();
        for (List<String> list : keySet) {
            int count = countMap.get(list);
            List<String> freeList = new ArrayList<String>();
            for (String str : list) {
                if (evaluateMap.containsKey(str))
                    count *= evaluateMap.get(str);
                else
                    freeList.add(str);
            }
            polynomial.update(freeList, count);
        }
        return polynomial;
    }

    public int compareList(List<String> list1, List<String> list2) {
        int size1 = list1.size(), size2 = list2.size();
        if (size1 != size2)
            return size2 - size1;
        else {
            for (int i = 0; i < size1; i++) {
                String str1 = list1.get(i), str2 = list2.get(i);
                if (!str1.equals(str2))
                    return str1.compareTo(str2);
            }
            return 0;
        }
    }

    public List<String> toList() {
        List<String> list = new ArrayList<String>();
        List<List<String>> keyList = new ArrayList<List<String>>(countMap.keySet());
        Collections.sort(keyList, new Comparator<List<String>>() {
            public int compare(List<String> list1, List<String> list2) {
                return compareList(list1, list2);
            }
        });
        for (List<String> key : keyList) {
            int count = countMap.get(key);
            if (count != 0) {
                StringBuffer sb = new StringBuffer();
                sb.append(count);
                for (String str : key) {
                    sb.append('*');
                    sb.append(str);
                }
                list.add(sb.toString());
            }
        }
        return list;
    }
}


or


class Poly {
  public Poly add(Poly o) {
    for (final String term : o.terms.keySet())
      terms.merge(term, o.terms.get(term), Integer::sum);
    return this;
  }

  public Poly minus(Poly o) {
    for (final String term : o.terms.keySet())
      terms.merge(term, -o.terms.get(term), Integer::sum);
    return this;
  }

  public Poly mult(Poly o) {
    Poly res = new Poly();
    for (final String a : terms.keySet())
      for (final String b : o.terms.keySet())
        res.terms.merge(merge(a, b), terms.get(a) * o.terms.get(b), Integer::sum);
    return res;
  }

  // @Override
  // Public String toString() {
  //   StringBuilder sb = new StringBuilder();
  //   sb.append("{");
  //   for (final String term : terms.keySet())
  //     sb.append(term).append(": ").append(terms.get(term)).append(", ");
  //   sb.append("}");
  //   return sb.toString();
  // }

  public List<String> toList() {
    List<String> res = new ArrayList<>();
    List<String> keys = new ArrayList<>(terms.keySet());
    Collections.sort(keys, new Comparator<String>() {
      @Override
      public int compare(final String a, final String b) {
        // the minimum degree is the last
        if (a.equals("1"))
          return 1;
        if (b.equals("1"))
          return -1;
        String[] as = a.split("\\*");
        String[] bs = b.split("\\*");
        // the maximum degree is the first
        // Break ties by their lexicographic orders.
        return as.length == bs.length ? a.compareTo(b) : bs.length - as.length;
      }
    });
    for (final String key : keys)
      if (terms.get(key) != 0)
        res.add(concat(key));
    return res;
  }

  public Poly() {}
  public Poly(final String term, int coef) {
    terms.put(term, coef);
  }

  private Map<String, Integer> terms = new HashMap<>();

  // e.g. merge("a*b", "a*c") -> "a*a*b*c"
  private static String merge(final String a, final String b) {
    if (a.equals("1"))
      return b;
    if (b.equals("1"))
      return a;
    StringBuilder sb = new StringBuilder();
    String[] A = a.split("\\*");
    String[] B = b.split("\\*");
    int i = 0; // A's index
    int j = 0; // B's index
    while (i < A.length && j < B.length)
      if (A[i].compareTo(B[j]) < 0)
        sb.append("*").append(A[i++]);
      else
        sb.append("*").append(B[j++]);
    while (i < A.length)
      sb.append("*").append(A[i++]);
    while (j < B.length)
      sb.append("*").append(B[j++]);
    return sb.substring(1).toString();
  }

  private String concat(final String term) {
    if (term.equals("1"))
      return String.valueOf(terms.get(term));
    return new StringBuilder().append(terms.get(term)).append('*').append(term).toString();
  }
}

class Solution {
  public List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {
    List<String> tokens = getTokens(expression);
    Map<String, Integer> evalMap = new HashMap<>();

    for (int i = 0; i < evalvars.length; ++i)
      evalMap.put(evalvars[i], evalints[i]);

    for (int i = 0; i < tokens.size(); ++i)
      if (evalMap.containsKey(tokens.get(i)))
        tokens.set(i, String.valueOf(evalMap.get(tokens.get(i))));

    List<String> postfix = infixToPostfix(tokens);
    return evaluate(postfix).toList();
  }

  private List<String> getTokens(final String s) {
    List<String> tokens = new ArrayList<>();
    int i = 0;
    for (int j = 0; j < s.length(); ++j)
      if (s.charAt(j) == ' ') {
        if (i < j)
          tokens.add(s.substring(i, j));
        i = j + 1;
      } else if ("()+-*".contains(s.substring(j, j + 1))) {
        if (i < j)
          tokens.add(s.substring(i, j));
        tokens.add(s.substring(j, j + 1));
        i = j + 1;
      }
    if (i < s.length())
      tokens.add(s.substring(i));
    return tokens;
  }

  private boolean isOperator(final String token) {
    return token.equals("+") || token.equals("-") || token.equals("*");
  }

  private boolean precedes(final String prevOp, final String currOp) {
    if (prevOp.equals("("))
      return false;
    return prevOp.equals("*") || currOp.equals("+") || currOp.equals("-");
  }

  private List<String> infixToPostfix(List<String> tokens) {
    List<String> postfix = new ArrayList<>();
    Deque<String> ops = new ArrayDeque<>();

    for (final String token : tokens)
      if (token.equals("(")) {
        ops.push(token);
      } else if (token.equals(")")) {
        while (!ops.peek().equals("("))
          postfix.add(ops.pop());
        ops.pop();
      } else if (isOperator(token)) {
        while (!ops.isEmpty() && precedes(ops.peek(), token))
          postfix.add(ops.pop());
        ops.push(token);
      } else { // isOperand(token)
        postfix.add(token);
      }

    while (!ops.isEmpty())
      postfix.add(ops.pop());

    return postfix;
  }

  private Poly evaluate(List<String> postfix) {
    LinkedList<Poly> polys = new LinkedList<>();
    for (final String token : postfix)
      if (isOperator(token)) {
        final Poly b = polys.removeLast();
        final Poly a = polys.removeLast();
        if (token.equals("+"))
          polys.add(a.add(b));
        else if (token.equals("-"))
          polys.add(a.minus(b));
        else // token == "*"
          polys.add(a.mult(b));
      } else if (token.charAt(0) == '-' || token.chars().allMatch(c -> Character.isDigit(c))) {
        polys.add(new Poly("1", Integer.parseInt(token)));
      } else {
        polys.add(new Poly(token, 1));
      }
    return polys.getFirst();
  }
}
