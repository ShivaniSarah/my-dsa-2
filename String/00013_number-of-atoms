https://leetcode.com/problems/number-of-atoms/description/

726. Number of Atoms
Hard
Topics
Companies
Hint
Given a string formula representing a chemical formula, return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow.

For example, "H2O" and "H2O2" are possible, but "H1O2" is impossible.
Two formulas are concatenated together to produce another formula.

For example, "H2O2He3Mg4" is also a formula.
A formula placed in parentheses, and a count (optionally added) is also a formula.

For example, "(H2O2)" and "(H2O2)3" are formulas.
Return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.

The test cases are generated so that all the values in the output fit in a 32-bit integer.

 

Example 1:

Input: formula = "H2O"
Output: "H2O"
Explanation: The count of elements are {'H': 2, 'O': 1}.
Example 2:

Input: formula = "Mg(OH)2"
Output: "H2MgO2"
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.
Example 3:

Input: formula = "K4(ON(SO3)2)2"
Output: "K4N2O14S4"
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.
 

Constraints:

1 <= formula.length <= 1000
formula consists of English letters, digits, '(', and ')'.
formula is always valid.


# java


class Solution {
    public String countOfAtoms(String formula) {
        StringBuffer sb = new StringBuffer();
        sb.append(formula.charAt(0));
        char prevC = formula.charAt(0);
        int length = formula.length();
        for (int i = 1; i < length; i++) {
            char c = formula.charAt(i);
            boolean flag = Character.isLowerCase(c) || Character.isDigit(c) && Character.isDigit(prevC);
            if (!flag)
                sb.append(' ');
            sb.append(c);
            prevC = c;
        }
        String[] array = sb.toString().split(" ");
        Stack<String> stack = new Stack<String>();
        int arrayLength = array.length;
        for (int i = 0; i < arrayLength; i++) {
            String str = array[i];
            if (str.equals(")")) {
                if (i < arrayLength - 1 && Character.isDigit(array[i + 1].charAt(0)))
                    stack.push(str);
                else {
                    Stack<String> tempStack = new Stack<String>();
                    while (!stack.peek().equals("("))
                        tempStack.push(stack.pop());
                    stack.pop();
                    while (!tempStack.isEmpty())
                        stack.push(tempStack.pop());
                }
            } else if (Character.isDigit(str.charAt(0))) {
                int count = Integer.parseInt(str);
                String prev = stack.pop();
                if (prev.equals(")")) {
                    Stack<String> tempStack = new Stack<String>();
                    while (!stack.peek().equals("(")) {
                        String element = stack.pop();
                        int index = element.indexOf(',');
                        if (index >= 0) {
                            String atom = element.substring(0, index);
                            int atomCount = Integer.parseInt(element.substring(index + 1)) * count;
                            tempStack.push(atom + "," + atomCount);
                        } else
                            tempStack.push(element + "," + str);
                    }
                    stack.pop();
                    while (!tempStack.isEmpty())
                        stack.push(tempStack.pop());
                } else {
                    String curStr = prev + "," + str;
                    stack.push(curStr);
                }
            } else
                stack.push(str);
        }
        TreeMap<String, Integer> map = new TreeMap<String, Integer>();
        while (!stack.isEmpty()) {
            String atomCount = stack.pop();
            int index = atomCount.indexOf(',');
            if (index >= 0) {
                String atom = atomCount.substring(0, index);
                int count = Integer.parseInt(atomCount.substring(index + 1));
                count += map.getOrDefault(atom, 0);
                map.put(atom, count);
            } else {
                int count = map.getOrDefault(atomCount, 0) + 1;
                map.put(atomCount, count);
            }
        }
        StringBuffer output = new StringBuffer();
        Set<String> keySet = map.keySet();
        for (String atom : keySet) {
            int count = map.get(atom);
            output.append(atom);
            if (count > 1)
                output.append(count);
        }
        return output.toString();
    }
}


or


class Solution {
  public String countOfAtoms(String formula) {
    StringBuilder sb = new StringBuilder();
    Map<String, Integer> count = parse(formula);

    for (final String elem : count.keySet())
      sb.append(elem + (count.get(elem) == 1 ? "" : String.valueOf(count.get(elem))));

    return sb.toString();
  }

  private int i = 0;

  private Map<String, Integer> parse(String s) {
    Map<String, Integer> count = new TreeMap<>();

    while (i < s.length())
      if (s.charAt(i) == '(') {
        ++i; // Skip '('
        for (Map.Entry<String, Integer> entry : parse(s).entrySet()) {
          final String elem = entry.getKey();
          final int freq = entry.getValue();
          count.merge(elem, freq, Integer::sum);
        }
      } else if (s.charAt(i) == ')') {
        ++i; // Skip ')'
        final int num = getNum(s);
        for (final String elem : count.keySet()) {
          final int freq = count.get(elem);
          count.put(elem, freq * num);
        }
        return count; // Return back to the previous scope.
      } else {
        final String elem = getElem(s);
        final int num = getNum(s);
        count.merge(elem, num, Integer::sum);
      }

    return count;
  }

  private String getElem(final String s) {
    final int elemStart = i++; // `s[elemStart]` is uppercased.
    while (i < s.length() && Character.isLowerCase(s.charAt(i)))
      ++i;
    return s.substring(elemStart, i);
  }

  private int getNum(final String s) {
    final int numStart = i;
    while (i < s.length() && Character.isDigit(s.charAt(i)))
      ++i;
    final String numString = s.substring(numStart, i);
    return numString.isEmpty() ? 1 : Integer.parseInt(numString);
  }
}

or


class Solution {
      public String countOfAtoms(String formula) {
        Stack<Map<String, Integer>> stack = new Stack<>();
        stack.push(new HashMap<>());
        int len = formula.length();

        for (int i = 0; i < len; ) {
            if (formula.charAt(i) == '(') {
                stack.push(new HashMap<>());
                i++;
            } else if (formula.charAt(i) == ')') {
                Map<String, Integer> top = stack.pop();
                i++;
                int start = i;
                while (i < len && Character.isDigit(formula.charAt(i))) i++;
                int multiplier = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                for (String key : top.keySet()) {
                    stack.peek().put(key, stack.peek().getOrDefault(key, 0) + top.get(key) * multiplier);
                }
            } else {
                int start = i;
                i++;
                while (i < len && Character.isLowerCase(formula.charAt(i))) i++;
                String element = formula.substring(start, i);
                start = i;
                while (i < len && Character.isDigit(formula.charAt(i))) i++;
                int count = start < i ? Integer.parseInt(formula.substring(start, i)) : 1;
                stack.peek().put(element, stack.peek().getOrDefault(element, 0) + count);
            }
        }

        Map<String, Integer> result = stack.pop();
        List<String> elements = new ArrayList<>(result.keySet());
        Collections.sort(elements);
        StringBuilder sb = new StringBuilder();
        for (String element : elements) {
            sb.append(element);
            int count = result.get(element);
            if (count > 1) sb.append(count);
        }
        return sb.toString();
    }
}



or



class Solution {

    // Global variable
    int index = 0;

    public String countOfAtoms(String formula) {
        // Recursively parse the formula
        Map<String, Integer> finalMap = parseFormula(formula);

        // Sort the final map
        TreeMap<String, Integer> sortedMap = new TreeMap<>(finalMap);

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : sortedMap.keySet()) {
            ans.append(atom);
            if (sortedMap.get(atom) > 1) {
                ans.append(sortedMap.get(atom));
            }
        }

        return ans.toString();
    }

    // Recursively parse the formula
    private Map<String, Integer> parseFormula(String formula) {
        // Local variable
        Map<String, Integer> currMap = new HashMap<>();
        String currAtom = new String();
        String currCount = new String();

        // Iterate until the end of the formula
        while (index < formula.length()) {
            // UPPERCASE LETTER
            if (Character.isUpperCase(formula.charAt(index))) {
                if (!currAtom.isEmpty()) {
                    if (currCount.isEmpty()) {
                        currMap.put(
                            currAtom,
                            currMap.getOrDefault(currAtom, 0) + 1
                        );
                    } else {
                        currMap.put(
                            currAtom,
                            currMap.getOrDefault(currAtom, 0) +
                            Integer.parseInt(currCount)
                        );
                    }
                }

                currAtom = String.valueOf(formula.charAt(index));
                currCount = "";
                index++;
            }
            // lowercase letter
            else if (Character.isLowerCase(formula.charAt(index))) {
                currAtom += formula.charAt(index);
                index++;
            }
            // Digit. Concatenate the count
            else if (Character.isDigit(formula.charAt(index))) {
                currCount += formula.charAt(index);
                index++;
            }
            // Left Parenthesis
            else if (formula.charAt(index) == '(') {
                index++;
                Map<String, Integer> nestedMap = parseFormula(formula);
                for (String atom : nestedMap.keySet()) {
                    currMap.put(
                        atom,
                        currMap.getOrDefault(atom, 0) + nestedMap.get(atom)
                    );
                }
            }
            // Right Parenthesis
            else if (formula.charAt(index) == ')') {
                // Save the last atom and count of nested formula
                if (!currAtom.isEmpty()) {
                    if (currCount.isEmpty()) {
                        currMap.put(
                            currAtom,
                            currMap.getOrDefault(currAtom, 0) + 1
                        );
                    } else {
                        currMap.put(
                            currAtom,
                            currMap.getOrDefault(currAtom, 0) +
                            Integer.parseInt(currCount)
                        );
                    }
                }

                index++;
                StringBuilder multiplier = new StringBuilder();
                while (
                    index < formula.length() &&
                    Character.isDigit(formula.charAt(index))
                ) {
                    multiplier.append(formula.charAt(index));
                    index++;
                }
                if (multiplier.length() > 0) {
                    int mult = Integer.parseInt(multiplier.toString());
                    for (String atom : currMap.keySet()) {
                        currMap.put(atom, currMap.get(atom) * mult);
                    }
                }

                return currMap;
            }
        }

        // Save the last atom and count
        if (!currAtom.isEmpty()) {
            if (currCount.isEmpty()) {
                currMap.put(currAtom, currMap.getOrDefault(currAtom, 0) + 1);
            } else {
                currMap.put(
                    currAtom,
                    currMap.getOrDefault(currAtom, 0) +
                    Integer.parseInt(currCount)
                );
            }
        }

        return currMap;
    }
}



or


class Solution {

    // Global variable
    int index = 0;

    public String countOfAtoms(String formula) {
        // Recursively parse the formula
        Map<String, Integer> finalMap = parseFormula(formula);

        // Sort the final map
        TreeMap<String, Integer> sortedMap = new TreeMap<>(finalMap);

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : sortedMap.keySet()) {
            ans.append(atom);
            if (sortedMap.get(atom) > 1) {
                ans.append(sortedMap.get(atom));
            }
        }

        return ans.toString();
    }

    // Recursively parse the formula
    private Map<String, Integer> parseFormula(String formula) {
        // Local variable
        Map<String, Integer> currMap = new HashMap<>();

        // Iterate until right parenthesis or end of the formula
        while (index < formula.length() && formula.charAt(index) != ')') {
            // If left parenthesis, do recursion
            if (formula.charAt(index) == '(') {
                index++;
                Map<String, Integer> nestedMap = parseFormula(formula);
                for (String atom : nestedMap.keySet()) {
                    currMap.put(
                        atom,
                        currMap.getOrDefault(atom, 0) + nestedMap.get(atom)
                    );
                }
            }
            // Otherwise, it should be UPPERCASE LETTER
            // Extract the atom and count in one go.
            else {
                StringBuilder currAtom = new StringBuilder();
                currAtom.append(formula.charAt(index));
                index++;
                while (
                    index < formula.length() &&
                    Character.isLowerCase(formula.charAt(index))
                ) {
                    currAtom.append(formula.charAt(index));
                    index++;
                }

                StringBuilder currCount = new StringBuilder();
                while (
                    index < formula.length() &&
                    Character.isDigit(formula.charAt(index))
                ) {
                    currCount.append(formula.charAt(index));
                    index++;
                }

                if (currCount.length() == 0) {
                    currMap.put(
                        currAtom.toString(),
                        currMap.getOrDefault(currAtom.toString(), 0) + 1
                    );
                } else {
                    currMap.put(
                        currAtom.toString(),
                        currMap.getOrDefault(currAtom.toString(), 0) +
                        Integer.parseInt(currCount.toString())
                    );
                }
            }
        }

        // If the right parenthesis, extract the multiplier
        // and multiply the count of atoms in the curr_map
        index++;
        StringBuilder multiplier = new StringBuilder();
        while (
            index < formula.length() && Character.isDigit(formula.charAt(index))
        ) {
            multiplier.append(formula.charAt(index));
            index++;
        }
        if (multiplier.length() > 0) {
            int mult = Integer.parseInt(multiplier.toString());
            for (String atom : currMap.keySet()) {
                currMap.put(atom, currMap.get(atom) * mult);
            }
        }

        return currMap;
    }
}


or


class Solution {

    public String countOfAtoms(String formula) {
        // Stack to keep track of the atoms and their counts
        Stack<Map<String, Integer>> stack = new Stack<>();
        stack.push(new HashMap<>());

        // Index to keep track of the current character
        int index = 0;

        // Parse the formula
        while (index < formula.length()) {
            // If left parenthesis, insert a new hashmap to the stack. It will
            // keep track of the atoms and their counts in the nested formula
            if (formula.charAt(index) == '(') {
                stack.push(new HashMap<>());
                index++;
            }
            // If right parenthesis, pop the top element from the stack
            // Multiply the count with the multiplicity of the nested formula
            else if (formula.charAt(index) == ')') {
                Map<String, Integer> currMap = stack.pop();
                index++;
                StringBuilder multiplier = new StringBuilder();
                while (
                    index < formula.length() &&
                    Character.isDigit(formula.charAt(index))
                ) {
                    multiplier.append(formula.charAt(index));
                    index++;
                }
                if (multiplier.length() > 0) {
                    int mult = Integer.parseInt(multiplier.toString());
                    for (String atom : currMap.keySet()) {
                        currMap.put(atom, currMap.get(atom) * mult);
                    }
                }

                for (String atom : currMap.keySet()) {
                    stack
                        .peek()
                        .put(
                            atom,
                            stack.peek().getOrDefault(atom, 0) +
                            currMap.get(atom)
                        );
                }
            }
            // Otherwise, it must be a UPPERCASE LETTER. Extract the complete
            // atom with frequency, and update the most recent hashmap
            else {
                StringBuilder currAtom = new StringBuilder();
                currAtom.append(formula.charAt(index));
                index++;
                while (
                    index < formula.length() &&
                    Character.isLowerCase(formula.charAt(index))
                ) {
                    currAtom.append(formula.charAt(index));
                    index++;
                }

                StringBuilder currCount = new StringBuilder();
                while (
                    index < formula.length() &&
                    Character.isDigit(formula.charAt(index))
                ) {
                    currCount.append(formula.charAt(index));
                    index++;
                }

                int count = currCount.length() > 0
                    ? Integer.parseInt(currCount.toString())
                    : 1;
                stack
                    .peek()
                    .put(
                        currAtom.toString(),
                        stack.peek().getOrDefault(currAtom.toString(), 0) +
                        count
                    );
            }
        }

        // Sort the final map
        TreeMap<String, Integer> finalMap = new TreeMap<>(stack.peek());

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : finalMap.keySet()) {
            ans.append(atom);
            if (finalMap.get(atom) > 1) {
                ans.append(finalMap.get(atom));
            }
        }

        return ans.toString();
    }
}


or



import java.util.regex.*;

class Solution {

    public String countOfAtoms(String formula) {
        // Regular expression to extract atom, count, (, ), multiplier
        // Every element of parsed will be a quintuple
        String regex = "([A-Z][a-z]*)(\\d*)|(\\()|(\\))(\\d*)";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(formula);

        // Stack to keep track of the atoms and their counts
        Stack<Map<String, Integer>> stack = new Stack<>();
        stack.push(new HashMap<>());

        // Parse the formula
        while (matcher.find()) {
            String atom = matcher.group(1);
            String count = matcher.group(2);
            String left = matcher.group(3);
            String right = matcher.group(4);
            String multiplier = matcher.group(5);

            // If atom, add it to the top hashmap
            if (atom != null) {
                stack
                    .peek()
                    .put(
                        atom,
                        stack.peek().getOrDefault(atom, 0) +
                        (count.isEmpty() ? 1 : Integer.parseInt(count))
                    );
            }
            // If left parenthesis, insert a new hashmap to the stack
            else if (left != null) {
                stack.push(new HashMap<>());
            }
            // If right parenthesis, pop the top element from the stack
            // Multiply the count with the attached multiplicity.
            // Add the count to the current formula
            else if (right != null) {
                Map<String, Integer> currMap = stack.pop();
                if (!multiplier.isEmpty()) {
                    int mult = Integer.parseInt(multiplier);
                    for (String atomName : currMap.keySet()) {
                        currMap.put(atomName, currMap.get(atomName) * mult);
                    }
                }

                for (String atomName : currMap.keySet()) {
                    stack
                        .peek()
                        .put(
                            atomName,
                            stack.peek().getOrDefault(atomName, 0) +
                            currMap.get(atomName)
                        );
                }
            }
        }

        // Sort the final map
        TreeMap<String, Integer> finalMap = new TreeMap<>(stack.peek());

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : finalMap.keySet()) {
            ans.append(atom);
            if (finalMap.get(atom) > 1) {
                ans.append(finalMap.get(atom));
            }
        }

        return ans.toString();
    }
}


or


class Solution {

    public String countOfAtoms(String formula) {
        // For multipliers
        int runningMul = 1;
        Stack<Integer> stack = new Stack<>();
        stack.push(1);

        // Map to store the count of atoms
        Map<String, Integer> finalMap = new HashMap<>();

        // Strings to take care of current atom and count
        StringBuilder currAtom = new StringBuilder();
        StringBuilder currCount = new StringBuilder();

        // Index to traverse the formula in reverse
        int index = formula.length() - 1;

        // Parse the formula
        while (index >= 0) {
            // If digit, update the count
            if (Character.isDigit(formula.charAt(index))) {
                currCount.insert(0, formula.charAt(index));
            }
            // If a lowercase letter, prepend to the currAtom
            else if (Character.isLowerCase(formula.charAt(index))) {
                currAtom.insert(0, formula.charAt(index));
            }
            // If UPPERCASE LETTER, update the finalMap
            else if (Character.isUpperCase(formula.charAt(index))) {
                currAtom.insert(0, formula.charAt(index));
                int count = currCount.length() > 0
                    ? Integer.parseInt(currCount.toString())
                    : 1;
                finalMap.put(
                    currAtom.toString(),
                    finalMap.getOrDefault(currAtom.toString(), 0) +
                    count * runningMul
                );

                currAtom = new StringBuilder();
                currCount = new StringBuilder();
            }
            // If the right parenthesis, the currCount if any
            // will be considered as multiplier
            else if (formula.charAt(index) == ')') {
                int currMultiplier = currCount.length() > 0
                    ? Integer.parseInt(currCount.toString())
                    : 1;
                stack.push(currMultiplier);
                runningMul *= currMultiplier;
                currCount = new StringBuilder();
            }
            // If left parenthesis, update the runningMul
            else if (formula.charAt(index) == '(') {
                runningMul /= stack.pop();
            }

            index--;
        }

        // Sort the final map
        TreeMap<String, Integer> sortedMap = new TreeMap<>(finalMap);

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : sortedMap.keySet()) {
            ans.append(atom);
            if (sortedMap.get(atom) > 1) {
                ans.append(sortedMap.get(atom));
            }
        }

        return ans.toString();
    }
}


or
class Solution {

    public String countOfAtoms(String formula) {
        // For every index, store the valid multiplier
        int[] muls = new int[formula.length()];
        int runningMul = 1;

        // Stack to take care of nested formula
        Stack<Integer> stack = new Stack<>();
        stack.push(1);

        // Preprocess the formula and extract all multipliers
        int index = formula.length() - 1;
        StringBuilder currNumber = new StringBuilder();
        while (index >= 0) {
            if (Character.isDigit(formula.charAt(index))) {
                currNumber.insert(0, formula.charAt(index));
            }
            // If we encountered a letter, then the scanned
            // number was count and not a multiplier. Discard it.
            else if (Character.isAlphabetic(formula.charAt(index))) {
                currNumber = new StringBuilder();
            }
            // If we encounter a right parenthesis, then the
            // scanned number was multiplier. Store it.
            else if (formula.charAt(index) == ')') {
                int currMultiplier = currNumber.length() > 0
                    ? Integer.parseInt(currNumber.toString())
                    : 1;
                runningMul *= currMultiplier;
                stack.push(currMultiplier);
                currNumber = new StringBuilder();
            }
            // If we encounter a left parenthesis, then the
            // most recent multiplier will cease to exist.
            else if (formula.charAt(index) == '(') {
                runningMul /= stack.pop();
                currNumber = new StringBuilder();
            }

            // For every index, store the valid multiplier
            muls[index] = runningMul;
            index--;
        }

        // Map to store the count of atoms
        Map<String, Integer> finalMap = new HashMap<>();

        // Traverse left to right in the formula
        index = 0;
        while (index < formula.length()) {
            // If UPPER CASE LETTER, extract the entire atom
            if (Character.isUpperCase(formula.charAt(index))) {
                StringBuilder currAtom = new StringBuilder();
                currAtom.append(formula.charAt(index));
                StringBuilder currCount = new StringBuilder();
                index++;
                while (
                    index < formula.length() &&
                    Character.isLowerCase(formula.charAt(index))
                ) {
                    currAtom.append(formula.charAt(index));
                    index++;
                }

                // Extract the count
                while (
                    index < formula.length() &&
                    Character.isDigit(formula.charAt(index))
                ) {
                    currCount.append(formula.charAt(index));
                    index++;
                }

                // Update the final map
                int count = currCount.length() > 0
                    ? Integer.parseInt(currCount.toString())
                    : 1;
                finalMap.put(
                    currAtom.toString(),
                    finalMap.getOrDefault(currAtom.toString(), 0) +
                    count * muls[index - 1]
                );
            } else {
                index++;
            }
        }

        // Sort the final map
        TreeMap<String, Integer> sortedMap = new TreeMap<>(finalMap);

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : sortedMap.keySet()) {
            ans.append(atom);
            if (sortedMap.get(atom) > 1) {
                ans.append(sortedMap.get(atom));
            }
        }

        return ans.toString();
    }
}



or


// best

import java.util.regex.*;

class Solution {

    public String countOfAtoms(String formula) {
        // Every element of matcher will be a quintuple
        Matcher matcher = Pattern.compile(
            "([A-Z][a-z]*)(\\d*)|(\\()|(\\))(\\d*)"
        ).matcher(formula);
        List<String[]> list = new ArrayList<>();
        while (matcher.find()) {
            list.add(
                new String[] {
                    matcher.group(1),
                    matcher.group(2),
                    matcher.group(3),
                    matcher.group(4),
                    matcher.group(5),
                }
            );
        }
        Collections.reverse(list);

        // Map to store the count of atoms
        Map<String, Integer> finalMap = new HashMap<>();

        // Stack to keep track of the nested multiplicities
        Stack<Integer> stack = new Stack<>();
        stack.push(1);

        // Current Multiplicity
        int runningMul = 1;

        // Parse the formula
        for (String[] quintuple : list) {
            String atom = quintuple[0];
            String count = quintuple[1];
            String left = quintuple[2];
            String right = quintuple[3];
            String multiplier = quintuple[4];

            // If atom, add it to the final map
            if (atom != null) {
                int cnt = count.length() > 0 ? Integer.parseInt(count) : 1;
                finalMap.put(
                    atom,
                    finalMap.getOrDefault(atom, 0) + cnt * runningMul
                );
            }
            // If the right parenthesis, multiply the runningMul
            else if (right != null) {
                int currMultiplier = multiplier.length() > 0
                    ? Integer.parseInt(multiplier)
                    : 1;
                runningMul *= currMultiplier;
                stack.push(currMultiplier);
            }
            // If left parenthesis, divide the runningMul
            else if (left != null) {
                runningMul /= stack.pop();
            }
        }

        // Sort the final map
        TreeMap<String, Integer> sortedMap = new TreeMap<>(finalMap);

        // Generate the answer string
        StringBuilder ans = new StringBuilder();
        for (String atom : sortedMap.keySet()) {
            ans.append(atom);
            if (sortedMap.get(atom) > 1) {
                ans.append(sortedMap.get(atom));
            }
        }

        return ans.toString();
    }
}
