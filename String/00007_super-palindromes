https://leetcode.com/problems/super-palindromes/description/

906. Super Palindromes
Hard
Topics
Companies
Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

 

Example 1:

Input: left = "4", right = "1000"
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.
Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.
Example 2:

Input: left = "1", right = "2"
Output: 1
 

Constraints:

1 <= left.length, right.length <= 18
left and right consist of only digits.
left and right cannot have leading zeros.
left and right represent integers in the range [1, 1018 - 1].
left is less than or equal to right.


# java

class Solution {
    public int superpalindromesInRange(String sL, String sR) {
        long L = Long.valueOf(sL);
        long R = Long.valueOf(sR);
        int MAGIC = 100000;
        int ans = 0;

        // count odd length;
        for (int k = 1; k < MAGIC; ++k) {
            StringBuilder sb = new StringBuilder(Integer.toString(k));
            for (int i = sb.length() - 2; i >= 0; --i)
                sb.append(sb.charAt(i));
            long v = Long.valueOf(sb.toString());
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v)) ans++;
        }

        // count even length;
        for (int k = 1; k < MAGIC; ++k) {
            StringBuilder sb = new StringBuilder(Integer.toString(k));
            for (int i = sb.length() - 1; i >= 0; --i)
                sb.append(sb.charAt(i));
            long v = Long.valueOf(sb.toString());
            v *= v;
            if (v > R) break;
            if (v >= L && isPalindrome(v)) ans++;
        }

        return ans;
    }

    public boolean isPalindrome(long x) {
        return x == reverse(x);
    }

    public long reverse(long x) {
        long ans = 0;
        while (x > 0) {
            ans = 10 * ans + x % 10;
            x /= 10;
        }

        return ans;
    }
}


or


class Solution {
  public int superpalindromesInRange(String left, String right) {
    int ans = 0;
    Long l = Long.valueOf(left);
    Long r = Long.valueOf(right);

    for (long i = (long) Math.sqrt(l); i * i <= r;) {
      long palindrome = nextPalindrome(i);
      long squared = palindrome * palindrome;
      if (squared <= r && isPalindrome(squared))
        ++ans;
      i = palindrome + 1;
    }

    return ans;
  }

  private long nextPalindrome(long num) {
    final String s = String.valueOf(num);
    final int n = s.length();

    String half = s.substring(0, (n + 1) / 2);
    String reversedHalf = new StringBuilder(half.substring(0, n / 2)).reverse().toString();
    final long candidate = Long.valueOf(half + reversedHalf);
    if (candidate >= num)
      return candidate;

    half = String.valueOf(Long.valueOf(half) + 1);
    reversedHalf = new StringBuilder(half.substring(0, n / 2)).reverse().toString();
    return Long.valueOf(half + reversedHalf);
  }

  private boolean isPalindrome(long num) {
    final String s = String.valueOf(num);
    int l = 0;
    int r = s.length() - 1;

    while (l < r)
      if (s.charAt(l++) != s.charAt(r--))
        return false;

    return true;
  }
}


or


class Solution {
    public int superpalindromesInRange(String L, String R) {
        long squareLow = Long.parseLong(L), squareHigh = Long.parseLong(R);
        long low = (long) Math.ceil(Math.sqrt(squareLow));
        long high = (long) Math.floor(Math.sqrt(squareHigh));
        int count = 0;
        for (int i = 1; i < 100000; i++) {
            long palindrome = getOddLengthPalindrome(i);
            if (palindrome < low)
                continue;
            else if (palindrome > high)
                break;
            else {
                long square = palindrome * palindrome;
                if (isPalindrome(square))
                    count++;
            }
        }
        for (int i = 1; i < 100000; i++) {
            long palindrome = getEvenLengthPalindrome(i);
            if (palindrome < low)
                continue;
            else if (palindrome > high)
                break;
            else {
                long square = palindrome * palindrome;
                if (isPalindrome(square))
                    count++;
            }
        }
        return count;
    }

    public long getOddLengthPalindrome(int num) {
        StringBuffer sb = new StringBuffer(String.valueOf(num));
        int length = sb.length();
        for (int i = length - 2; i >= 0; i--)
            sb.append(sb.charAt(i));
        return Long.parseLong(sb.toString());
    }

    public long getEvenLengthPalindrome(int num) {
        StringBuffer sb = new StringBuffer(String.valueOf(num));
        int length = sb.length();
        for (int i = length - 1; i >= 0; i--)
            sb.append(sb.charAt(i));
        return Long.parseLong(sb.toString());
    }

    public boolean isPalindrome(long num) {
        char[] array = String.valueOf(num).toCharArray();
        int left = 0, right = array.length - 1;
        while (left < right) {
            if (array[left] != array[right])
                return false;
            left++;
            right--;
        }
        return true;
    }
}


or


class Solution {
    static final long maximum = 40004000900040004L;

    static int[] all = new int[]{
        1,
        2,
        3,
        11,
        22,
        101,
        111,
        121,
        202,
        212,
        1001,
        1111,
        2002,
        10001,
        10101,
        10201,
        11011,
        11111,
        11211,
        20002,
        20102,
        100001,
        101101,
        110011,
        111111,
        200002,
        1000001,
        1001001,
        1002001,
        1010101,
        1011101,
        1012101,
        1100011,
        1101011,
        1102011,
        1110111,
        1111111,
        2000002,
        2001002,
        10000001,
        10011001,
        10100101,
        10111101,
        11000011,
        11011011,
        11100111,
        11111111,
        20000002,
        100000001,
        100010001,
        100020001,
        100101001,
        100111001,
        100121001,
        101000101,
        101010101,
        101020101,
        101101101,
        101111101,
        110000011,
        110010011,
        110020011,
        110101011,
        110111011,
        111000111,
        111010111,
        111101111,
        111111111,
        200000002,
        200010002,
    };

    static TreeSet<Long> allSet = new TreeSet<>();

    static {
        for(int i = 0; i < all.length; i++) {
            allSet.add((long) all[i]);
        }
    }

    public int superpalindromesInRange(String left, String right) {
        long longLeft = Long.valueOf(left);
        if (longLeft > maximum) return 0;

        if (right.length() == 18) {
            if (left.length() == 18) {
                return 0;
            }
        }

        long longRight = Long.valueOf(right);
        if (longRight > maximum) {
            longRight = maximum;
        }

        long leftSqrt = (long) Math.sqrt(longLeft - 1L);
        long rightSqrt = (long) Math.sqrt(longRight + 1L);

        return allSet.subSet(leftSqrt, false, rightSqrt, true).size();
    }
}


or



class Solution {
    public int superpalindromesInRange(String left, String right) {
        long l = Long.valueOf(left);
        long r = Long.valueOf(right);
        int count = 0;
        
        //Create the palindromes in range 1, 100000
        //Even Palindromes
        for(int i = 1; i < 100000; i++) {
            StringBuilder sb = new StringBuilder(Integer.toString(i));
            for(int j = sb.length()-1; j >= 0; j--) {
                sb.append(sb.charAt(j));
            }
            
            //Palindrome in sb
            long n = Long.valueOf(sb.toString());
            n*=n;
            //Check if n is a super palindrome --> Find whether it is palindrome
            if(n > r) break;
            else if(n>=l && isPalindrome(n)) count++;
        }
        
        //Odd Palindromes
        for(int i = 1; i < 100000; i++) {
            StringBuilder sb = new StringBuilder(Integer.toString(i));
            for(int j = sb.length()-2; j >= 0; j--) {
                sb.append(sb.charAt(j));
            }
            
            //Palindrome in sb
            long n = Long.valueOf(sb.toString());
            n*=n;
            //Check if n is a super palindrome --> Find whether it is palindrome
            if(n > r) break;
            else if(n>=l && isPalindrome(n)) count++;
        }
        
        return count;
        
    }
    
    public boolean isPalindrome(long n) {
        return n == reverse(n);
    }
    
    public long reverse(long n) {
        long rev = 0;
        while(n > 0) {
            rev = rev*10 + n%10;
            n/=10;
        }
        return rev;
    }
}

or


class Solution {
    public int superpalindromesInRange(String L, String R) {
        long lo = Long.parseLong(L), hi = Long.parseLong(R);
        var nums = new ArrayList<String>();
        nums.add("");
        int ans = 0;
        for(int i = 0; i < 4; ++i){
            nums.add(""+i);
            if (lo <= i*i && i*i <= hi){
                ++ans;
            }
        }
        for(int len = 1; len <= 4; ++len){
            var nextNums = new ArrayList<String>();
            for(var num : nums){
                for(int i = 0; i < 4; ++i){
                    var next = (""+i)+num+(""+i);
                    nextNums.add(next);
                    if (next.charAt(next.length()-1) == '0') continue;
                    var v = Long.parseLong(next);
                    v *= v;
                    if (lo <= v && v <= hi){
                        if ((""+v).equals(new StringBuilder(""+v).reverse().toString())){
                            ++ans;
                        }
                    }
                }
            }
            nums = nextNums;
        }
        return ans;
    }
}
