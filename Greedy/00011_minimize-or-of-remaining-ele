https://leetcode.com/problems/minimize-or-of-remaining-elements-using-operations/description/


3022. Minimize OR of Remaining Elements Using Operations
Hard
Topics
Companies
Hint
You are given a 0-indexed integer array nums and an integer k.

In one operation, you can pick any index i of nums such that 0 <= i < nums.length - 1 and replace nums[i] and nums[i + 1] with a single occurrence of nums[i] & nums[i + 1], where & represents the bitwise AND operator.

Return the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.

 

Example 1:

Input: nums = [3,5,3,2,7], k = 2
Output: 3
Explanation: Let's do the following operations:
1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [1,3,2,7].
2. Replace nums[2] and nums[3] with (nums[2] & nums[3]) so that nums becomes equal to [1,3,2].
The bitwise-or of the final array is 3.
It can be shown that 3 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.
Example 2:

Input: nums = [7,3,15,14,2,8], k = 4
Output: 2
Explanation: Let's do the following operations:
1. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,15,14,2,8]. 
2. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [3,14,2,8].
3. Replace nums[0] and nums[1] with (nums[0] & nums[1]) so that nums becomes equal to [2,2,8].
4. Replace nums[1] and nums[2] with (nums[1] & nums[2]) so that nums becomes equal to [2,0].
The bitwise-or of the final array is 2.
It can be shown that 2 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.
Example 3:

Input: nums = [10,7,10,3,9,14,9,4], k = 1
Output: 15
Explanation: Without applying any operations, the bitwise-or of nums is 15.
It can be shown that 15 is the minimum possible value of the bitwise OR of the remaining elements of nums after applying at most k operations.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] < 230
0 <= k < nums.length


#Â java


class Solution {
  public int minOrAfterOperations(int[] nums, int k) {
    final int MAX_BIT = 30;
    int ans = 0;
    int prefixMask = 0; // Grows like: 10000 -> 11000 -> ... -> 11111.

    for (int i = MAX_BIT; i >= 0; --i) {
      // Add the i-th bit to `prefixMask` and attempt to "turn off" the
      // currently added bit within k operations. If it's impossible, then we
      // add the i-th bit to the answer.
      prefixMask |= 1 << i;
      if (getMergeOps(nums, prefixMask, ans) > k)
        ans |= 1 << i;
    }

    return ans;
  }

  // Returns the number of merge operations to turn `prefixMask` to the target
  // by ANDing `nums`.
  private int getMergeOps(int[] nums, int prefixMask, int target) {
    int mergeOps = 0;
    int ands = prefixMask;
    for (final int num : nums) {
      ands &= num;
      if ((ands | target) == target)
        ands = prefixMask;
      else
        ++mergeOps; // Keep merging the next num.
    }
    return mergeOps;
  }
}


or


class Solution {
    public int minOrAfterOperations(int[] nums, int k) {
        int ans = 0, rans = 0;
        for (int i = 29; i >= 0; i--) {
            int test = ans + (1 << i);
            int cnt = 0;
            int val = 0;
            for (int num : nums) {
                if (val == 0) {
                    val = test & num;
                } else {
                    val &= test & num;
                }
                if (val != 0) {
                    cnt++;
                }
            }
            if (cnt > k) {
                rans += (1 << i);
            } else {
                ans += (1 << i);
            }
        }
        return rans;
    }
}



or

class Solution {
    public int minOrAfterOperations(int[] nums, int k) {
        int ans=0;
        int mask=0; // used for performing operation on prefix of bits
        for(int j=30;j>=0;j--){ // builds answer bit by bit
            mask=mask | (1<<j);// mask changes(10000.. -> 11000..->11100..->11110..->111111..)

            int cosecutiveAnd=mask;
            int mergeCount=0;// no. of merges required to make current bit 0
            for(int i:nums){
                cosecutiveAnd = cosecutiveAnd & i; 
                if((cosecutiveAnd|ans)!=ans) // explained below
                    mergeCount++; //while above condition is not achieved keep merging
                else cosecutiveAnd=mask; // else reset cosecutiveAnd to mask(11111..0000...), no need to increase count
            }

            if(mergeCount>k)
                ans|=(1<<j);// if(count is more than k, make set curent bit of 1, else it stays 0)
        }
        return ans;
    }
}


or

//bitmask


class Solution {
    int solve(int target, boolean[] take, int[] nums){
        int ans = 0;
        int i = 0;
        int n = nums.length;
        while(i < n){
            if(!take[i]){
                i+=1;
                continue;
            }
            int st = i;
            int all = nums[i];
            while(i < n && take[i] && (all & target) != 0){
                all&=nums[i];
                i+=1;
            }
            if( (all & target) == 0){
                ans += ( i - st - 1);
            }else{
                ans += (i - st);
            }
        }
        return ans;
    }
    public int minOrAfterOperations(int[] nums, int k) {
        int n = nums.length;
        int ans = 0;
        int res = 0;
        for(int bit = 29; bit >= 0; bit--){
            int mask = res | (1 << bit);
            boolean[] take = new boolean[n];
            Arrays.fill(take, false);
            for(int i = 0; i < n; i++){
                if( (nums[i] & mask) == 0) continue;
                take[i] = true;
            }
            int op = solve(mask, take, nums);
            if(op <= k)
                res = mask;
            else
                ans = ans | (1 << bit);
        }
        return ans;
        
    }
}

or


public class Solution {
    public int minOrAfterOperations(int[] nums, int k) {
        int n = nums.length;
        int ans = 0;

        for (int j = 30; j >= 0; j--) {
            int cnt = 0;
            
            int cur = (1 << 30) - 1;
            int target = ans | ((1 << j) - 1);

            for (int i = 0; i < n; i++) {
                cur &= nums[i];
                if ((cur | target) == target) {
                    cnt++;
                    cur = (1 << 30) - 1;
                }
            }

            if (n - cnt > k) {
                ans |= (1 << j);
            }
        }
        return ans;
    }
}
