https://leetcode.com/problems/apply-operations-on-array-to-maximize-sum-of-squares/description/

2897. Apply Operations on Array to Maximize Sum of Squares
Hard
Topics
Companies
Hint
You are given a 0-indexed integer array nums and a positive integer k.

You can do the following operation on the array any number of times:

Choose any two distinct indices i and j and simultaneously update the values of nums[i] to (nums[i] AND nums[j]) and nums[j] to (nums[i] OR nums[j]). Here, OR denotes the bitwise OR operation, and AND denotes the bitwise AND operation.
You have to choose k elements from the final array and calculate the sum of their squares.

Return the maximum sum of squares you can achieve.

Since the answer can be very large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [2,6,5,8], k = 2
Output: 261
Explanation: We can do the following operations on the array:
- Choose i = 0 and j = 3, then change nums[0] to (2 AND 8) = 0 and nums[3] to (2 OR 8) = 10. The resulting array is nums = [0,6,5,10].
- Choose i = 2 and j = 3, then change nums[2] to (5 AND 10) = 0 and nums[3] to (5 OR 10) = 15. The resulting array is nums = [0,6,0,15].
We can choose the elements 15 and 6 from the final array. The sum of squares is 152 + 62 = 261.
It can be shown that this is the maximum value we can get.
Example 2:

Input: nums = [4,5,4,7], k = 3
Output: 90
Explanation: We do not need to apply any operations.
We can choose the elements 7, 5, and 4 with a sum of squares: 72 + 52 + 42 = 90.
It can be shown that this is the maximum value we can get.
 

Constraints:

1 <= k <= nums.length <= 105
1 <= nums[i] <= 109



# java


class Solution {
    public int maxSum(List<Integer> nums, int k) {
        final int mod = (int) 1e9 + 7;
        int[] cnt = new int[31];
        for (int x : nums) {
            for (int i = 0; i < 31; ++i) {
                if ((x >> i & 1) == 1) {
                    ++cnt[i];
                }
            }
        }
        long ans = 0;
        while (k-- > 0) {
            int x = 0;
            for (int i = 0; i < 31; ++i) {
                if (cnt[i] > 0) {
                    x |= 1 << i;
                    --cnt[i];
                }
            }
            ans = (ans + 1L * x * x) % mod;
        }
        return (int) ans;
    }
}


or


// bets


class Solution {
  public int maxSum(List<Integer> nums, int k) {
    final int MOD = 1_000_000_007;
    final int MAX_BIT = 30;
    int ans = 0;
    // minIndices[i] := the minimum index in `optimalNums` that the i-th bit
    // should be moved to
    int[] minIndices = new int[MAX_BIT];
    int[] optimalNums = new int[nums.size()];

    for (final int num : nums)
      for (int i = 0; i < MAX_BIT; i++)
        if ((num >> i & 1) == 1)
          optimalNums[minIndices[i]++] |= 1 << i;

    for (int i = 0; i < k; i++)
      ans = (int) ((ans + (long) optimalNums[i] * optimalNums[i]) % MOD);

    return ans;
  }
}

or


class Solution {
      public int maxSum(List<Integer> A, int k) {
        int count[] = new int[32];
        long res = 0, cur = 0, mod = 1000000007;
        for (int a : A)
            for (int i = 0; i < 32; i++)
                if ((a & (1 << i)) != 0)
                    count[i]++;
        for (int j = 0; j < k; j++) {
            cur = 0;
            for (int i = 0; i < 32; i++) {
                if (count[i] > 0) {
                    count[i]--;
                    cur += 1 << i;
                }
            }
            res = (res + cur * cur % mod) % mod;
        }
        return (int)res;
    }
}


or


class Solution {
        public int maxSum(List<Integer> A, int k) {
        int count[] = new int[32];
        long res = 0, cur = 0, mod = 1000000007;
        for (int x : A)
            for (int i = 0; i < 32; i++)
                if ((x & (1 << i)) != 0)
                    count[i]++;
        for (int j = 0; j < k; j++) {
            cur = 0;
            for (int i = 0; i < 32; i++) {
                if (count[i] > 0) {
                    count[i]--;
                    cur += 1 << i;
                }
            }
            res = (res + cur * cur % mod) % mod;
        }
        return (int)res;
    }
}

or


import java.util.*;
import java.io.*;

class Solution {
    private static final int MOD = 1000000007;

    public int maxSum(List<Integer> list, int k) {
        int n = list.size();
        long[] arr = new long[n];
        for (int i = 0; i < n; i++) arr[i] = list.get(i);
        int[] bitsArr = new int[32];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < 32; j++){
                long mask = (1 << j);
                long res = (mask & arr[i]);
                if(res != 0) bitsArr[j]++;
            }
        }
        long ans = 0;
        for (int i = 0; i < k; i++) {
            // for (int j = 0; j < n - i - 1; j++) {
            //     long x = arr[j], y = arr[j + 1];
            //     arr[j] = (x & y);
            //     arr[j + 1] = (x | y);
            // }
            // ans = (ans + (((arr[n - i - 1] % MOD) * (arr[n - i - 1] % MOD)) % MOD)) % MOD;
            long numberFormed = 0;
            for(int j = 0; j < 32; j++){
                if(bitsArr[j] != 0) {
                    numberFormed += Math.pow(2, j);
                    bitsArr[j]--;
                }
            }
            ans = (ans + (((numberFormed % MOD) * (numberFormed % MOD)) % MOD)) % MOD;
        }
        return (int)(ans % MOD);
    }
}
