https://leetcode.com/problems/minimum-amount-of-damage-dealt-to-bob/description/


3273. Minimum Amount of Damage Dealt to Bob
Hard
Topics
Companies
Hint
You are given an integer power and two integer arrays damage and health, both having length n.

Bob has n enemies, where enemy i will deal Bob damage[i] points of damage per second while they are alive (i.e. health[i] > 0).

Every second, after the enemies deal damage to Bob, he chooses one of the enemies that is still alive and deals power points of damage to them.

Determine the minimum total amount of damage points that will be dealt to Bob before all n enemies are dead.

 

Example 1:

Input: power = 4, damage = [1,2,3,4], health = [4,5,6,8]

Output: 39

Explanation:

Attack enemy 3 in the first two seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 10 + 10 = 20 points.
Attack enemy 2 in the next two seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 6 + 6 = 12 points.
Attack enemy 0 in the next second, after which enemy 0 will go down, the number of damage points dealt to Bob is 3 points.
Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 2 + 2 = 4 points.
Example 2:

Input: power = 1, damage = [1,1,1,1], health = [1,2,3,4]

Output: 20

Explanation:

Attack enemy 0 in the first second, after which enemy 0 will go down, the number of damage points dealt to Bob is 4 points.
Attack enemy 1 in the next two seconds, after which enemy 1 will go down, the number of damage points dealt to Bob is 3 + 3 = 6 points.
Attack enemy 2 in the next three seconds, after which enemy 2 will go down, the number of damage points dealt to Bob is 2 + 2 + 2 = 6 points.
Attack enemy 3 in the next four seconds, after which enemy 3 will go down, the number of damage points dealt to Bob is 1 + 1 + 1 + 1 = 4 points.
Example 3:

Input: power = 8, damage = [40], health = [59]

Output: 320

 

Constraints:

1 <= power <= 104
1 <= n == damage.length == health.length <= 105
1 <= damage[i], health[i] <= 104



# java


class Enemy {
  public int damage;
  public int timeTakenDown;
  public Enemy(int damage, int timeTakenDown) {
    this.damage = damage;
    this.timeTakenDown = timeTakenDown;
  }
}

class Solution {
  public long minDamage(int power, int[] damage, int[] health) {
    long ans = 0;
    long sumDamage = Arrays.stream(damage).asLongStream().sum();
    Enemy[] enemies = new Enemy[damage.length];

    for (int i = 0; i < damage.length; ++i)
      enemies[i] = new Enemy(damage[i], (health[i] + power - 1) / power);

    // It's better to take down the enemy i first if the damage dealt of taking
    // down i first is less than the damage dealt of taking down j first. So,
    //    damage[i] * t[i] + (t[i] + t[j]) * damage[j] <
    //    damage[j] * t[j] + (t[i] + t[j]) * damage[i]
    // => damage[i] * t[i] + damage[j] * t[i] + damage[j] * t[j] <
    //    damage[j] * t[j] + damage[i] * t[j] + damage[i] * t[i]
    // => damage[j] * t[i] < damage[i] * t[j]
    // => damage[j] / t[j] < damage[i] / t[i]
    Arrays.sort(enemies,
                (a, b)
                    -> Double.compare((double) b.damage / b.timeTakenDown,
                                      (double) a.damage / a.timeTakenDown));

    for (final Enemy enemy : enemies) {
      ans += sumDamage * enemy.timeTakenDown;
      sumDamage -= enemy.damage;
    }

    return ans;
  }
}


or


class Solution {
    public long minDamage(int power, int[] damage, int[] health) {
        int [] time=new int [damage.length];
        int sum=0;
        for(int i=0;i<damage.length;i++){
            float apple=(float)health[i]/power;
            time[i]=(int)Math.ceil(apple);
            sum+=damage[i];
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>((a,b) -> Float.compare(b.dps,a.dps));
        for(int i=0;i<damage.length;i++){
            pq.add(new Pair((float)damage[i]/time[i],i));
        }
        long ans=0;
        while(!pq.isEmpty()){
            Pair p=pq.remove();
            ans+=(long)sum*time[p.index];
            sum-=damage[p.index];
        }
        return ans;
    }
    
}
class Pair{
        float dps;
        int index;
        public Pair(float dps,int index){
            this.dps=dps;
            this.index=index;
        }
    }


or


class Solution {
    class pair{
        int damage;
        int turn;
        double sval;
        pair(int damage,int turn){
            this.damage = damage;
            this.turn = turn;
            this.sval = ((double)damage)/turn;
        }
    }
    public long minDamage(int power, int[] damage, int[] health) {
        pair [] prr = new pair[damage.length];
        long sum=0;
        for(int i=0;i<damage.length;i++){
            sum+= damage[i];
            prr[i] = new pair(damage[i],(int)Math.ceil(((double)health[i])/power));
        }
        Arrays.sort(prr,(a,b)->Double.compare(b.sval,a.sval));
        long ans =0;
        for(int i=0;i<damage.length;i++){
            ans+=prr[i].turn*sum;
            sum-=prr[i].damage;
        }

        return ans;
    }
}

or


class Solution {
    int total ;
    int power;

    class Pair implements Comparable<Pair> {
        int health;
        int damage;

        Pair(int health, int damage) {
            this.health = health;
            this.damage = damage;
        }

        @Override
        public int compareTo(Pair p) {
            
            int thisHits = (int) Math.ceil((double) this.health / power);
            int otherHits = (int) Math.ceil((double) p.health / power);
            
           
            double thisTotalDamage = this.damage*1.0/thisHits ;
            double otherTotalDamage = p.damage*1.0/otherHits;
            
            return Double.compare(otherTotalDamage, thisTotalDamage);
        }
    }

    public long minDamage(int power, int[] damage, int[] health) {
        this.power = power;
        total = 0;
        List<Pair> pairs = new ArrayList<>();
        long sum = 0;
        for (int i = 0; i < damage.length; i++) {
            pairs.add(new Pair(health[i], damage[i]));
            sum += damage[i];
        }

        Collections.sort(pairs);

        long ans = 0;
      
         
        for(Pair k : pairs){
            
            System.out.println(k.health + " " + k.damage);
            ans += (sum * ((k.health + power - 1)/ power));
            sum -= k.damage;
        }

        return ans;
    }
}
       

     
   or



import java.util.*;

class Solution {
    int power;

    class Pair implements Comparable<Pair> {
        long health;
        long damage;

        Pair(int health, int damage) {
            this.health = health;
            this.damage = damage;
        }

        @Override
        public int compareTo(Pair p) {
            long thisHits = (health + power - 1L) / power;
            long otherHits = (p.health + power - 1L) / power;

            double thisTotalDamage = damage * 1.0 / thisHits;
            double otherTotalDamage = p.damage * 1.0 / otherHits;

            return Double.compare(otherTotalDamage, thisTotalDamage);
        }
    }

    public long minDamage(int power, int[] damage, int[] health) {
        this.power = power;
        List<Pair> pairs = new ArrayList<>();
        for (int i = 0; i < damage.length; i++) {
            pairs.add(new Pair(health[i], damage[i]));
        }

        Collections.sort(pairs);

        long totalDamage = 0;
        long hitsRequired = 0;
        for (Pair pair : pairs) {
            long hits = (pair.health + power - 1L) / power;
            hitsRequired += hits;
            totalDamage += hitsRequired * pair.damage;
        }

        return totalDamage;
    }
}
