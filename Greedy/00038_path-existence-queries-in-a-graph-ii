https://leetcode.com/problems/path-existence-queries-in-a-graph-ii/description/

https://walkccc.me/LeetCode/problems/3534/#__tabbed_1_2


3534. Path Existence Queries in a Graph II
Hard
Topics
Companies
Hint
You are given an integer n representing the number of nodes in a graph, labeled from 0 to n - 1.

You are also given an integer array nums of length n and an integer maxDiff.

An undirected edge exists between nodes i and j if the absolute difference between nums[i] and nums[j] is at most maxDiff (i.e., |nums[i] - nums[j]| <= maxDiff).

You are also given a 2D integer array queries. For each queries[i] = [ui, vi], find the minimum distance between nodes ui and vi. If no path exists between the two nodes, return -1 for that query.

Return an array answer, where answer[i] is the result of the ith query.

Note: The edges between the nodes are unweighted.

 

Example 1:

Input: n = 5, nums = [1,8,3,4,2], maxDiff = 3, queries = [[0,3],[2,4]]

Output: [1,1]

Explanation:

The resulting graph is:



Query	Shortest Path	Minimum Distance
[0, 3]	0 → 3	1
[2, 4]	2 → 4	1
Thus, the output is [1, 1].

Example 2:

Input: n = 5, nums = [5,3,1,9,10], maxDiff = 2, queries = [[0,1],[0,2],[2,3],[4,3]]

Output: [1,2,-1,1]

Explanation:

The resulting graph is:



Query	Shortest Path	Minimum Distance
[0, 1]	0 → 1	1
[0, 2]	0 → 1 → 2	2
[2, 3]	None	-1
[4, 3]	3 → 4	1
Thus, the output is [1, 2, -1, 1].

Example 3:

Input: n = 3, nums = [3,6,1], maxDiff = 1, queries = [[0,0],[0,1],[1,2]]

Output: [0,-1,-1]

Explanation:

There are no edges between any two nodes because:

Nodes 0 and 1: |nums[0] - nums[1]| = |3 - 6| = 3 > 1
Nodes 0 and 2: |nums[0] - nums[2]| = |3 - 1| = 2 > 1
Nodes 1 and 2: |nums[1] - nums[2]| = |6 - 1| = 5 > 1
Thus, no node can reach any other node, and the output is [0, -1, -1].

 

Constraints:

1 <= n == nums.length <= 105
0 <= nums[i] <= 105
0 <= maxDiff <= 105
1 <= queries.length <= 105
queries[i] == [ui, vi]
0 <= ui, vi < n


# java

// greedy

class Solution {
  public int[] pathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {
    int[] ans = new int[queries.length];
    int[] indexMap = new int[n];
    int[] sortedNums = new int[n];
    Pair<Integer, Integer>[] sortedNumAndIndexes = new Pair[n];

    for (int i = 0; i < n; ++i)
      sortedNumAndIndexes[i] = new Pair<>(nums[i], i);

    Arrays.sort(sortedNumAndIndexes, Comparator.comparingInt(Pair::getKey));

    for (int i = 0; i < n; ++i) {
      final int num = sortedNumAndIndexes[i].getKey();
      final int sortedIndex = sortedNumAndIndexes[i].getValue();
      sortedNums[i] = num;
      indexMap[sortedIndex] = i;
    }

    final int maxLevel = Integer.SIZE - Integer.numberOfLeadingZeros(n) + 1;
    // jump[i][j] := the index of the j-th ancestor of i
    int[][] jump = new int[n][maxLevel];

    int right = 0;
    for (int i = 0; i < n; ++i) {
      while (right + 1 < n && sortedNums[right + 1] - sortedNums[i] <= maxDiff)
        ++right;
      jump[i][0] = right;
    }

    for (int level = 1; level < maxLevel; ++level)
      for (int i = 0; i < n; ++i) {
        final int prevJump = jump[i][level - 1];
        jump[i][level] = jump[prevJump][level - 1];
      }

    for (int i = 0; i < queries.length; ++i) {
      final int u = queries[i][0];
      final int v = queries[i][1];
      final int uIndex = indexMap[u];
      final int vIndex = indexMap[v];
      final int start = Math.min(uIndex, vIndex);
      final int end = Math.max(uIndex, vIndex);
      final int res = minJumps(jump, start, end, maxLevel - 1);
      ans[i] = res == Integer.MAX_VALUE ? -1 : res;
    }

    return ans;
  }

  // Returns the minimum number of jumps from `start` to `end` using binary
  // lifting.
  private int minJumps(int[][] jump, int start, int end, int level) {
    if (start == end)
      return 0;
    if (jump[start][0] >= end)
      return 1;
    if (jump[start][level] < end)
      return Integer.MAX_VALUE;
    int j = level;
    for (; j >= 0; --j)
      if (jump[start][j] < end)
        break;
    return (1 << j) + minJumps(jump, jump[start][j], end, j);
  }
}


or


// binary search

class Solution {
    public int[] pathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {
        int[][] numsWithIdx = new int[n][2];
        for(int i = 0; i < n; i++) {
            numsWithIdx[i][0] = nums[i];
            numsWithIdx[i][1] = i;
        }
        Arrays.sort(numsWithIdx, (a, b) -> a[0]-b[0]);
        int[] map = new int[n]; //maps old array index (node index) to index in sorted array
        for(int i = 0; i < n; i++) map[numsWithIdx[i][1]] = i;
        
        int[][] jumps = new int[n][33 - Integer.numberOfLeadingZeros(n)];
        int right = 0;
        for(int i = 0; i < n; i++) {
            while(right + 1 < n && numsWithIdx[right+1][0]-numsWithIdx[i][0] <= maxDiff) right++;
            jumps[i][0] = right;
        }

        for(int j = 1; j < jumps[0].length; j++) {
            for(int i = 0; i < n; i++) {
                jumps[i][j] = jumps[jumps[i][j-1]][j-1]; //do two pow of 2 jumps to reach next pow of 2
            }
        }

        int m = queries.length;
        int[] res = new int[m];
        for(int i = 0; i < m; i++) {
            int u = Math.min(map[queries[i][0]], map[queries[i][1]]), v = Math.max(map[queries[i][0]], map[queries[i][1]]);
            res[i] = getQueryJumps(u, v, jumps); 
        }
        return res;
    }

    private int getQueryJumps(int u, int v, int[][] jumps) {
        if(u == v) return 0;
        if(jumps[u][0] >= v) return 1;
        if(jumps[u][jumps[u].length-1] < v) return -1;

        int lo = 0, hi = jumps[u].length;
        while(lo < hi) {
            int mid = (lo + hi) >>> 1;
            if(jumps[u][mid] < v) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        lo--;
        return (1 << lo) + getQueryJumps(jumps[u][lo], v, jumps);
    }
}



