https://leetcode.com/problems/minimum-operations-to-make-array-equal-to-target/description/

3229. Minimum Operations to Make Array Equal to Target
Hard
Topics
Companies
Hint
You are given two positive integer arrays nums and target, of the same length.

In a single operation, you can select any subarray of nums and increment each element within that subarray by 1 or decrement each element within that subarray by 1.

Return the minimum number of operations required to make nums equal to the array target.

 

Example 1:

Input: nums = [3,5,1,2], target = [4,6,2,4]

Output: 2

Explanation:

We will perform the following operations to make nums equal to target:
- Increment nums[0..3] by 1, nums = [4,6,2,3].
- Increment nums[3..3] by 1, nums = [4,6,2,4].

Example 2:

Input: nums = [1,3,2], target = [2,1,4]

Output: 5

Explanation:

We will perform the following operations to make nums equal to target:
- Increment nums[0..0] by 1, nums = [2,3,2].
- Decrement nums[1..1] by 1, nums = [2,2,2].
- Decrement nums[1..1] by 1, nums = [2,1,2].
- Increment nums[2..2] by 1, nums = [2,1,3].
- Increment nums[2..2] by 1, nums = [2,1,4].

 

Constraints:

1 <= nums.length == target.length <= 105
1 <= nums[i], target[i] <= 108



# java


class Solution {
  // Similar to 1526. Minimum Number of Increments on Subarrays to Form a Target Array
  public long minimumOperations(int[] nums, int[] target) {
    long ans = Math.abs((long) nums[0] - target[0]);

    for (int i = 1; i < nums.length; ++i) {
      final int currDiff = target[i] - nums[i];
      final int prevDiff = target[i - 1] - nums[i - 1];
      if (currDiff >= 0 && prevDiff >= 0)
        ans += Math.max(0, currDiff - prevDiff);
      else if (currDiff <= 0 && prevDiff <= 0)
        ans += Math.max(0, Math.abs((long) currDiff) - Math.abs((long) prevDiff));
      else
        ans += Math.abs((long) currDiff);
    }

    return ans;
  }
}


or

class Solution {
    public long minimumOperations(int[] nums, int[] target) {
        long f = Math.abs(target[0] - nums[0]);
        for (int i = 1; i < nums.length; ++i) {
            long x = target[i] - nums[i];
            long y = target[i - 1] - nums[i - 1];
            if (x * y > 0) {
                long d = Math.abs(x) - Math.abs(y);
                if (d > 0) {
                    f += d;
                }
            } else {
                f += Math.abs(x);
            }
        }
        return f;
    }
}

or

class Solution {
    public long minimumOperations(int[] nums, int[] target) {
        var n = nums.length;
        long incr = 0, decr = 0, ops = 0;

        for (var i = 0; i < n; i++) {
            var diff = target[i] - nums[i];

            if (diff > 0) {
                if (incr < diff)
                    ops += diff - incr;
                incr = diff;
                decr = 0;
            } else if (diff < 0) {
                if (diff < decr)
                    ops += decr - diff;
                decr = diff;
                incr = 0;
            } else {
                incr = decr = 0;
            }
        }

        return ops;
    }
}


or


class Solution {
    public long minimumOperations(int[] nums, int[] target) {
        
        int [] arr = new int [nums.length];
        
        for (int i = 0; i < nums.length; ++i) {
            arr[i] = target[i] - nums[i];
        }
        
        List<Integer> list = new ArrayList<>();
        
        boolean pos = true;
        boolean exp;
        
        long result = 0;
        
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] == 0) {
                result += solve(list);
                list.clear();
                pos = true;
            } else {
                exp = arr[i] > 0;
                
                if (exp != pos) {
                    result += solve(list);
                    list.clear();
                }
                
                list.add(Math.abs(arr[i]));
                pos = exp;
            }
        }
        
        result += solve(list);
        
        return result;
    }
    
    private long solve(List<Integer> list) {
        int min = 0;
        long result = 0;
        
        for (int num : list) {
            if (num > min) {
                result += num - min;
            }
            
            min = num;
        }
        
        return result;
    }

}


or


class Solution {
        public long minimumOperations(int[] A, int[] target) {
        long res = 0, pre = 0;
        for (int i = 0; i < A.length; ++i) {
            res += Math.max(target[i] - A[i] - pre, 0);
            pre = target[i] - A[i];
        }
        return res + Math.max(-pre, 0);
    }

}

or



class Solution {
    public long minimumOperations(int[] nums, int[] target) {
        List<Integer> a = Arrays.stream(nums).boxed().collect(Collectors.toList());
        List<Integer> b = Arrays.stream(target).boxed().collect(Collectors.toList());
        
        int n = a.size() + 1;
        a.add(0);
        b.add(0);
        
        long add = 0, sub = 0;
        for (int i = 0; i < n; i++) {
            int diff1 = a.get(i);
            int diff2 = b.get(i);
            if (i > 0) {
                diff1 -= a.get(i - 1);
                diff2 -= b.get(i - 1);
            }
            if (diff1 < diff2) {
                add += (diff2 - diff1);
            } else {
                sub += (diff1 - diff2);
            }
        }
        return add;
    }
}
