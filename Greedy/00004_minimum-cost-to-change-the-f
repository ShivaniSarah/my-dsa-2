https://leetcode.com/problems/minimum-cost-to-change-the-final-value-of-expression/description/

1896. Minimum Cost to Change the Final Value of Expression
Hard
Topics
Companies
Hint
You are given a valid boolean expression as a string expression consisting of the characters '1','0','&' (bitwise AND operator),'|' (bitwise OR operator),'(', and ')'.

For example, "()1|1" and "(1)&()" are not valid while "1", "(((1))|(0))", and "1|(0&(1))" are valid expressions.
Return the minimum cost to change the final value of the expression.

For example, if expression = "1|1|(0&0)&1", its value is 1|1|(0&0)&1 = 1|1|0&1 = 1|0&1 = 1&1 = 1. We want to apply operations so that the new expression evaluates to 0.
The cost of changing the final value of an expression is the number of operations performed on the expression. The types of operations are described as follows:

Turn a '1' into a '0'.
Turn a '0' into a '1'.
Turn a '&' into a '|'.
Turn a '|' into a '&'.
Note: '&' does not take precedence over '|' in the order of calculation. Evaluate parentheses first, then in left-to-right order.

 

Example 1:

Input: expression = "1&(0|1)"
Output: 1
Explanation: We can turn "1&(0|1)" into "1&(0&1)" by changing the '|' to a '&' using 1 operation.
The new expression evaluates to 0. 
Example 2:

Input: expression = "(0&0)&(0&0&0)"
Output: 3
Explanation: We can turn "(0&0)&(0&0&0)" into "(0|1)|(0&0&0)" using 3 operations.
The new expression evaluates to 1.
Example 3:

Input: expression = "(0|(1|0&1))"
Output: 1
Explanation: We can turn "(0|(1|0&1))" into "(0|(0|0&1))" using 1 operation.
The new expression evaluates to 0.
 

Constraints:

1 <= expression.length <= 105
expression only contains '1','0','&','|','(', and ')'
All parentheses are properly matched.
There will be no empty parentheses (i.e: "()" is not a substring of expression).



# java

class Solution {
  public int minOperationsToFlip(String expression) {
    // [(the expression, the cost to toggle the expression)]
    Deque<Pair<Character, Integer>> stack = new ArrayDeque<>();
    Pair<Character, Integer> lastPair = null;

    for (final char e : expression.toCharArray()) {
      if (e == '(' || e == '&' || e == '|') {
        // These aren't expressions, so the cost is meaningless.
        stack.push(new Pair<>(e, 0));
        continue;
      }
      if (e == ')') {
        lastPair = stack.pop();
        stack.pop(); // Pop '('.
      } else {       // e == '0' || e == '1'
        // Store the '0' or '1'. The cost to change their values is just 1,
        // whether it's changing '0' to '1' or '1' to '0'.
        lastPair = new Pair<>(e, 1);
      }
      if (!stack.isEmpty() && (stack.peek().getKey() == '&' || stack.peek().getKey() == '|')) {
        final char op = stack.pop().getKey();
        final char a = stack.peek().getKey();
        final int costA = stack.pop().getValue();
        final char b = lastPair.getKey();
        final int costB = lastPair.getValue();
        // Determine the cost to toggle op(a, b).
        if (op == '&') {
          if (a == '0' && b == '0')
            // Change '&' to '|' and a|b to '1'.
            lastPair = new Pair<>('0', 1 + Math.min(costA, costB));
          else if (a == '0' && b == '1')
            // Change '&' to '|'.
            lastPair = new Pair<>('0', 1);
          else if (a == '1' && b == '0')
            // Change '&' to '|'.
            lastPair = new Pair<>('0', 1);
          else // a == '1' and b == '1'
            // Change a|b to '0'.
            lastPair = new Pair<>('1', Math.min(costA, costB));
        } else { // op == '|'
          if (a == '0' && b == '0')
            // Change a|b to '1'.
            lastPair = new Pair<>('0', Math.min(costA, costB));
          else if (a == '0' && b == '1')
            // Change '|' to '&'.
            lastPair = new Pair<>('1', 1);
          else if (a == '1' && b == '0')
            // Change '|' to '&'.
            lastPair = new Pair<>('1', 1);
          else // a == '1' and b == '1'
            // Change '|' to '&' and a|b to '0'.
            lastPair = new Pair<>('1', 1 + Math.min(costA, costB));
        }
      }
      stack.push(lastPair);
    }

    return stack.peek().getValue();
  }
}


or


class Solution {
    public int minOperationsToFlip(String expression) {
        Deque<Integer> numStack = new LinkedList<Integer>();
        Deque<Integer> opStack = new LinkedList<Integer>();
        Deque<Character> signStack = new LinkedList<Character>();
        int length = expression.length();
        for (int i = 0; i < length; i++) {
            char c = expression.charAt(i);
            if (Character.isDigit(c)) {
                numStack.push((int) (c - '0'));
                opStack.push(1);
            } else if (c == ')')
                signStack.pop();
            else {
                signStack.push(c);
                continue;
            }
            if (numStack.size() > 1 && signStack.peek() != '(') {
                int num2 = numStack.pop();
                int num1 = numStack.pop();
                int op2 = opStack.pop();
                int op1 = opStack.pop();
                char sign = signStack.pop();
                int[] ops = minOp(num1, num2, op1, op2, sign);
                numStack.push(ops[0]);
                opStack.push(ops[1]);
            }
        }
        return opStack.pop();
    }

    public int[] minOp(int num1, int num2, int op1, int op2, char sign) {
        if (sign == '&') {
            if (num1 == 1 && num2 == 1)
                return new int[]{1, Math.min(op1, op2)};
            else if (num1 == 0 && num2 == 0)
                return new int[]{0, Math.min(op1, op2) + 1};
            else
                return new int[]{0, 1};
        } else {
            if (num1 == 0 && num2 == 0)
                return new int[]{0, Math.min(op1, op2)};
            else if (num1 == 1 && num2 == 1)
                return new int[]{1, Math.min(op1, op2) + 1};
            else
                return new int[]{1, 1};
        }
    }
}


or


class Solution {
    class Node {
        char op = '\u0000';
        Node left = null;
        Node right = null;
    }

    public int minOperationsToFlip(String expression) {
        String postFix = getPostFix(expression);
        index = 0;
        int value = reversePosilshNotationEval(postFix);
        int ans = recur(root, 1 - value);// 1 - value  coz if 0  then 1 else 0 
        return ans;
    }
    private int index = 0;
    private Node root = null;

    private int recur(Node node, int target) {

        if (node.op == '1' || node.op == '0') {
            int val = node.op - '0';

            if (val == target) {
                return 0;
            } 
            return 1;
        }
        int leftChange = recur(node.left, target);
        int rightChange = recur(node.right, target);
        int ans = -1;

        if (target == 0) {
            // if left change or right change then return minmum of left and right +1
            if (node.op == '|') {
                ans = Math.min(1 + Math.min(leftChange, rightChange), leftChange + rightChange);
            } else {
                ans = Math.min(leftChange + rightChange + 1,Math.min(leftChange, rightChange));
            }
        } else {

            if (node.op == '|') {
                ans = Math.min(Math.min(leftChange, rightChange), leftChange + rightChange + 1);
            } else {
                ans = Math.min(1 + Math.min(leftChange, rightChange), leftChange + rightChange);
            }
        }

        
        return ans;
    }

    private int reversePosilshNotationEval(String postFix) {
        Deque<Integer> stack = new LinkedList<>();
        Deque<Node> nodeStack = new LinkedList<>();

        while (index < postFix.length()) {
            char ch = postFix.charAt(index++);
            Node node = new Node();

            if (ch == '0' || ch == '1') {
                stack.push(ch - '0');
                node.op = ch;
                nodeStack.push(node);
            } else {
                int val1 = stack.pop();
                int val2 = stack.pop();
                node.op = ch;
                node.right = nodeStack.pop();
                node.left = nodeStack.pop();
                nodeStack.push(node);
                int temp = 0;

                if (ch == '&') {
                    temp = val1 & val2;
                } else {
                    temp = val1 | val2;
                }
                stack.push(temp);
            }
        }
        root = nodeStack.pop();
        return stack.pop();
    }

    private String getPostFix(String exp) {
        StringBuilder res = new StringBuilder();
        Stack<Character> st = new Stack<>();
        
        for(char c: exp.toCharArray()) {
            if(c == '0' || c == '1')
                res.append(c);
            else if(c == '(')
                st.push(c);
            else if(c == ')') {
                while(!st.isEmpty() && st.peek() != '(')
                    res.append(st.pop());
                
                st.pop();
            }
            else {
                while(!st.isEmpty() && st.peek() != '(')
                    res.append(st.pop());
                
                st.push(c);
            }
        }
        while(!st.isEmpty())
            res.append(st.pop());
        
        return res.toString();
    }

    /*private String getPostFix(String exp) {

        if (index == exp.length()) {
            return "";
        }
        char op = '\u0000';
        StringBuilder ans = new StringBuilder();

        while (index < exp.length()) {
            char ch = exp.charAt(index++);

            if (ch == ')') {
                break;
            }

            if (ch == '(') {
                ans.append(getPostFix(exp));

                if (op != '\u0000') {
                    ans.append(op);
                    op = '\u0000';
                }
                continue;
            }

            if (ch == '|' || ch == '&') {
                op = ch;
                continue;
            } else {
                ans.append(ch);
            }
            
            if (op != '\u0000') {
                ans.append(op);
                op = '\u0000';
            }
        }
        return ans.toString();
    }*/
}


or


class Solution {
    //global index to traverse given string. It is incremented in "min" function recursively.
    int index = 0;
    
    //Custom class to the value and the minimum flips required to change value for that value
    class Pair{
        char val;
        int min;
        public Pair(char val, int min){
            this.val = val;
            this.min = min;
        }
    }
    
    //helper function to convert '1' to true and '0' to false
    public boolean convert(char c){ return c == '1'; }
    
    //helper function to convert true to '1' and false to '0'
    public char convertBack(boolean val){ return (val) ? '1' : '0'; }
         
    //Funtion to return the pair of value of the given string and the minimum number of operations required to flip it
    public Pair min(String given){
        Stack<Pair> stack = new Stack();
        
        //Loop 
        while(index < given.length()){
            // If the char is '(', recursively call the min function and add the result to the stack. 
            if(given.charAt(index) == '('){
                index++;
                stack.push(min(given));
            }
            
            // If the char is ')', then we have processed an expression and the top of the stack will have the expression's final value and the min number of operations required to flip it.
            else if(given.charAt(index) == ')'){
                index++;
                return stack.pop();
            }
            
            //If the char is '|' or '&' or '1' or '0', add it to the stack
            else{
                //Minimum operation to flip any of these values is 1.
                stack.push(new Pair(given.charAt(index++), 1));
            }
            
            //CORE LOGIC START -> Explained in the "Intuition" part
            //If the stack size has reached 3, then we have completed an expression (i.e) 2 operands and one operator
            if(stack.size() == 3){
                Pair curr = stack.pop();
                int min = 1;
                char val;
                if(stack.pop().val == '|'){
                    Pair prev = stack.pop();
                    val = convertBack(convert(curr.val) || convert(prev.val));
                    
                    if(curr.val != prev.val) min = 1;
                    else if(prev.val == '0'){
                        min = Math.min(curr.min, prev.min);
                    }
                    else{
                        min = 1 + Math.min(curr.min, prev.min);
                    }
                }
                else{
                    Pair prev = stack.pop();
                    val = convertBack(convert(curr.val) && convert(prev.val));
                    if(curr.val != prev.val) min = 1;
                    else if(prev.val == '1'){
                        min = Math.min(curr.min, prev.min);
                    }
                    else{
                        min = 1 + Math.min(curr.min, prev.min);
                    }
                }//CORE LOGIC END
                
                //Push the simplified pair back to the stack. We have effectively reduced the size of stack from 3 to 1. We will keep doing this recursively to get the final value.
                stack.push(new Pair(val, min));
            }
        }
        return stack.pop();
    }
    
    
    //Driver function (i.e) Main function that is called
    public int minOperationsToFlip(String expression) {
        //Handle conditions like "1" or "0"
        if(expression.length() == 1)return 1;
        //Handle conditions like "(1)" or "(0)"
        if(expression.charAt(0) == '(' && expression.length() == 3)return 1;
        
        return min(expression).min;
    }
}

or


class Solution {
    Deque<int[]> stack = new ArrayDeque<>();
    Deque<Character> opStack = new ArrayDeque<>();
    public int minOperationsToFlip(String expression) {
        for (char ch : expression.toCharArray()){
            if (ch == '('){
                opStack.push(ch);
            }else if (ch == ')'){
                while(opStack.peek()!='('){
                    go();
                }
                opStack.pop(); // remove '('
            }else if (ch == '&' || ch == '|'){
                while(!opStack.isEmpty() && opStack.peek() != '('){
                    go();
                }
                opStack.push(ch);
            }else{ // num
                stack.push(new int[]{ch, 1});
            }
        }
        while(!opStack.isEmpty()){
            go();
        }

        return stack.peek()[1];
    }
    
    private void go(){
        stack.push(check(opStack.pop(), stack.pop(), stack.pop()));
    }

    private int[] check(char op, int[] r, int[] l){
        int[] ans;
        int rval = r[0], rcost = r[1];
        int lval = l[0], lcost = l[1];
        if (op == '|' && rval == '0' && lval == '0'){
            ans = new int[]{'0', Math.min(rcost, lcost)};
        }else if (op == '|' && rval == '1' && lval == '0'){
            ans = new int[]{'1', 1};
        }else if (op == '|' && rval == '0' && lval == '1'){
            ans = new int[]{'1', 1};
        }else if (op == '|' && rval == '1' && lval == '1'){
            ans = new int[]{'1', 1 + Math.min(rcost, lcost)};
        }else if (op == '&' && rval == '0' && lval == '0'){
            ans = new int[]{'0', 1 + Math.min(rcost, lcost)};
        }else if (op == '&' && rval == '1' && lval == '0'){
            ans = new int[]{'0', 1};
        }else if (op == '&' && rval == '0' && lval == '1'){
            ans = new int[]{'0', 1};
        }else{ // &, 1, 1
            ans = new int[]{'1', Math.min(rcost, lcost)};
        }
        return ans;
    }
}
