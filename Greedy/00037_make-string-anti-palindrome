https://leetcode.com/problems/make-string-anti-palindrome/description/


3088. Make String Anti-palindrome
Description
We call a string s of even length n an anti-palindrome if for each index 0 <= i < n, s[i] != s[n - i - 1].

Given a string s, your task is to make s an anti-palindrome by doing any number of operations (including zero).

In one operation, you can select two characters from s and swap them.

Return the resulting string. If multiple strings meet the conditions, return the lexicographically smallest one. If it can't be made into an anti-palindrome, return "-1".

 

Example 1:

Input: s = "abca"

Output: "aabc"

Explanation:

"aabc" is an anti-palindrome string since s[0] != s[3] and s[1] != s[2]. Also, it is a rearrangement of "abca".

Example 2:

Input: s = "abba"

Output: "aabb"

Explanation:

"aabb" is an anti-palindrome string since s[0] != s[3] and s[1] != s[2]. Also, it is a rearrangement of "abba".

Example 3:

Input: s = "cccd"

Output: "-1"

Explanation:

You can see that no matter how you rearrange the characters of "cccd", either s[0] == s[3] or s[1] == s[2]. So it can not form an anti-palindrome string.

 

Constraints:

2 <= s.length <= 105
s.length % 2 == 0
s consists only of lowercase English letters.






# java


class Solution {
  public String makeAntiPalindrome(String s) {
    final int n = s.length();
    int i = n / 2;
    char[] chars = s.toCharArray();
    Arrays.sort(chars);
    if (chars[i] != chars[n - 1 - i])
      return new String(chars);

    int j = getFirstDiffIndexInSecondHalf(chars);
    while (chars[i] == chars[n - 1 - i]) {
      if (j == n)
        return "-1";
      final char temp = chars[i];
      chars[i] = chars[j];
      chars[j] = temp;
      ++i;
      ++j;
    }

    return new String(chars);
  }

  // Returns the first index in chars[n / 2..n) that is different from the first
  // letter of the second half, chars[n / 2].
  private int getFirstDiffIndexInSecondHalf(char[] chars) {
    final int n = chars.length;
    final char firstLetter = chars[n / 2];
    int firstDiffIndex = n / 2;
    while (firstDiffIndex < n && chars[firstDiffIndex] == firstLetter)
      ++firstDiffIndex;
    return firstDiffIndex;
  }
}



or



class Solution {
    public String makeAntiPalindrome(String s) {
        char[] cs = s.toCharArray();
        Arrays.sort(cs);
        int n = cs.length;
        int m = n / 2;
        if (cs[m] == cs[m - 1]) {
            int i = m;
            while (i < n && cs[i] == cs[i - 1]) {
                ++i;
            }
            for (int j = m; j < n && cs[j] == cs[n - j - 1]; ++i, ++j) {
                if (i >= n) {
                    return "-1";
                }
                char t = cs[i];
                cs[i] = cs[j];
                cs[j] = t;
            }
        }
        return new String(cs);
    }
}


