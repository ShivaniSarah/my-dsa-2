https://leetcode.com/problems/largest-multiple-of-three/description/


1363. Largest Multiple of Three
Hard
Topics
Companies
Hint
Given an array of digits digits, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. If there is no answer return an empty string.

Since the answer may not fit in an integer data type, return the answer as a string. Note that the returning answer must not contain unnecessary leading zeros.

 

Example 1:

Input: digits = [8,1,9]
Output: "981"
Example 2:

Input: digits = [8,6,7,1,0]
Output: "8760"
Example 3:

Input: digits = [1]
Output: ""
 

Constraints:

1 <= digits.length <= 104
0 <= digits[i] <= 9


# java

class Solution {
  public String largestMultipleOfThree(int[] digits) {
    StringBuilder ans = new StringBuilder();
    int[] mod1 = new int[] {1, 4, 7, 2, 5, 8};
    int[] mod2 = new int[] {2, 5, 8, 1, 4, 7};
    int[] count = new int[10];
    int sum = 0;

    for (int digit : digits) {
      ++count[digit];
      sum += digit;
    }

    while (sum % 3 != 0)
      for (int i : sum % 3 == 1 ? mod1 : mod2)
        if (count[i] > 0) {
          --count[i];
          sum -= i;
          break;
        }

    for (int digit = 9; digit >= 0; --digit)
      ans.append(Character.toString('0' + digit).repeat(count[digit]));

    return ans.length() > 0 && ans.charAt(0) == '0' ? "0" : ans.toString();
  }
}


or


class Solution {
    public String largestMultipleOfThree(int[] digits) {
        Arrays.sort(digits);
        int n = digits.length;
        int[][] f = new int[n + 1][3];
        final int inf = 1 << 30;
        for (var g : f) {
            Arrays.fill(g, -inf);
        }
        f[0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                f[i][j] = Math.max(f[i - 1][j], f[i - 1][(j - digits[i - 1] % 3 + 3) % 3] + 1);
            }
        }
        if (f[n][0] <= 0) {
            return "";
        }
        StringBuilder sb = new StringBuilder();
        for (int i = n, j = 0; i > 0; --i) {
            int k = (j - digits[i - 1] % 3 + 3) % 3;
            if (f[i - 1][k] + 1 == f[i][j]) {
                sb.append(digits[i - 1]);
                j = k;
            }
        }
        int i = 0;
        while (i < sb.length() - 1 && sb.charAt(i) == '0') {
            ++i;
        }
        return sb.substring(i);
    }
}


or

class Solution {
    public String largestMultipleOfThree(int[] digits) {
        /**
         * Important notes:
         * 1. If the individual numbers added up are divisible by 3, so is the overall number
         * 2. Any num mod 3 that results in 0 is always wanted in our solution from largest to smallest
         * E.g. 9 will be at the front and 0 will be at the end of the number
         * Sorting makes solution easier but is O(nlogn)
         * 3. Since the digits will be 0-9 we can initialize arrays with indices 0-9 to store numbers
         */

        //If array only has one number, we can check it immediately
        if(digits.length == 1){
            if(digits[0] % 3 == 0){
                return Integer.toString(digits[0]);
            }
            else{
                return "";
            }
        }
        //create a remainder of Sum based on important notes 1(sum of Array % 3)
        int remainderOfSum = 0;
        //Important notes 3 array
        int[] counter = new int[10];

        //loop through each int in array l and increment counter[i] when we find value i
        for(int i: digits){
            counter[i]++;
            remainderOfSum = remainderOfSum + i;
        }
        //Create counters for how many number % 3 remainders = 1 and 2
        int remainderOf1 = counter[1] + counter[4] + counter[7];
        int remainderOf2 = counter[2] + counter[5] + counter[8];

        remainderOfSum = remainderOfSum % 3;
        /**
         * Cases:
         * 1: remainderOfSum is 0 -> nothing needs to be done
         * 2: remainderOfSum is 1, need to remove smallest digit that gives remainderOf1
         * 2(cont.): if we can't remove single digit then we remove 2 that give remainderOf2
         * 3: remainderOfSum is 2, need to remove smallest digit that gives remainderOf2
         * 3(cont.): if we can't remove single digit then we remove 2 that give remainderOf1
         */
        if(remainderOfSum == 1){
            if(remainderOf1 > 0){
                remainderOf1--;
            }
            else{
                remainderOf2 = remainderOf2 - 2;
            }
        }
        if(remainderOfSum == 2){
            if(remainderOf2 > 0){
                remainderOf2--;
            }
            else{
                remainderOf1 = remainderOf1 - 2;
            }
        }
        //Now that we know how many of each remainder we're allowed to use we can build the number
        //Since we want 9+0 to equal 90 let's build a string of nums then return it as an int
        StringBuilder sb = new StringBuilder();

        /**
         * Since we want the larger numbers first and the digits can only be 0-9 loop from 9 to 0
         * Append every value that's allowed based on the remainder counters and that we have
         * based the counter array that holds how many of each value we have
         */
        for(int i = 9; i >= 0; i--){
            if(i % 3 == 0){
                while(counter[i] > 0){
                    sb.append(i);
                    counter[i]--;
                }
            }
            if(i % 3 == 1){
                while(counter[i] > 0 && remainderOf1 > 0){
                    sb.append(i);
                    counter[i]--;
                    remainderOf1--;
                }
            }
            if(i % 3 == 2){
                while(counter[i] > 0 && remainderOf2 > 0){
                    sb.append(i);
                    counter[i]--;
                    remainderOf2--;
                }
            }
        }//end for loop

        //If stringbuilder is empty or starts with 0 return 0
        //Else return stringbuilder is an integer
        if(sb.length() == 0){
            return "";
        }
        else{
            if(sb.charAt(0) == '0'){
                return "0";
            }
            else{
                return sb.toString();
            }

        }
        
    }
}


or

class Solution {
    public String largestMultipleOfThree(int[] digits) {
        Arrays.sort(digits);
        String[] dp = new String[]{"", "", ""};
        int[] len = new int[3];
        for (int d : digits) {
            if (0 == d % 3) {
                for (int i = 0; i < 3; ++i) dp[i] = d + dp[i];
                continue;
            }
            String[] dp2 = new String[]{dp[0], dp[1], dp[2]};
            int[] nextLen = new int[]{len[0], len[1], len[2]};
            for (int i = 0; i < 3; ++i) {
                int j = ((0 == len[i] ? 0 : i) + d) % 3;
                String cand = d + dp[i];
                if (nextLen[j] <= len[i] + 1){
                    nextLen[j] = len[i] + 1;
                    dp2[j] = cand;
                }
            }
            len = nextLen;
            dp = dp2;            
        }
        if (dp[0].isEmpty()) return "";
        int i = 0;
        for (char c : dp[0].toCharArray()) if ('0' == c) i++; else break;
        return i == dp[0].length() ? "0" : dp[0].substring(i);
    }
}

or


// best


class Solution {
    public String largestMultipleOfThree(int[] digits) {
        int[] D = new int[10];
        int sum = 0;
        for(int d : digits){
            D[d]++;
            sum += d;
        }
        int mod = sum % 3, N = digits.length;
        while(sum % 3 != 0){
            if(mod == 1){
                if(D[1] > 0){
                    D[1]--; sum -= 1;
                }
                else if(D[4] > 0){
                    D[4]--; sum -= 4;
                }
                else if(D[7] > 0){
                    D[7]--; sum -= 7;
                }
                else if(D[2] > 0){
                    D[2]--; sum -= 2;
                }
                else if(D[5] > 0){
                    D[5]--; sum -= 5;
                }
                else if(D[8] > 0){
                    D[8]--; sum -= 8;
                }
                else return "";
            }
            else if(mod == 2){
                if(D[2] > 0){
                    D[2]--; sum -= 2;
                }
                else if(D[5] > 0){
                    D[5]--; sum -= 5;
                }
                else if(D[8] > 0){
                    D[8]--; sum -= 8;
                }
                else if(D[1] > 0){
                    D[1]--; sum -= 1;
                }
                else if(D[4] > 0){
                    D[4]--; sum -= 4;
                }
                else if(D[7] > 0){
                    D[7]--; sum -= 7;
                }
                else return "";
            }
            N--;
        }
        if(sum == 0)
            return D[0] == 0? "" : "0";
        char[] res = new char[N];
        for(int i = 9, k = -1; i > -1; i--)
            for(int j = 0; j < D[i]; j++)
                res[++k] = (char)(i + 48);
        return String.valueOf(res);
    }
}


or


class Solution {
  public String largestMultipleOfThree(int[] digits) {
    StringBuilder ans = new StringBuilder();
    int[] mod1 = new int[] {1, 4, 7, 2, 5, 8};
    int[] mod2 = new int[] {2, 5, 8, 1, 4, 7};
    int[] count = new int[10];
    int sum = 0;

    for (int digit : digits) {
      ++count[digit];
      sum += digit;
    }

    while (sum % 3 != 0)
      for (int i : sum % 3 == 1 ? mod1 : mod2)
        if (count[i] > 0) {
          --count[i];
          sum -= i;
          break;
        }

    for (int digit = 9; digit >= 0; --digit)
      ans.append(Character.toString('0' + digit).repeat(count[digit]));

    return ans.length() > 0 && ans.charAt(0) == '0' ? "0" : ans.toString();
  }
}

or


class Solution {
    public String largestMultipleOfThree(int[] digits) {
        int sum = 0;
        StringBuilder res = new StringBuilder();
        Arrays.sort(digits);
        for (int x : digits) {
            sum += x;
        }
        boolean flag = false;
        if (sum % 3 == 1) {
            for (int i = 0; i < digits.length; i++) {
                if (digits[i] % 3 == 1) {
                    digits[i] = -1;
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                int count = 0;
                for (int i = 0; i < digits.length; i++) {
                    if (digits[i] % 3 == 2) {
                        count++;
                        digits[i] = -1;
                    }
                    if (count == 2) {
                        break;
                    }
                }
                if (count < 2) {
                    return "";
                }
            }
        } else if (sum % 3 == 2) {
            for (int i = 0; i < digits.length; i++) {
                if (digits[i] % 3 == 2) {
                    digits[i] = -1;
                    flag = true;
                    break;
                }
            }
            if (!flag) {
                int count = 0;
                for (int i = 0; i < digits.length; i++) {
                    if (digits[i] % 3 == 1) {
                        count++;
                        digits[i] = -1;
                    }
                    if (count == 2) {
                        break;
                    }
                }
                if (count < 2) {
                    return "";
                }
            }
        }
        for (int i = digits.length - 1; i >= 0; i--) {
            if (digits[i] != -1) {
                res.append(digits[i]);
            }
        }
        if (res.length() == 0) {
            return "";
        } else if (res.charAt(0) == '0') {
            return "0";
        } else {
            return res.toString();
        }
    }
}
