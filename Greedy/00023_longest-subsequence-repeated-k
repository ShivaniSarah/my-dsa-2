https://leetcode.com/problems/longest-subsequence-repeated-k-times/description/


2014. Longest Subsequence Repeated k Times
Hard
Topics
Companies
Hint
You are given a string s of length n, and an integer k. You are tasked to find the longest subsequence repeated k times in string s.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.

A subsequence seq is repeated k times in the string s if seq * k is a subsequence of s, where seq * k represents a string constructed by concatenating seq k times.

For example, "bba" is repeated 2 times in the string "bababcba", because the string "bbabba", constructed by concatenating "bba" 2 times, is a subsequence of the string "bababcba".
Return the longest subsequence repeated k times in string s. If multiple such subsequences are found, return the lexicographically largest one. If there is no such subsequence, return an empty string.

 

Example 1:

example 1
Input: s = "letsleetcode", k = 2
Output: "let"
Explanation: There are two longest subsequences repeated 2 times: "let" and "ete".
"let" is the lexicographically largest one.
Example 2:

Input: s = "bb", k = 2
Output: "b"
Explanation: The longest subsequence repeated 2 times is "b".
Example 3:

Input: s = "ab", k = 2
Output: ""
Explanation: There is no subsequence repeated 2 times. Empty string is returned.
 

Constraints:

n == s.length
2 <= n, k <= 2000
2 <= n < k * 8
s consists of lowercase English letters.


# java

class Solution {
  public String longestSubsequenceRepeatedK(String s, int k) {
    String ans = "";
    int[] count = new int[26];
    List<Character> possibleChars = new ArrayList<>();
    // Stores subsequences, where the length grows by 1 each time.
    Queue<String> q = new ArrayDeque<>(List.of(""));

    for (final char c : s.toCharArray())
      ++count[c - 'a'];

    for (char c = 'a'; c <= 'z'; ++c)
      if (count[c - 'a'] >= k)
        possibleChars.add(c);

    while (!q.isEmpty()) {
      final String currSubseq = q.poll();
      if (currSubseq.length() * k > s.length())
        return ans;
      for (final char c : possibleChars) {
        final String newSubseq = currSubseq + c;
        if (isSubsequence(newSubseq, s, k)) {
          q.offer(newSubseq);
          ans = newSubseq;
        }
      }
    }

    return ans;
  }

  private boolean isSubsequence(final String subseq, final String s, int k) {
    int i = 0; // subseq's index
    for (final char c : s.toCharArray())
      if (c == subseq.charAt(i))
        if (++i == subseq.length()) {
          if (--k == 0)
            return true;
          i = 0;
        }
    return false;
  }
}

or

class Solution {
    public String longestSubsequenceRepeatedK(String s, int k) {
        String res = "";
        
        int[] map = new int[26];
        for(int i=0;i<s.length();i++){
            char ch = s.charAt(i);
            map[ch-'a']++;
        }
        
        ArrayList<Character> list = new ArrayList<>();
        for(int i=0;i<26;i++){
            if(map[i] >= k){
                list.add((char)('a' + i));
            }
        }
        
        LinkedList<String> queue = new LinkedList<>();
        queue.addLast("");
        while(queue.size() > 0){
            String rem = queue.removeFirst();
            for(char ch : list){
                String next = rem + ch;
                if(isKSub(s,next,k)){
                    queue.addLast(next);
                    res = next;
                }
            }           
        }
        
        return res;
    }
    
    boolean isKSub(String s,String sub ,int k){
        int j = 0;
        int rep = 0;
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i) == sub.charAt(j)){
                j++;
                
                if(j == sub.length()){
                    rep++;
                    j = 0;
                    
                    if(rep == k){
                        return true;
                    }
                }
            }          
        }
        return false;
    }
}


or

class Solution {
    char[] A;
    public String longestSubsequenceRepeatedK(String s, int k) {
        A = s.toCharArray();
        Queue<String> queue = new ArrayDeque<>();
        queue.offer("");
        String ans = "";
        int[] count = new int[26];
        BitSet bit = new BitSet();
        for (char ch : A) if (++count[ch-'a'] >= k){
            bit.set(ch-'a');
        }
        while(!queue.isEmpty()){
            String sb = queue.poll();
            for (int i = bit.nextSetBit(0); i >= 0; i = bit.nextSetBit(i+1)){
                String res = sb+(char)(i+'a');
                if (check(k, res)){
                    ans = res;
                    queue.offer(res);
                }
            }
        }
        return ans;
    }

    private boolean check(int k, String s){
        int cnt = 0;
        for (char ch : A){
            if (s.charAt(cnt%s.length()) == ch && ++cnt >= k * s.length()){
                return true;
            }
        }
        return false;
    }
}


or

