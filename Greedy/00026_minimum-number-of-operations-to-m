https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar/description/


2449. Minimum Number of Operations to Make Arrays Similar
Hard
Topics
Companies
Hint
You are given two positive integer arrays nums and target, of the same length.

In one operation, you can choose any two distinct indices i and j where 0 <= i, j < nums.length and:

set nums[i] = nums[i] + 2 and
set nums[j] = nums[j] - 2.
Two arrays are considered to be similar if the frequency of each element is the same.

Return the minimum number of operations required to make nums similar to target. The test cases are generated such that nums can always be similar to target.

 

Example 1:

Input: nums = [8,12,6], target = [2,14,10]
Output: 2
Explanation: It is possible to make nums similar to target in two operations:
- Choose i = 0 and j = 2, nums = [10,12,4].
- Choose i = 1 and j = 2, nums = [10,14,2].
It can be shown that 2 is the minimum number of operations needed.
Example 2:

Input: nums = [1,2,5], target = [4,1,3]
Output: 1
Explanation: We can make nums similar to target in one operation:
- Choose i = 1 and j = 2, nums = [1,4,3].
Example 3:

Input: nums = [1,1,1,1,1], target = [1,1,1,1,1]
Output: 0
Explanation: The array nums is already similiar to target.
 

Constraints:

n == nums.length == target.length
1 <= n <= 105
1 <= nums[i], target[i] <= 106
It is possible to make nums similar to target.


# java


class Solution {
  public long makeSimilar(int[] nums, int[] target) {
    long ans = 0;
    // A[0] := even nums, A[1] := odd nums
    List<Integer>[] A = new List[] {new ArrayList<>(), new ArrayList<>()};
    // B[0] := even target, B[1] := odd nums
    List<Integer>[] B = new List[] {new ArrayList<>(), new ArrayList<>()};

    for (final int num : nums)
      A[num % 2].add(num);

    for (final int num : target)
      B[num % 2].add(num);

    Collections.sort(A[0]);
    Collections.sort(A[1]);
    Collections.sort(B[0]);
    Collections.sort(B[1]);

    for (int i = 0; i < 2; ++i)
      for (int j = 0; j < A[i].size(); ++j)
        ans += Math.abs(A[i].get(j) - B[i].get(j)) / 2;

    return ans / 2;
  }
}


or


class Solution {
    public long makeSimilar(int[] nums, int[] target) {
        Arrays.sort(nums);
        Arrays.sort(target);
        List<Integer> a1 = new ArrayList<>();
        List<Integer> a2 = new ArrayList<>();
        List<Integer> b1 = new ArrayList<>();
        List<Integer> b2 = new ArrayList<>();
        for (int v : nums) {
            if (v % 2 == 0) {
                a1.add(v);
            } else {
                a2.add(v);
            }
        }
        for (int v : target) {
            if (v % 2 == 0) {
                b1.add(v);
            } else {
                b2.add(v);
            }
        }
        long ans = 0;
        for (int i = 0; i < a1.size(); ++i) {
            ans += Math.abs(a1.get(i) - b1.get(i));
        }
        for (int i = 0; i < a2.size(); ++i) {
            ans += Math.abs(a2.get(i) - b2.get(i));
        }
        return ans / 4;
    }
}

or


class Solution {
    public long makeSimilar(int[] nums, int[] target) {
        long count = 0;

        List<Integer> eNum = new ArrayList<>();
        List<Integer> eTarget = new ArrayList<>();
        List<Integer> oNum = new ArrayList<>();
        List<Integer> oTarget = new ArrayList<>();

        Arrays.sort(nums);
        Arrays.sort(target);

        for(int i = 0; i < nums.length; i++) {
            if(nums[i] % 2 == 0) eNum.add(nums[i]);
            else oNum.add(nums[i]);

            if(target[i] % 2 == 0) eTarget.add(target[i]);
            else oTarget.add(target[i]);
        }

        for(int i = 0; i < eNum.size(); i++) {
            if(eNum.get(i) > eTarget.get(i)) count += eNum.get(i) - eTarget.get(i);
        }

        for(int i = 0; i < oNum.size(); i++) {
            if(oNum.get(i) > oTarget.get(i)) count += oNum.get(i) - oTarget.get(i);
        }

        return count / 2;

    }
}


or


class Solution {
    public long makeSimilar(int[] nums, int[] target) {
        long count = 0;

        List<Integer> eNum = new ArrayList<>();
        List<Integer> eTarget = new ArrayList<>();
        List<Integer> oNum = new ArrayList<>();
        List<Integer> oTarget = new ArrayList<>();

        Arrays.sort(nums);
        Arrays.sort(target);

        for(int i = 0; i < nums.length; i++) {
            if(nums[i] % 2 == 0) eNum.add(nums[i]);
            else oNum.add(nums[i]);

            if(target[i] % 2 == 0) eTarget.add(target[i]);
            else oTarget.add(target[i]);
        }

        for(int i = 0; i < eNum.size(); i++) {
            if(eNum.get(i) > eTarget.get(i)) count += eNum.get(i) - eTarget.get(i);
        }

        for(int i = 0; i < oNum.size(); i++) {
            if(oNum.get(i) > oTarget.get(i)) count += oNum.get(i) - oTarget.get(i);
        }

        return count / 2;

    }
}


or


class Solution {
    public long makeSimilar(int[] nums, int[] target) {
        Arrays.sort(nums);
        Arrays.sort(target);
        int len = nums.length, i, p = 0, j = 0, k = 0;
        long sum1 = 0, sum2 = 0;
        List<Integer> odd1 = new ArrayList<>();
        List<Integer> even1 = new ArrayList<>();
        for(i = 0; i < len; i++){
            if(nums[i] % 2 == 0)
                even1.add(nums[i]);
            else
                odd1.add(nums[i]);
        }
        for(i = 0; i < len; i++){
            if(target[i] % 2 == 0){
                sum1 += (long)Math.abs(even1.get(j) - target[i]);
                j++;
            }
            else{
                sum2 += (long)Math.abs(odd1.get(k) - target[i]);
                k++;
            }
        }
        sum1 /= 2;
        sum2 /= 2;
        return (sum1 + sum2) / 2;
    }
}

or


class Solution {
    public long makeSimilar(int[] nums, int[] target) {
        Arrays.sort(nums);
        Arrays.sort(target);
        List<Integer> even1 = getEven(nums, true);
        List<Integer> odd1 = getEven(nums, false);
        List<Integer> even2 = getEven(target, true);
        List<Integer> odd2 = getEven(target, false);
        long diff = 0;
        for (int i = 0 ; i < even1.size(); i++) {
            if (even1.get(i) > even2.get(i)) {
                diff += even1.get(i) - even2.get(i);
            }
        }
        for (int i = 0 ; i < odd1.size(); i++) {
            if (odd1.get(i) > odd2.get(i)) {
                diff += odd1.get(i) - odd2.get(i);
            }
        }
        
        
        return diff / 2;
    }
    
    private List<Integer> getEven(int[] nums, boolean flag) {
        List<Integer> list = new ArrayList<>();
        for (int n : nums) {
            if (flag) {
                if (n % 2 == 0) {
                    list.add(n);                
                }   
            } else {
                if (n % 2 != 0) {
                    list.add(n);                
                }
            }
        }
        return list;
    }
}

