https://leetcode.com/problems/super-washing-machines/description/


517. Super Washing Machines
Hard
Topics
Companies
You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty.

For each move, you could choose any m (1 <= m <= n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.

Given an integer array machines representing the number of dresses in each washing machine from left to right on the line, return the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.

 

Example 1:

Input: machines = [1,0,5]
Output: 3
Explanation:
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3
3rd move:    2     1 <-- 3    =>    2     2     2
Example 2:

Input: machines = [0,3,0]
Output: 2
Explanation:
1st move:    0 <-- 3     0    =>    1     2     0
2nd move:    1     2 --> 0    =>    1     1     1
Example 3:

Input: machines = [0,2,0]
Output: -1
Explanation:
It's impossible to make all three washing machines have the same number of dresses.
 

Constraints:

n == machines.length
1 <= n <= 104
0 <= machines[i] <= 105



# java

class Solution {
  public int findMinMoves(int[] machines) {
    int dresses = Arrays.stream(machines).sum();
    if (dresses % machines.length != 0)
      return -1;

    int ans = 0;
    int inout = 0;
    final int average = dresses / machines.length;

    for (final int dress : machines) {
      inout += dress - average;
      ans = Math.max(ans, Math.max(Math.abs(inout), dress - average));
    }

    return ans;
  }
}


or


class Solution {
    public int findMinMoves(int[] machines) {
        int n = machines.length;
        int s = 0;
        for (int x : machines) {
            s += x;
        }
        if (s % n != 0) {
            return -1;
        }
        int k = s / n;
        s = 0;
        int ans = 0;
        for (int x : machines) {
            x -= k;
            s += x;
            ans = Math.max(ans, Math.max(Math.abs(s), x));
        }
        return ans;
    }
}

or


class Solution {
    public int findMinMoves(int[] machines) {
        int avg = 0;

        for(int i = 0; i < machines.length; i++){
            avg += machines[i];
            
        }

        if(avg % machines.length != 0){
            return -1;
        }

        int res = 0, cnt = 0;
        avg = avg / machines.length;
        for (int m : machines) {
            cnt += m - avg;
            res = Math.max(res, Math.max(Math.abs(cnt), m - avg));
        }
        return res;
    }
}


or


class Solution {
    public int findMinMoves(int[] machines) {
        int n = machines.length;
        
        int totalDresses = 0;
        for (int machine : machines) {
            totalDresses += machine;
        }
        
        if (totalDresses % n != 0) {
            return -1; // If total dresses can't be evenly distributed, return -1
        }
        
        int target = totalDresses / n; // Target number of dresses each machine should have
        
        int moves = 0;
        int accumulatedDiff = 0; // Accumulated difference between dresses and target
        
        for (int i = 0; i < n; i++) {
            int diff = machines[i] - target;
            accumulatedDiff += diff;
            moves = Math.max(moves, Math.max(Math.abs(accumulatedDiff), diff));
        }
        
        return moves;
    }
}


or

// dress

class Solution {
    public int findMinMoves(int[] machines) {
        int n = machines.length ;
        // Step 1: Calculate the total number of dresses
        int totalDresses = 0;
        for (int dresses : machines) {
            totalDresses += dresses;
        }

        // Step 2: Check if it's possible to balance the machines
        if (totalDresses % n != 0) {
            return -1; // Not possible to balance
        }
        int target = totalDresses/n;
        int maxMove = 0;
        int imBal = 0; // cumulative imbalance of machines

        for (int dress : machines){
            int netMove = dress - target;
            imBal += netMove ;

            maxMove = Math.max(maxMove, Math.max(Math.abs(imBal), netMove));
        }

        return maxMove;
        
    }
}



or



class Solution {
    public int findMinMoves(int[] machines) {
        int sum = 0;
        for(int i : machines){
            sum+=i;
        }

        if(sum % machines.length != 0) return -1;
        int avg = sum / machines.length;
        int moves[] = new int[machines.length];
        int ans = 0;
        for(int i=0;i<machines.length-1;i++){
            int change = machines[i]-avg;
            machines[i+1] = machines[i+1]+change;
            if(change>0){
                moves[i]=moves[i]+change;
            }else{
                moves[i+1]=-1*change;
            }
        }
        for(int i : moves){
            ans=Math.max(i,ans);
        }
        // System.out.println(Arrays.toString(moves));
        return ans;
    }
}
