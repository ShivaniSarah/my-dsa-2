https://leetcode.com/problems/reverse-subarray-to-maximize-array-value/description/


1330. Reverse Subarray To Maximize Array Value
Hard
Topics
Companies
Hint
You are given an integer array nums. The value of this array is defined as the sum of |nums[i] - nums[i + 1]| for all 0 <= i < nums.length - 1.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.

 

Example 1:

Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.
Example 2:

Input: nums = [2,4,9,24,2,1,10]
Output: 68
 

Constraints:

2 <= nums.length <= 3 * 104
-105 <= nums[i] <= 105
The answer is guaranteed to fit in a 32-bit integer.


# java


class Solution {
    public int maxValueAfterReverse(int[] nums) {
        int n = nums.length;
        int s = 0;
        for (int i = 0; i < n - 1; ++i) {
            s += Math.abs(nums[i] - nums[i + 1]);
        }
        int ans = s;
        for (int i = 0; i < n - 1; ++i) {
            ans = Math.max(
                ans, s + Math.abs(nums[0] - nums[i + 1]) - Math.abs(nums[i] - nums[i + 1]));
            ans = Math.max(
                ans, s + Math.abs(nums[n - 1] - nums[i]) - Math.abs(nums[i] - nums[i + 1]));
        }
        int[] dirs = {1, -1, -1, 1, 1};
        final int inf = 1 << 30;
        for (int k = 0; k < 4; ++k) {
            int k1 = dirs[k], k2 = dirs[k + 1];
            int mx = -inf, mi = inf;
            for (int i = 0; i < n - 1; ++i) {
                int a = k1 * nums[i] + k2 * nums[i + 1];
                int b = Math.abs(nums[i] - nums[i + 1]);
                mx = Math.max(mx, a - b);
                mi = Math.min(mi, a + b);
            }
            ans = Math.max(ans, s + Math.max(0, mx - mi));
        }
        return ans;
    }
}


or


class Solution {
  public int maxValueAfterReverse(int[] nums) {
    int total = 0;
    int mn = Integer.MAX_VALUE;
    int mx = Integer.MIN_VALUE;

    for (int i = 0; i + 1 < nums.length; ++i) {
      final int a = nums[i];
      final int b = nums[i + 1];
      total += Math.abs(a - b);
      mn = Math.min(mn, Math.max(a, b));
      mx = Math.max(mx, Math.min(a, b));
    }
    int diff = Math.max(0, (mx - mn) * 2);

    for (int i = 0; i + 1 < nums.length; ++i) {
      final int a = nums[i];
      final int b = nums[i + 1];
      final int headDiff = -Math.abs(a - b) + Math.abs(nums[0] - b);
      final int tailDiff = -Math.abs(a - b) + Math.abs(nums[nums.length - 1] - a);
      diff = Math.max(diff, Math.max(headDiff, tailDiff));
    }

    return total + diff;
  }
}

or

class Solution {
      public int maxValueAfterReverse(int[] nums) {
        int valWithoutReverse = 0, improvementByReversing = 0, secondMin = Integer.MAX_VALUE, secondMax = Integer.MIN_VALUE, n = nums.length;
        for (int i = 0; i < n - 1; i++) {
            int currDiff = Math.abs(nums[i] - nums[i + 1]);
            valWithoutReverse += currDiff;
            improvementByReversing = Math.max(improvementByReversing, Math.abs(nums[i + 1] - nums[0]) - currDiff); // Reverse nums[0] to nums[i]
            improvementByReversing = Math.max(improvementByReversing, Math.abs(nums[i] - nums[n - 1]) - currDiff); // Reverse nums[i+1] to nums[n-1]
            secondMin = Math.min(secondMin, Math.max(nums[i], nums[i + 1])); // Keep track of the second min
            secondMax = Math.max(secondMax, Math.min(nums[i], nums[i + 1])); // Keep track of the second max
        } // The last possible improvementByReversing is reversing [secondMin...secondMax] in: ... firstMin [secondMin ... secondMax] firstMax ...
        return valWithoutReverse + Math.max(improvementByReversing, 2 * (secondMax - secondMin)); // 2*(secondMax-secondMin) could be achieved by reversing [secondMin...secondMax]
    }
}


or


class Solution {
    private int getDiff(int a, int b) {
        return Math.abs(a - b);
    }

    public int maxValueAfterReverse(int[] nums) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int res = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            res += getDiff(nums[i], nums[i + 1]);

            max = Math.max(max, Math.min(nums[i], nums[i + 1]));
            min = Math.min(min, Math.max(nums[i], nums[i + 1]));
        }

        int diff = Math.max(0, 2 * (max - min));
        for (int i = 0; i < nums.length - 1; i++) {
            diff = Math.max(diff, 
                getDiff(nums[0], nums[i + 1]) - getDiff(nums[i], nums[i + 1]));
        }
        for (int i = 0; i < nums.length - 1; i++) {
            diff = Math.max(diff, 
                getDiff(nums[nums.length - 1], nums[i]) - getDiff(nums[i], nums[i + 1]));
        }
        return res + diff;
    }
}


or


class Solution {
    private int getDiff(int a, int b) {
        return Math.abs(a - b);
    }

    public int maxValueAfterReverse(int[] nums) {
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        int res = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            res += getDiff(nums[i], nums[i + 1]);

            max = Math.max(max, Math.min(nums[i], nums[i + 1]));
            min = Math.min(min, Math.max(nums[i], nums[i + 1]));
        }

        int diff = Math.max(0, 2 * (max - min));
        for (int i = 0; i < nums.length - 1; i++) {
            diff = Math.max(diff, 
                getDiff(nums[0], nums[i + 1]) - getDiff(nums[i], nums[i + 1]));
        }
        for (int i = 0; i < nums.length - 1; i++) {
            diff = Math.max(diff, 
                getDiff(nums[nums.length - 1], nums[i]) - getDiff(nums[i], nums[i + 1]));
        }
        return res + diff;
    }
}


or

class Solution {
    
    private int getAbsoluteDifference(int a, int b){
        return Math.abs(a - b);
    }
    public int maxValueAfterReverse(int[] nums) {
        int n = nums.length;
        int result = 0;
        for (int i = 0; i < n - 1; i++)
            result += getAbsoluteDifference(nums[i], nums[i+1]);
        
        int minLine = Integer.MIN_VALUE;
        int maxLine = Integer.MAX_VALUE;
        for (int i = 0; i < n - 1; i++) {
            minLine = Math.max(minLine, Math.min(nums[i], nums[i + 1]));
            maxLine = Math.min(maxLine, Math.max(nums[i], nums[i + 1]));
        }
        int diff = Math.max(0, (minLine - maxLine) * 2);
        for (int i = 1; i < n - 1; i++)
            diff = Math.max(diff, getAbsoluteDifference(nums[0], nums[i+1]) - getAbsoluteDifference(nums[i], nums[i+1]));
        
        for (int i = 0; i < n - 1; i++)
            diff = Math.max(diff, getAbsoluteDifference(nums[n-1], nums[i]) - getAbsoluteDifference(nums[i+1], nums[i]));
        return result + diff;
    }
}


