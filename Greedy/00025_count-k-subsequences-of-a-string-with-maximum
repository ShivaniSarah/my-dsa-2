https://leetcode.com/problems/count-k-subsequences-of-a-string-with-maximum-beauty/description/

2842. Count K-Subsequences of a String With Maximum Beauty
Hard
Topics
Companies
Hint
You are given a string s and an integer k.

A k-subsequence is a subsequence of s, having length k, and all its characters are unique, i.e., every character occurs once.

Let f(c) denote the number of times the character c occurs in s.

The beauty of a k-subsequence is the sum of f(c) for every character c in the k-subsequence.

For example, consider s = "abbbdd" and k = 2:

f('a') = 1, f('b') = 3, f('d') = 2
Some k-subsequences of s are:
"abbbdd" -> "ab" having a beauty of f('a') + f('b') = 4
"abbbdd" -> "ad" having a beauty of f('a') + f('d') = 3
"abbbdd" -> "bd" having a beauty of f('b') + f('d') = 5
Return an integer denoting the number of k-subsequences whose beauty is the maximum among all k-subsequences. Since the answer may be too large, return it modulo 109 + 7.

A subsequence of a string is a new string formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.

Notes

f(c) is the number of times a character c occurs in s, not a k-subsequence.
Two k-subsequences are considered different if one is formed by an index that is not present in the other. So, two k-subsequences may form the same string.
 

Example 1:

Input: s = "bcca", k = 2
Output: 4
Explanation: From s we have f('a') = 1, f('b') = 1, and f('c') = 2.
The k-subsequences of s are: 
bcca having a beauty of f('b') + f('c') = 3 
bcca having a beauty of f('b') + f('c') = 3 
bcca having a beauty of f('b') + f('a') = 2 
bcca having a beauty of f('c') + f('a') = 3
bcca having a beauty of f('c') + f('a') = 3 
There are 4 k-subsequences that have the maximum beauty, 3. 
Hence, the answer is 4. 
Example 2:

Input: s = "abbcd", k = 4
Output: 2
Explanation: From s we have f('a') = 1, f('b') = 2, f('c') = 1, and f('d') = 1. 
The k-subsequences of s are: 
abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5
abbcd having a beauty of f('a') + f('b') + f('c') + f('d') = 5 
There are 2 k-subsequences that have the maximum beauty, 5. 
Hence, the answer is 2. 
 

Constraints:

1 <= s.length <= 2 * 105
1 <= k <= s.length
s consists only of lowercase English letters.



# java


class Solution {
  private static final int MOD = 1_000_000_007;
  private static final int MAX = 100_005; // Adjust depending on constraints
  private static long[] fact = new long[MAX];
  private static long[] invFact = new long[MAX];

  public int countKSubsequencesWithMaxBeauty(String s, int k) {
    buildFactorials(); // Precompute factorials and inverse factorials

    Map<Character, Integer> count = new HashMap<>();
    for (char c : s.toCharArray())
      count.merge(c, 1, Integer::sum);

    if (count.size() < k)
      return 0;

    long ans = 1;

    for (Pair<Integer, Integer> pair : getFreqCountPairs(count)) {
      int freq = pair.getKey();
      int numChars = pair.getValue();

      if (numChars >= k) {
        long ways = nCk(numChars, k);
        ans = ans * ways % MOD;
        ans = ans * modPow(freq, k) % MOD;
        return (int) ans;
      }

      ans = ans * modPow(freq, numChars) % MOD;
      k -= numChars;
    }

    return (int) ans;
  }

  private void buildFactorials() {
    fact[0] = 1;
    for (int i = 1; i < MAX; ++i)
      fact[i] = fact[i - 1] * i % MOD;

    invFact[MAX - 1] = modPow(fact[MAX - 1], MOD - 2);
    for (int i = MAX - 2; i >= 0; --i)
      invFact[i] = invFact[i + 1] * (i + 1) % MOD;
  }

  private long nCk(int n, int k) {
    if (k < 0 || k > n) return 0;
    return fact[n] * invFact[k] % MOD * invFact[n - k] % MOD;
  }

  private int modPow(long x, long n) {
    long result = 1;
    x %= MOD;
    while (n > 0) {
      if ((n & 1) == 1)
        result = result * x % MOD;
      x = x * x % MOD;
      n >>= 1;
    }
    return (int) result;
  }

  private List<Pair<Integer, Integer>> getFreqCountPairs(Map<Character, Integer> count) {
    Map<Integer, Integer> freqCount = new HashMap<>();
    for (int value : count.values())
      freqCount.merge(value, 1, Integer::sum);
    List<Pair<Integer, Integer>> pairs = new ArrayList<>();
    for (Map.Entry<Integer, Integer> e : freqCount.entrySet())
      pairs.add(new Pair<>(e.getKey(), e.getValue()));
    pairs.sort((a, b) -> b.getKey() - a.getKey());
    return pairs;
  }
}



or


class Solution {
    private final int mod = (int) 1e9 + 7;

    public int countKSubsequencesWithMaxBeauty(String s, int k) {
        int[] f = new int[26];
        int n = s.length();
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            if (++f[s.charAt(i) - 'a'] == 1) {
                ++cnt;
            }
        }
        if (cnt < k) {
            return 0;
        }
        Integer[] vs = new Integer[cnt];
        for (int i = 0, j = 0; i < 26; ++i) {
            if (f[i] > 0) {
                vs[j++] = f[i];
            }
        }
        Arrays.sort(vs, (a, b) -> b - a);
        long ans = 1;
        int val = vs[k - 1];
        int x = 0;
        for (int v : vs) {
            if (v == val) {
                ++x;
            }
        }
        for (int v : vs) {
            if (v == val) {
                break;
            }
            --k;
            ans = ans * v % mod;
        }
        int[][] c = new int[x + 1][x + 1];
        for (int i = 0; i <= x; ++i) {
            c[i][0] = 1;
            for (int j = 1; j <= i; ++j) {
                c[i][j] = (c[i - 1][j - 1] + c[i - 1][j]) % mod;
            }
        }
        ans = ((ans * c[x][k]) % mod) * qpow(val, k) % mod;
        return (int) ans;
    }

    private long qpow(long a, int n) {
        long ans = 1;
        for (; n > 0; n >>= 1) {
            if ((n & 1) == 1) {
                ans = ans * a % mod;
            }
            a = a * a % mod;
        }
        return ans;
    }
}


or


// best


class Solution {
        public int countKSubsequencesWithMaxBeauty(String s, int k) {
        int n = s.length(), count[] = new int[26];
        for (int i = 0; i < n; ++i)
            count[s.charAt(i) - 'a']++;
        Arrays.sort(count);
        if (k > 26 || count[26 - k] == 0)
            return 0;
        long res = 1, comb = 1, mod = (long)1e9 + 7, bar = count[26 - k], pend = 0;
        for (int freq : count) {
            if (freq > bar) {
                k--;
                res = res * freq % mod;
            }
            if (freq == bar) pend++;
        }
        for (int i = 0; i < k; ++i) {
            comb = comb * (pend - i) / (i + 1);
            res = res * bar % mod;
        }
        return (int)(res * comb % mod);
    }
}


or

public class Solution {
    // Helper function to calculate binomial coefficient "n choose r" using logarithmic operations
    private long nCr(long n, long r) {
        if (r > n) 
            return 0;
    
        if (r == 0 || n == r) 
            return 1;
    
        double res = 0;
        for (int i = 0; i < r; i++) {
            res += (Math.log(n - i) - Math.log(i + 1));
        }
        
        return Math.round(Math.exp(res));
    }
    
    public int countKSubsequencesWithMaxBeauty(String s, int k) {
        int n = s.length();
        final long mod = 1000000007; // 10^9 + 7
        
        // Initialize an array to store the frequency of each character in the input string
        int[] occ = new int[26];
        
        // Count the frequency of each character in the string
        for (char ch : s.toCharArray()) {
            occ[ch - 'a']++;
        }
        
        // Initialize a priority queue to maintain the 'k' characters with the highest frequency
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        // Iterate through the characters and update minHeap with the top 'k' characters
        for (int i = 0; i < 26; i++) {
            if (occ[i] != 0) {
                if (minHeap.size() < k) {
                    minHeap.offer(occ[i]);
                } else if (occ[i] > minHeap.peek()) {
                    minHeap.poll();
                    minHeap.offer(occ[i]);
                }
            }
        }
        
        // If the size of minHeap is less than 'k', return 0
        if (minHeap.size() < k) {
            return 0;
        }
        
        // Initialize 'res' to 1, which will be used to calculate the result
        long res = 1;
        
        // Create a map to store the frequencies of characters selected for the k-subsequence
        Map<Integer, Integer> occFreqSubs = new HashMap<>();
        
        // Iterate through minHeap and update 'res' and occFreqSubs
        while (!minHeap.isEmpty()) {
            int it = minHeap.poll();
            
            res = (res * it) % mod;
            occFreqSubs.put(it, occFreqSubs.getOrDefault(it, 0) + 1);
        }
        
        // Create a map to store the total frequencies of characters in the input string
        Map<Integer, Integer> occFreqTotal = new HashMap<>();
        
        // Populate occFreqTotal
        for (int i = 0; i < 26; i++) {
            occFreqTotal.put(occ[i], occFreqTotal.getOrDefault(occ[i], 0) + 1);
        }
        
        // Iterate through occFreqSubs and update 'res' by considering combinations
        for (Map.Entry<Integer, Integer> entry : occFreqSubs.entrySet()) {
            int a = entry.getKey();
            int b = entry.getValue();
            res = (res * nCr(occFreqTotal.get(a), b)) % mod;
        }
        
        // Return the final result modulo 10^9 + 7
        return (int) (res % mod);
    }
}


or


class Solution {
    // Helper function to calculate factorial modulo moduloValue
    private int f(int totalElements, int selectedElements, int moduloValue) {
        if (selectedElements == 0)
            return 1;

        int[] temp = new int[totalElements + 1];
        temp[0] = 1;

        // Calculate factorial modulo moduloValue for each number up to totalElements
        for (int i = 1; i <= totalElements; i++)
            temp[i] = (int) (1L * temp[i - 1] * i % moduloValue);

        int result = temp[totalElements];
        result = (int) (1L * result * help(temp[selectedElements], moduloValue) % moduloValue);
        result = (int) (1L * result * help(temp[totalElements - selectedElements], moduloValue) % moduloValue);

        return result;
    }

    // Helper function to calculate modular inverse using extended Euclidean algorithm
    private int help(int num, int moduloValue) {
        int mod0 = moduloValue;
        int y = 0, x = 1;

        while (num > 1) {
            int quotient = num / moduloValue;
            int temp = moduloValue;
            moduloValue = num % moduloValue;
            num = temp;
            temp = y;
            y = x - quotient * y;
            x = temp;
        }

        if (x < 0)
            x += mod0;

        return x;
    }

    public int countKSubsequencesWithMaxBeauty(String inputStr, int kValue) {
        int moduloValue = 1_000_000_007;
        HashMap<Character, Integer> mp = new HashMap<>();

        for (char ch : inputStr.toCharArray()) {
            mp.put(ch, mp.getOrDefault(ch, 0) + 1);
        }

        if (mp.size() < kValue) {
            return 0;
        }

        List<Integer> charCounts = new ArrayList<>(mp.values());
        charCounts.sort(Collections.reverseOrder());

        int answer = 1;
        int tt = charCounts.size();
        int lowestCharCount = charCounts.get(kValue - 1);
        int tll = 0, currentLowestCharCount = 0;

        for (int i = 0; i < tt; i++) {
            if (i < kValue) {
                answer = (int) (1L * answer * charCounts.get(i) % moduloValue);
                if (charCounts.get(i) == lowestCharCount) {
                    currentLowestCharCount++;
                }
            }

            if (charCounts.get(i) == lowestCharCount) {
                tll++;
            }
        }

        answer = (int) (1L * answer * f(tll, currentLowestCharCount, moduloValue) % moduloValue);
        return answer;
    }
}


or



class Solution {
    public int countKSubsequencesWithMaxBeauty(String s, int k) {
        int[] count = new int[26];
        int howManyCharacters = 0;
        for (char c : s.toCharArray()) {
            if (count[c - 'a'] == 0) {
                howManyCharacters++;
            }
            count[c - 'a']++;
        }
        TreeMap<Integer, List<Character>> countToChar = new TreeMap<>((a, b) -> b - a);
        for (int i = 0; i < 26; i++) {
            char c = (char)(i + 'a');
            if (count[i] != 0) {
                countToChar.putIfAbsent(count[i], new ArrayList<>());
                countToChar.get(count[i]).add(c);
            }
        }
        if (howManyCharacters < k) {
            return 0;
        }
        final int MOD = 100_000_0007;
        long res = 1;
        List<Integer> sortedCount = new ArrayList<>(countToChar.keySet());
        int i = 0;
        int remainingK = k;
        while (i < sortedCount.size() && remainingK > 0) {
            int curCount = sortedCount.get(i);
            int sizeOfCandidates = countToChar.get(curCount).size();
            if (remainingK >= sizeOfCandidates) {
                res = (res * modPow(curCount, sizeOfCandidates, MOD)) % MOD;
                remainingK -= sizeOfCandidates;
            } else {
                long comb = combination(sizeOfCandidates, remainingK, MOD);
                res = (res * comb) % MOD;
                res = (res * modPow(curCount, remainingK, MOD)) % MOD;
                remainingK = 0;
            }
            i++;
        }
        if (remainingK > 0) {
            return 0; 
        }
        return (int) res;
    }

    // 计算组合数 C(n, k) mod MOD
    long combination(int n, int k, int mod) {
        if (k == 0 || k == n) {
            return 1;
        }
        long[] fact = new long[n + 1]; // 阶乘数组
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = (fact[i - 1] * i) % mod;
        }
        long numerator = fact[n];
        long denominator = (fact[k] * fact[n - k]) % mod;
        return numerator * modInverse(denominator, mod) % mod;
    }

    // 计算模逆元
    long modInverse(long x, int mod) {
        return modPow(x, mod - 2, mod); // 费马小定理
    }

    // 快速幂计算 x^y mod mod
    long modPow(long x, int y, int mod) {
        x %= mod;
        long result = 1;
        while (y > 0) {
            if ((y & 1) == 1) {
                result = (result * x) % mod;
            }
            x = (x * x) % mod;
            y >>= 1;
        }
        return result;
    }
}


or


class Solution {
    public int countKSubsequencesWithMaxBeauty(String s, int k) {
        char[] arr = s.toCharArray();
        int n = arr.length;
        long mul = 1, mod = 1000000007;
        long[] freq = new long[26];
        for (char ch : arr)
            freq[ch - 97]++;
        Arrays.sort(freq);
        int diff = 0;
        for (int i = 25; i >= 0; i--)
            if (freq[i] > 0)
                diff++;
        if (k > diff)
            return 0;
        for (int i = 25; i >= (26 - k); i--) {
            mul = (mul * freq[i]) % mod;
            mul %= mod;
        }
        return possible(freq, freq[26 - k], (26 - k), mul);
    }

    static int possible(long[] freq, long x, int i, long mul) {
        if (i - 1 < 0)
            return (int) (mul);
        if (freq[i - 1] == freq[i]) {
            long count = 0, a = 1, b = 1, c2 = 0;
            for (int j = 0; j < 26; j++)
                if (freq[j] == x)
                    count++;
            for (int j = i; j < 26; j++) {
                if (freq[j] == freq[i])
                    c2++;
            }
            c2 = c2 < (count - c2) ? c2 : (count - c2);
            a = fa((count), (count - c2 + 1));
            b = fa(c2, 1);
            return (int) ((a / b) * mul % 1000000007);
        }
        return (int) (mul);
    }

    static long fa(long x, long till) {
        long ans = 1;
        while (x >= till) {
            ans = (ans * x);
            x--;
        }
        return ans;
    }
}

or


class Solution {
    public int countKSubsequencesWithMaxBeauty(String s, int k) {

        final int MOD = 1_000_000_007;

        Map<Integer, Integer> map = new HashMap<Integer, Integer>();

        for(int i = 0; i < s.length(); i++) {
            int cost = (int)(s.charAt(i)-'a');
            map.put(cost, map.getOrDefault(cost, 0)+1);
        }

        if ( map.size() < k) return 0;

        List<int[]> list = new ArrayList<int[]>();

        Iterator<Integer> it = map.keySet().iterator();

        while(it.hasNext()) {
            int key = it.next();
            int cnt = map.get(key);

            list.add(new int[]{key, cnt});
        }

        // System.out.println(map);
        
        Collections.sort(list, new Comparator<int[]>() {
            public int compare(int a[], int b[]) {
                return b[1]-a[1];
            }
        });

        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < k; i++) {
            max = Math.max(max, list.get(i)[1]);
            min = Math.min(min, list.get(i)[1]);
        }

        int minCnt = 0;
        for(int i = 0; i < list.size(); i++) {
            if ( list.get(i)[1] == min ) minCnt++;
        }

        int notMinCnt = 0;
        long cnt = 1;
        for(int i = 0; i < k; i++) {
            if ( list.get(i)[1] == min ) break;
            notMinCnt++;
            cnt *= list.get(i)[1];
            cnt %= MOD;
        }


        int needSelect = k - notMinCnt;
 
        Map<Integer, Integer> mulMap = new HashMap<Integer, Integer>();
        for(int i = 0; i < needSelect; i++) {
            addPrimeList(mulMap, minCnt-i);
            addPrimeList(mulMap, min);
        }
        
        for(int i = needSelect; i > 1; i--) {
            removePrimeList(mulMap, i);
        }
        

      
        it = mulMap.keySet().iterator();
        while(it.hasNext()) {
            int mul = it.next();
            int c = mulMap.get(mul);

            for(int i = 0; i < c; i++) {
                cnt *= mul;
                cnt %= MOD;
            }
        }

        return (int)cnt;
    }


    private void addPrimeList(Map<Integer, Integer> mulMap, int num) {
        
        for(int j = 2; j <= num*num; j++) {
            while( num % j == 0 ) {
                mulMap.put(j, mulMap.getOrDefault(j, 0)+1);
                num /= j;
            }
        }
    }

    private void removePrimeList(Map<Integer, Integer> mulMap, int num) {
        
        for(int j = 2; j <= num*num; j++) {
            while ( num % j == 0) {
                int c = mulMap.getOrDefault(j, 0);
                if ( c == 1 ) {
                    mulMap.remove(j);
                } else{
                    mulMap.put(j, c-1);
                }
                
                num /= j;
            }
        }
    }
}
