https://leetcode.com/problems/lexicographically-smallest-generated-string/description/

3474. Lexicographically Smallest Generated String
Hard
Topics
Companies
Hint
You are given two strings, str1 and str2, of lengths n and m, respectively.

A string word of length n + m - 1 is defined to be generated by str1 and str2 if it satisfies the following conditions for each index 0 <= i <= n - 1:

If str1[i] == 'T', the substring of word with size m starting at index i is equal to str2, i.e., word[i..(i + m - 1)] == str2.
If str1[i] == 'F', the substring of word with size m starting at index i is not equal to str2, i.e., word[i..(i + m - 1)] != str2.
Return the lexicographically smallest possible string that can be generated by str1 and str2. If no string can be generated, return an empty string "".

 

Example 1:

Input: str1 = "TFTF", str2 = "ab"

Output: "ababa"

Explanation:

The table below represents the string "ababa"
Index	T/F	Substring of length m
0	'T'	"ab"
1	'F'	"ba"
2	'T'	"ab"
3	'F'	"ba"
The strings "ababa" and "ababb" can be generated by str1 and str2.

Return "ababa" since it is the lexicographically smaller string.

Example 2:

Input: str1 = "TFTF", str2 = "abc"

Output: ""

Explanation:

No string that satisfies the conditions can be generated.

Example 3:

Input: str1 = "F", str2 = "d"

Output: "a"

 

Constraints:

1 <= n == str1.length <= 104
1 <= m == str2.length <= 500
str1 consists only of 'T' or 'F'.
str2 consists only of lowercase English characters.



# java


class Solution {
  public String generateString(String str1, String str2) {
    final int n = str1.length();
    final int m = str2.length();
    final int sz = n + m - 1;
    char[] ans = new char[sz];
    boolean[] modifiable = new boolean[sz];
    Arrays.fill(modifiable, true);

    // 1. Handle all 'T' positions first.
    for (int i = 0; i < n; ++i)
      if (str1.charAt(i) == 'T')
        for (int j = 0; j < m; ++j) {
          final int pos = i + j;
          if (ans[pos] != 0 && ans[pos] != str2.charAt(j))
            return "";
          ans[pos] = str2.charAt(j);
          modifiable[pos] = false;
        }

    // 2. Fill all remaining positions with 'a'.
    for (int i = 0; i < sz; ++i)
      if (ans[i] == 0)
        ans[i] = 'a';

    // 3. Handle all 'F' positions.
    for (int i = 0; i < n; ++i)
      if (str1.charAt(i) == 'F' && match(ans, i, str2)) {
        final int modifiablePos = lastModifiablePosition(i, m, modifiable);
        if (modifiablePos == -1)
          return "";
        ans[modifiablePos] = 'b';
        modifiable[modifiablePos] = false;
      }

    return new String(ans);
  }

  // Returns true if the substring of ans starting at `i` matches `s`.
  private boolean match(char[] ans, int i, String s) {
    for (int j = 0; j < s.length(); ++j)
      if (ans[i + j] != s.charAt(j))
        return false;
    return true;
  }

  // Finds the last modifiable position in the substring ans starting at `i`.
  private int lastModifiablePosition(int i, int m, boolean[] modifiable) {
    int modifiablePos = -1;
    for (int j = 0; j < m; ++j) {
      final int pos = i + j;
      if (modifiable[pos])
        modifiablePos = pos;
    }
    return modifiablePos;
  }
}


or


// kmp best



class Solution {

    int[] kmp(String s) {
        int[] pre = new int[s.length()];
        pre[0] = -1;
        for(int i = 1; i < s.length(); i++) {
            int j = pre[i - 1];
            while(j != -1 && s.charAt(j + 1) != s.charAt(i)) {
                j = pre[j];
            }
            if(s.charAt(j + 1) == s.charAt(i)) j++;
            pre[i] = j;
        }
        return pre;
    }


    public String generateString(String str1, String str2) {
        int m = str1.length();
        int n = str2.length();
        char[] a = new char[m + n - 1];
        
        for(int i = 0, j = 0; i < m; i++) {
            if(str1.charAt(i) == 'T') {
                if(j < i) j = i;
                while(j < i + n) {
                    a[j] = str2.charAt(j++ - i);
                }
            }
        }

        int[] pre = kmp(str2);

        char[] actual = str1.toCharArray();

        int j = 0;
        for(int i = 0; i < a.length; i++) {
            if(str2.charAt(j) == a[i]) {
                if(j == n - 1) {
                    if(actual[i - j] != 'T') return "";
                    actual[i - j] = 'F';
                    j = pre[j];
                }
            } else {
                j--;
                while(j != -1 && str2.charAt(j + 1) != a[i] ) j = pre[j];
                if(str2.charAt(j + 1) == a[i]) j++;
            }
            j++;
        }

        for(char t : actual) if(t == 'T') return "";

        // fill A with 'a' and find if there is any KMP match
        // between A and str2 corresponding to a 'F' in str1,
        // if so, retry from last unfixed character.
        actual = str1.toCharArray();
        j = 0;
        int lastdot = -1;
        for(int i = 0; i < a.length; i++) {
            if(a[i] == 0) {
                lastdot = i;
                a[i] = 'a';
            }
            if(str2.charAt(j) == a[i]) {
                if(j == n - 1) {
                    if(actual[i - j] != 'T') { // found a match but a 'F'
                        a[lastdot]++;
                        j -= i - lastdot + 1; // retry
                        i = lastdot - 1; // retry
                    }else{
                        j = pre[j];
                    }
                }
            } else {
                j--;
                while(j != -1 && str2.charAt(j + 1) != a[i] ) j = pre[j];
                if(str2.charAt(j + 1) == a[i]) j++;
            }
            j++;
        }

        return new String(a);
    }
}


or

class Solution {
    public String generateString(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        int L = n + m - 1;

        Character[] word = new Character[L];
        boolean[] forced = new boolean[L];

        for (int i = 0; i < n; i++) {
            if (str1.charAt(i) == 'T') {
                for (int j = 0; j < m; j++) {
                    int pos = i + j;
                    if (word[pos] != null && word[pos] != str2.charAt(j)) {
                        return "";
                    }
                    word[pos] = str2.charAt(j);
                    forced[pos] = true;
                }
            }
        }

        boolean[] free = new boolean[L];
        for (int i = 0; i < L; i++) {
            if (word[i] == null) {
                word[i] = 'a';
                free[i] = true;
            }
        }

        if (n == 0) {
            return String.join("", java.util.Collections.nCopies(L, "a"));
        }

        for (int i = 0; i < n; i++) {
            if (str1.charAt(i) == 'F') {
                if (intervalEquals(word, str2, i, m)) {
                    boolean fixed = false;
                    for (int j = m - 1; j >= 0; j--) {
                        int pos = i + j;
                        if (free[pos]) {
                            word[pos] = 'b';
                            free[pos] = false;
                            fixed = true;
                            break;
                        }
                    }
                    if (!fixed) {
                        return "";
                    }
                }
            }
        }

        StringBuilder sb = new StringBuilder();
        for (Character c : word) {
            sb.append(c);
        }
        return sb.toString();
    }

    private boolean intervalEquals(Character[] word, String str2, int i, int m) {
        for (int j = 0; j < m; j++) {
            if (word[i + j] == null || word[i + j] != str2.charAt(j)) {
                return false;
            }
        }
        return true;
    }
}

