https://leetcode.com/problems/minimum-total-cost-to-make-arrays-unequal/description/

2499. Minimum Total Cost to Make Arrays Unequal
Hard
Topics
Companies
Hint
You are given two 0-indexed integer arrays nums1 and nums2, of equal length n.

In one operation, you can swap the values of any two indices of nums1. The cost of this operation is the sum of the indices.

Find the minimum total cost of performing the given operation any number of times such that nums1[i] != nums2[i] for all 0 <= i <= n - 1 after performing all the operations.

Return the minimum total cost such that nums1 and nums2 satisfy the above condition. In case it is not possible, return -1.

 

Example 1:

Input: nums1 = [1,2,3,4,5], nums2 = [1,2,3,4,5]
Output: 10
Explanation: 
One of the ways we can perform the operations is:
- Swap values at indices 0 and 3, incurring cost = 0 + 3 = 3. Now, nums1 = [4,2,3,1,5]
- Swap values at indices 1 and 2, incurring cost = 1 + 2 = 3. Now, nums1 = [4,3,2,1,5].
- Swap values at indices 0 and 4, incurring cost = 0 + 4 = 4. Now, nums1 =[5,3,2,1,4].
We can see that for each index i, nums1[i] != nums2[i]. The cost required here is 10.
Note that there are other ways to swap values, but it can be proven that it is not possible to obtain a cost less than 10.
Example 2:

Input: nums1 = [2,2,2,1,3], nums2 = [1,2,2,3,3]
Output: 10
Explanation: 
One of the ways we can perform the operations is:
- Swap values at indices 2 and 3, incurring cost = 2 + 3 = 5. Now, nums1 = [2,2,1,2,3].
- Swap values at indices 1 and 4, incurring cost = 1 + 4 = 5. Now, nums1 = [2,3,1,2,2].
The total cost needed here is 10, which is the minimum possible.
Example 3:

Input: nums1 = [1,2,2], nums2 = [1,2,2]
Output: -1
Explanation: 
It can be shown that it is not possible to satisfy the given conditions irrespective of the number of operations we perform.
Hence, we return -1.
 

Constraints:

n == nums1.length == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= n


# java

class Solution {
  public long minimumTotalCost(int[] nums1, int[] nums2) {
    final int n = nums1.length;
    long ans = 0;
    int maxFreq = 0;
    int maxFreqNum = 0;
    int shouldBeSwapped = 0;
    int[] conflictedNumCount = new int[n + 1];

    // Collect the indices i s.t. nums1[i] == nums2[i] and record their `maxFreq`
    // and `maxFreqNum`.
    for (int i = 0; i < n; ++i)
      if (nums1[i] == nums2[i]) {
        final int conflictedNum = nums1[i];
        if (++conflictedNumCount[conflictedNum] > maxFreq) {
          maxFreq = conflictedNumCount[conflictedNum];
          maxFreqNum = conflictedNum;
        }
        ++shouldBeSwapped;
        ans += i;
      }

    // Collect the indices with nums1[i] != nums2[i] that contribute less cost.
    // This can be greedily achieved by iterating from 0 to n - 1.
    for (int i = 0; i < n; ++i) {
      // Since we have over `maxFreq * 2` spaces, `maxFreqNum` can be
      // successfully distributed, so no need to collectextra spaces.
      if (maxFreq * 2 <= shouldBeSwapped)
        break;
      if (nums1[i] == nums2[i])
        continue;
      // The numbers == `maxFreqNum` worsen the result since they increase the
      // `maxFreq`.
      if (nums1[i] == maxFreqNum || nums2[i] == maxFreqNum)
        continue;
      ++shouldBeSwapped;
      ans += i;
    }

    return maxFreq * 2 > shouldBeSwapped ? -1 : ans;
  }
}


or

class Solution {
    public long minimumTotalCost(int[] nums1, int[] nums2) {
        long ans = 0;
        int same = 0;
        int n = nums1.length;
        int[] cnt = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            if (nums1[i] == nums2[i]) {
                ans += i;
                ++same;
                ++cnt[nums1[i]];
            }
        }
        int m = 0, lead = 0;
        for (int i = 0; i < cnt.length; ++i) {
            int t = cnt[i] * 2 - same;
            if (t > 0) {
                m = t;
                lead = i;
                break;
            }
        }
        for (int i = 0; i < n; ++i) {
            if (m > 0 && nums1[i] != nums2[i] && nums1[i] != lead && nums2[i] != lead) {
                ans += i;
                --m;
            }
        }
        return m > 0 ? -1 : ans;
    }
}


or

// moore voting algo

class Solution {
    public long minimumTotalCost(int[] a, int[] b) {
        // repeat is the number of a[i] == b[i]
        int n = a.length;
        int repeat = 0;   
        // s is the sum of i that satisfies a[i] == b[i]
        long s = 0; 
        // val is the only candidate for majority  
        int val = -1;
        int x = 0;   
        for (int i = 0; i < n; ++i) {
            if (a[i] == b[i]) {
                if (x == 0) val = a[i];
                if (val == a[i]) x--;
                else x++;
                repeat++;
                s += i;
            }
        }
        // cnt is the count of val
        int cnt = 0;  
        for (int i = 0; i < n; ++i) {
            if (a[i] == b[i] && a[i] == val)
                cnt++;
        }
        // less than half, so s is the result
        if (cnt * 2 < repeat) return s;
        // the number which need to be swapped externally
        int m = 2 * cnt - repeat;
        for (int i = 0; i < n && m > 0; ++i) {
            // index satisfying this condition can be used for swap
            if (a[i] != val && b[i] != val && a[i] != b[i]) {
                s += i;
                m--;
            }
        }
        if (m > 0) return -1;
        return s;
    }
}

or


class Solution {
    public long minimumTotalCost(int[] nums1, int[] nums2) {
        long res = 0;
        Map<Integer,Integer> map = new HashMap<>();
        for(int i=0;i<nums1.length;i++){
            if(nums1[i]==nums2[i]){
                map.put(nums1[i],map.getOrDefault(nums1[i],0)+1);
                res += i;
            }
        }
        int val = 0 , size = 0;
        for(Integer key:map.keySet()){
            if(map.getOrDefault(key,0) >= map.getOrDefault(val,0))
                val = key;
            size += map.get(key);
        }
        for(int i=0;i<nums1.length;i++){
            if(nums1[i]==val || nums2[i]==val || nums1[i] == nums2[i] || size >= 2 * map.getOrDefault(val,0))
                continue;
            map.put(nums1[i],map.getOrDefault(nums1[i],0)+1);
            size++;
            res += i;
        }
        return 2 * map.getOrDefault(val,0) <= size ? res : -1;
    }
}

or


class Solution {
    public long minimumTotalCost(int[] nums1, int[] nums2) {
        HashMap<Integer, Integer> counts = new HashMap<>();
        int k = 0, m = 0, n = nums1.length; 
        boolean[] operated = new boolean[n];
        long output = 0;
        for (int i = 0; i < n; i++) if (nums1[i] == nums2[i]) {
            operated[i] = true;
            counts.put(nums1[i], counts.getOrDefault(nums1[i], 0) + 1);
            m++;
            output += i;
        }
        for (Map.Entry<Integer, Integer> count : counts.entrySet()) if (count.getValue() > m >> 1) {
            k = count.getKey();
            break;
        }
        if (k > 0) {
            for (int i = 0; i < n && counts.get(k) > m >> 1; i++) if (!operated[i] && nums1[i] != k && nums2[i] != k) {
                m++;
                operated[i] = true;
                output += i;
            }
            if (counts.get(k) > m >> 1) return -1;
        }
        return output;        
    }
}
