http://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden/description/

1326. Minimum Number of Taps to Open to Water a Garden
Hard
Topics
Companies
Hint
There is a one-dimensional garden on the x-axis. The garden starts at the point 0 and ends at the point n. (i.e., the length of the garden is n).

There are n + 1 taps located at points [0, 1, ..., n] in the garden.

Given an integer n and an integer array ranges of length n + 1 where ranges[i] (0-indexed) means the i-th tap can water the area [i - ranges[i], i + ranges[i]] if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.

 

Example 1:


Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]
Example 2:

Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.
 

Constraints:

1 <= n <= 104
ranges.length == n + 1
0 <= ranges[i] <= 100


# java

class Solution {
    public int minTaps(int n, int[] ranges) {
        int[] last = new int[n + 1];
        for (int i = 0; i < n + 1; ++i) {
            int l = Math.max(0, i - ranges[i]), r = i + ranges[i];
            last[l] = Math.max(last[l], r);
        }
        int ans = 0, mx = 0, pre = 0;
        for (int i = 0; i < n; ++i) {
            mx = Math.max(mx, last[i]);
            if (mx <= i) {
                return -1;
            }
            if (pre == i) {
                ++ans;
                pre = mx;
            }
        }
        return ans;
    }
}


or

class Solution {
  public int minTaps(int n, int[] ranges) {
    int[] nums = new int[n + 1];

    for (int i = 0; i <= n; ++i) {
      int l = Math.max(0, i - ranges[i]);
      int r = Math.min(n, i + ranges[i]);
      nums[l] = Math.max(nums[l], r - l);
    }

    int ans = 0;
    int end = 0;
    int farthest = 0;

    for (int i = 0; i < n; i++) {
      farthest = Math.max(farthest, i + nums[i]);
      if (i == end) {
        ++ans;
        end = farthest;
      }
    }

    return end == n ? ans : -1;
  }
}


or

public class Solution {
    public int minTaps(int n, int[] ranges) {
        int[] arr = new int[n + 1];
        Arrays.fill(arr, 0);
        
        for(int i = 0; i < ranges.length; i++) {
            if(ranges[i] == 0) continue;
            int left = Math.max(0, i - ranges[i]);
            arr[left] = Math.max(arr[left], i + ranges[i]);
        }
        
        int end = 0, far_can_reach = 0, cnt = 0;
        for(int i = 0; i <= n; i++) {
            if(i > end) {
                if(far_can_reach <= end) return -1;
                end = far_can_reach;
                cnt++;
            }
            far_can_reach = Math.max(far_can_reach, arr[i]);
        }
        
        return cnt + (end < n ? 1 : 0);
    }
}


or



class Solution {
    public int minTaps(int n, int[] ranges) {
        int min = 0, max = 0, count = 0; // Initialize variables to keep track of the minimum and maximum reach, and the number of taps used.
        while (max < n) { // Continue looping until we cover the entire range from 0 to n.
            for (int i = 0; i < ranges.length; i++) {
                // Check if tap i can cover the current minimum position (min) and reach the current maximum position (max).
                if (i - ranges[i] <= min && i + ranges[i] >= max) {
                    max = i + ranges[i]; // Update the maximum reach if this tap can cover the current range.
                }
            }
            if (max == min) return -1; // If max is not updated in this loop, it means we can't extend the reach further. Return -1 as it's not possible.
            count++; // Increment the count of taps used.
            min = max; // Update the minimum reach to the newly reached maximum position.
        }
        return count; // Return the count of taps used to cover the entire range.
    }
}

or


class Solution {
    public int minTaps(int n, int[] ranges) {
        int[] maxRange = new int[n + 1];
        
        for (int i = 0; i < ranges.length; i++) {
            int left = Math.max(0, i - ranges[i]);
            int right = Math.min(n, i + ranges[i]);
            maxRange[left] = Math.max(maxRange[left], right);
        }
        
        int end = 0;
        int farthest = 0;
        int taps = 0;
        int i = 0;
        
        while (end < n) {
            while (i <= end) {
                farthest = Math.max(farthest, maxRange[i]);
                i++;
            }
            
            if (farthest <= end) {
                return -1;  // Unable to cover the entire garden
            }
            
            end = farthest;
            taps++;
        }
        
        return taps;        
    }
}
