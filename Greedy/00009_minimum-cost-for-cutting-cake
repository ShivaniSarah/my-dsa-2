https://leetcode.com/problems/minimum-cost-for-cutting-cake-ii/description/


3219. Minimum Cost for Cutting Cake II
Hard
Topics
Companies
Hint
There is an m x n cake that needs to be cut into 1 x 1 pieces.

You are given integers m, n, and two arrays:

horizontalCut of size m - 1, where horizontalCut[i] represents the cost to cut along the horizontal line i.
verticalCut of size n - 1, where verticalCut[j] represents the cost to cut along the vertical line j.
In one operation, you can choose any piece of cake that is not yet a 1 x 1 square and perform one of the following cuts:

Cut along a horizontal line i at a cost of horizontalCut[i].
Cut along a vertical line j at a cost of verticalCut[j].
After the cut, the piece of cake is divided into two distinct pieces.

The cost of a cut depends only on the initial cost of the line and does not change.

Return the minimum total cost to cut the entire cake into 1 x 1 pieces.

 

Example 1:

Input: m = 3, n = 2, horizontalCut = [1,3], verticalCut = [5]

Output: 13

Explanation:



Perform a cut on the vertical line 0 with cost 5, current total cost is 5.
Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.
Perform a cut on the horizontal line 0 on 3 x 1 subgrid with cost 1.
Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.
Perform a cut on the horizontal line 1 on 2 x 1 subgrid with cost 3.
The total cost is 5 + 1 + 1 + 3 + 3 = 13.

Example 2:

Input: m = 2, n = 2, horizontalCut = [7], verticalCut = [4]

Output: 15

Explanation:

Perform a cut on the horizontal line 0 with cost 7.
Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.
Perform a cut on the vertical line 0 on 1 x 2 subgrid with cost 4.
The total cost is 7 + 4 + 4 = 15.

 

Constraints:

1 <= m, n <= 105
horizontalCut.length == m - 1
verticalCut.length == n - 1
1 <= horizontalCut[i], verticalCut[i] <= 103



# java


class Solution {
    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
        Arrays.sort(horizontalCut);
        Arrays.sort(verticalCut);
        long ans = 0;
        int i = m - 2, j = n - 2;
        int h = 1, v = 1;
        while (i >= 0 || j >= 0) {
            if (j < 0 || (i >= 0 && horizontalCut[i] > verticalCut[j])) {
                ans += 1L * horizontalCut[i--] * v;
                ++h;
            } else {
                ans += 1L * verticalCut[j--] * h;
                ++v;
            }
        }
        return ans;
    }
}


or

class Solution {
  // Same as 3218. Minimum Cost for Cutting Cake I
  public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
    long cost = 0;
    long sumH = Arrays.stream(horizontalCut).asLongStream().sum();
    long sumV = Arrays.stream(verticalCut).asLongStream().sum();

    Arrays.sort(horizontalCut);
    Arrays.sort(verticalCut);

    for (int i = m - 2, j = n - 2; i >= 0 && j >= 0;)
      if (horizontalCut[i] > verticalCut[j]) {
        cost += horizontalCut[i] + sumV;
        sumH -= horizontalCut[i--];
      } else {
        cost += verticalCut[j] + sumH;
        sumV -= verticalCut[j--];
      }

    return cost + sumH + sumV;
  }
}


or


class Solution {
      public long minimumCost(int m, int n, int[] h, int[] v) {
        Arrays.sort(h);
        Arrays.sort(v);
        long sumH = 0, sumV = 0, res = 0;
        for (int x : h) sumH += x;
        for (int x : v) sumV += x;

        int i = h.length - 1, j = v.length - 1;
        while (i >= 0 && j >= 0) {
            if (h[i] > v[j]) {
                res += h[i] + sumV;
                sumH -= h[i--];
            } else {
                res += v[j] + sumH;
                sumV -= v[j--];
            }
        }
        return res + sumH + sumV;
    }
}


or


// vest


class Solution {
    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
        int[] hCuts =  new int[1001];
        Arrays.fill(hCuts, 0); 
        for (int h: horizontalCut){
            hCuts[h]++;
        }

        int[] vCuts =  new int[1001];
        Arrays.fill(vCuts, 0); 
        for (int v: verticalCut){
            vCuts[v]++;
        }

        // We always initially have 1 horizontal and 1 vertical part 
        int hParts = 1;
        int vParts = 1;
        long sum = 0;
        for (int i = 1000;i>0;i--){
            sum += (long) i * vParts * hCuts[i];
            hParts += hCuts[i];
            
            sum += (long) i * hParts * vCuts[i];
            vParts += vCuts[i];
        }
        return sum;
    }
}

or


class Solution {
    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
        int i = 0, j = 0, hp = 1, vp = 1;
        long cost = 0;

        Arrays.sort(horizontalCut);
        Arrays.sort(verticalCut);

        reverse(horizontalCut);
        reverse(verticalCut);

        while (i < m - 1 && j < n - 1) {
            if (horizontalCut[i] > verticalCut[j]) {
                cost += (1L * vp) * horizontalCut[i++];
                hp++;
            } else {
                cost += (1L * hp) * verticalCut[j++];
                vp++;
            }
        }

        while (i < m - 1) {
            cost += (1L * vp) * horizontalCut[i++];
            hp++;
        }

        while (j < n - 1) {
            cost += (1L * hp) * verticalCut[j++];
            vp++;
        }

        return cost;
    }

    private void reverse(int[] arr) {
        int left = 0, right = arr.length - 1;
        while (left < right) {
            int temp = arr[left];
            arr[left] = arr[right];
            arr[right] = temp;
            left++;
            right--;
        }
    }
}

or

class Solution {
    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {
        Arrays.sort(horizontalCut);
        Arrays.sort(verticalCut);
        int hlen = horizontalCut.length;
        int vlen = verticalCut.length;
        int i = hlen-1, j=vlen-1;
        long res=0;
        while(i>=0 && j>=0){
            if(horizontalCut[i]>=verticalCut[j]){
                res = res + (horizontalCut[i]*(n-j-1));
                i--;
            } else{
                res = res + verticalCut[j]*(m-i-1);
                j--;
            }
        }
        while(i>=0){
            res = res + horizontalCut[i]*(n);
            i--;
        }
        while(j>=0){
            res = res + verticalCut[j]*(m);
            j--;
        }
        return res;
    }
}
