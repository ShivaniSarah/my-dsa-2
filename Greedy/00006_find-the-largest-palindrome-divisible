https://leetcode.com/problems/find-the-largest-palindrome-divisible-by-k/description/


3260. Find the Largest Palindrome Divisible by K
Hard
Topics
Companies
Hint
You are given two positive integers n and k.

An integer x is called k-palindromic if:

x is a palindrome.
x is divisible by k.
Return the largest integer having n digits (as a string) that is k-palindromic.

Note that the integer must not have leading zeros.

 

Example 1:

Input: n = 3, k = 5

Output: "595"

Explanation:

595 is the largest k-palindromic integer with 3 digits.

Example 2:

Input: n = 1, k = 4

Output: "8"

Explanation:

4 and 8 are the only k-palindromic integers with 1 digit.

Example 3:

Input: n = 5, k = 6

Output: "89898"

 

Constraints:

1 <= n <= 105
1 <= k <= 9



# java

// best

class Solution {
  public String largestPalindrome(int n, int k) {
    StringBuilder sb = new StringBuilder();

    switch (k) {
      case 1:
        return "9".repeat(n);
      case 2:
        return n <= 2 ? "8".repeat(n)
                      : sb.append("8") //
                            .append("9".repeat(n - 2))
                            .append("8")
                            .toString();
      case 3:
      case 9:
        return "9".repeat(n);
      case 4:
        return n <= 4 ? "8".repeat(n)
                      : sb.append("88") //
                            .append("9".repeat(n - 4))
                            .append("88")
                            .toString();
      case 5:
        return n <= 2 ? "5".repeat(n)
                      : sb.append("5") //
                            .append("9".repeat(n - 2))
                            .append("5")
                            .toString();
      case 6:
        if (n <= 2) {
          return "6".repeat(n);
        } else if (n % 2 == 1) {
          final int l = n / 2 - 1;
          return sb.append("8")
              .append("9".repeat(l))
              .append("8")
              .append("9".repeat(l))
              .append("8")
              .toString();
        } else {
          final int l = n / 2 - 2;
          return sb.append("8")
              .append("9".repeat(l))
              .append("77")
              .append("9".repeat(l))
              .append("8")
              .toString();
        }
      case 8:
        return n <= 6 ? "8".repeat(n)
                      : sb.append("888") //
                            .append("9".repeat(n - 6))
                            .append("888")
                            .toString();
      default:
        String[] middle = {"",         "7",         "77",         "959",
                           "9779",     "99799",     "999999",     "9994999",
                           "99944999", "999969999", "9999449999", "99999499999"};
        final int q = n / 12;
        final int r = n % 12;
        return sb.append("999999".repeat(q))
            .append(middle[r])
            .append("999999".repeat(q))
            .toString();
    }
  }
}

or

// digit dp


class Solution {
    Tuple[][] path;

    public String largestPalindrome(int n, int k) {
        final int N = n + 1;
        final int[] modulos = new int[N];
        modulos[1] = 1 % k;
        for (int i = 2; i < N; ++i) {
            modulos[i] = modulos[i - 1] * 10;
            modulos[i] %= k;
        }
        Boolean[][] dp = new Boolean[N][k + 1];
        path = new Tuple[N][k + 1];
        int limit = n >> 1;
        assert dfs(n, 0, k, limit, dp, n, modulos);
        int[] res = new int[n + 1];
        int st = n, end = 1;
        Tuple curr = path[n][0];
        while (st >= end) {
            res[st] = curr.x;
            res[end] = curr.x;
            curr = path[curr.y][curr.z];
            st--;
            end++;
        }
        StringBuilder sb = new StringBuilder();
        for (int i = n; i >= 1; --i) {
            sb.append(res[i]);
        }
        return sb.toString();
    }

    private boolean dfs(int index, int modTill, final int k, final int limit, Boolean[][] dp, final int n, final int[] mods) {
        if (index == limit) {
            return modTill == 0;
        }
        if (dp[index][modTill] != null) return dp[index][modTill];
        int end = n - index + 1;
        for (int i = 9; i >= 0; --i) {
            int front = mods[index] * i, back = 0;
            front %= k;
            if (index != end) {
                back = (mods[end] * i);
                back %= k;
            }
            int contribution = ((front % k) + (back) % k + (modTill)) % k;
            boolean poss = dfs(index - 1, contribution, k, limit, dp, n, mods);
            if (poss) {
                path[index][modTill] = new Tuple(i, index - 1, contribution);
                return dp[index][modTill] = true;
            }
        }
        return dp[index][modTill] = false;
    }
}

class Tuple {
    int x;
    int y;
    int z;

    public Tuple(int x, int y, int z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    @Override
    public String toString() {
        return "Tuple{" +
                "x=" + x +
                ", y=" + y +
                ", z=" + z +
                '}';
    }
}


or


// amth


public class Solution {

    // Helper function to check if a string is divisible by 7
    private boolean isDivisibleBy7(String s) {
        int remainder = 0;
        for (char c : s.toCharArray()) {
            remainder = (remainder * 10 + (c - '0')) % 7;
        }
        return remainder == 0;
    }

    public String largestPalindrome(int n, int k) {
        StringBuilder sb = new StringBuilder();

        if (k == 1 || k == 3 || k == 9) {
            for (int i = 0; i < n; i++) {
                sb.append('9');
            }
        } else if (k == 2) {
            for (int i = 0; i < n; i++) {
                if (i == 0 || i == n - 1) {
                    sb.append('8');
                } else {
                    sb.append('9');
                }
            }
        } else if (k == 4) {
            for (int i = 0; i < n; i++) {
                if (i <= 1 || i >= n - 2) {
                    sb.append('8');
                } else {
                    sb.append('9');
                }
            }
        } else if (k == 8) {
            for (int i = 0; i < n; i++) {
                if (i <= 2 || i >= n - 3) {
                    sb.append('8');
                } else {
                    sb.append('9');
                }
            }
        } else if (k == 5) {
            for (int i = 0; i < n; i++) {
                if (i < 1 || i > n - 2) {
                    sb.append('5');
                } else {
                    sb.append('9');
                }
            }
        } else if (k == 6) {
            if (n == 1) {
                sb.append('6');
            } else if (n == 2) {
                sb.append("66");
            } else if (n % 2 == 1) {
                for (int i = 0; i < n; i++) {
                    if (i < 1 || i == n / 2 || i >= n - 1) {
                        sb.append('8');
                    } else {
                        sb.append('9');
                    }
                }
            } else if (n % 2 == 0) {
                for (int i = 0; i < n; i++) {
                    if (i < 1 || i > n - 2) {
                        sb.append('8');
                    } else if (i == n / 2 || i == n / 2 - 1) {
                        sb.append('7');
                    } else {
                        sb.append('9');
                    }
                }
            }
        } else if (k == 7) {
            for (int i = 0; i < n; i++) {
                sb.append('9');
            }

            String ans = sb.toString();

            if (n % 2 == 1) {
                for (char i = '9'; i >= '0'; i--) {
                    ans = ans.substring(0, n / 2) + i + ans.substring(n / 2 + 1);
                    if (isDivisibleBy7(ans)) {
                        return ans;
                    }
                }
            } else {
                for (char i = '9'; i >= '0'; i--) {
                    ans = ans.substring(0, n / 2 - 1) + i + i + ans.substring(n / 2 + 1);
                    if (isDivisibleBy7(ans)) {
                        return ans;
                    }
                }
            }
        }

        return sb.toString();
    }
}

or

class Solution {
    public String largestPalindrome(int n, int k) 
    {
        if(k==1)    
        {
            return String.valueOf("9").repeat(n);
        }
        else if(k==2)
        {
            if(n<=2)
            {
                return String.valueOf("8").repeat(n);
            }
            return "8"+String.valueOf("9").repeat(n-2)+"8";
        }
        else if(k==3)
        {
            return String.valueOf("9").repeat(n);
        }
        else if(k==4)
        {
            if(n<=4)
            {
                return String.valueOf("8").repeat(n);
            }
            return "88" + String.valueOf("9").repeat(n-4) + "88";
        }
        else if(k==5)
        {
            if(n<=2)
            {
                return String.valueOf("5").repeat(n);
            }
            return "5"+String.valueOf("9").repeat(n-2)+"5";
        }
        else if(k==6)
        {
            if(n<=2)
            {
                return String.valueOf("6").repeat(n);
            }
            else if(n==3)
            {
                return "888";
            }
            else if(n==4) 
            {
                return "8778";
            }
            if(n%2==1)
            {
                return "8"+String.valueOf("9").repeat((n/2)-1)+"8"+String.valueOf("9").repeat((n/2)-1)+"8";
            }
            else
            {
                return "8"+String.valueOf("9").repeat((n/2-2))+"77"+String.valueOf("9").repeat((n/2)-2)+"8";
            }
        }
        else if(k==7)
        {
            String[] dic = {
                "", "7", "77", "959", "9779", 
                "99799", "999999", "9994999",
                "99944999", "999969999", "9999449999", "99999499999"
            };
            int l = n / 12; 
            int r = n % 12; 

            StringBuilder nines = new StringBuilder();
            while (l-- > 0) {
                nines.append("999999");
            }

            return nines.toString() + dic[r] + nines.toString();
        }
        else if(k==8)
        {
            if(n<=6)
            {
                return String.valueOf("8").repeat(n);
            }
            return "888" + String.valueOf("9").repeat(n-6) + "888";   
        }
        else if(k==9)
        {
            return String.valueOf("9").repeat(n);   
        }
        return "";
    }
}
