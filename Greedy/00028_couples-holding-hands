https://leetcode.com/problems/couples-holding-hands/description/

765. Couples Holding Hands
Hard
Topics
Companies
Hint
There are n couples sitting in 2n seats arranged in a row and want to hold hands.

The people and seats are represented by an integer array row where row[i] is the ID of the person sitting in the ith seat. The couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2n - 2, 2n - 1).

Return the minimum number of swaps so that every couple is sitting side by side. A swap consists of choosing any two people, then they stand up and switch seats.

 

Example 1:

Input: row = [0,2,1,3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.
Example 2:

Input: row = [3,2,0,1]
Output: 0
Explanation: All couples are already seated side by side.
 

Constraints:

2n == row.length
2 <= n <= 30
n is even.
0 <= row[i] < 2n
All the elements of row are unique.


# java

class Solution {
    private int[] p;

    public int minSwapsCouples(int[] row) {
        int n = row.length >> 1;
        p = new int[n];
        for (int i = 0; i < n; ++i) {
            p[i] = i;
        }
        for (int i = 0; i < n << 1; i += 2) {
            int a = row[i] >> 1, b = row[i + 1] >> 1;
            p[find(a)] = find(b);
        }
        int ans = n;
        for (int i = 0; i < n; ++i) {
            if (i == find(i)) {
                --ans;
            }
        }
        return ans;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }
}


or


// union find


class Solution {
    public int minSwapsCouples(int[] row) {
        if (row == null || row.length < 2) return 0;

        int number = 0;
        DisjointSets disjointSets = new DisjointSets(row.length/2);
        for (int i = 0; i<row.length; i = i+2){
            if (!isCouple(row[i], row[i+1])){
                if (disjointSets.union(row[i]/2, row[i+1]/2)){
                    number++;
                }
            }
        }
        
        return number;
    }

    private boolean isCouple(int i, int j) {
        return (Math.min(i, j) & 1) == 0 && Math.abs(i - j) == 1;
    }
    
    public static class DisjointSets {
        public int[] parent;
        private int n;

        public DisjointSets(int n) {
            this.n = n;
            this.parent = new int[n];
            for (int i = 0; i < n; i++) {
                this.parent[i] = -1;
            }
        }

        public int find(int n) {
            if (parent[n] < 0) return n;
            parent[n] = find(parent[n]);
            return parent[n];
        }

        public boolean union(int x, int y) {
            int xp = find(x), yp = find(y);
            if (xp == yp) {
                return false;
            }

            if (Math.abs(parent[xp]) >= Math.abs(parent[yp])) {
                parent[xp] += parent[yp];
                parent[yp] = xp;
            } else {
                parent[yp] += parent[xp];
                parent[xp] = yp;
            }

            return true;
        }
    }
}


or


class Solution {
    HashMap<Integer,Integer> map = new HashMap<>();
     
    public int minSwapsCouples(int[] row) {
         
        for (int i=0; i<row.length; i++) {
             map.put(row[i],i);
         }
        
         int swaps = 0;
         
        for (int i=0; i<row.length; i+=2) {
             
             int first = row[i];
			 // If first is even, then second has to be first+1
			 // If first is odd, then second has to be first -1
             int second = first + (first%2==0 ? 1 : -1);
             
             if (row[i+1] != second) {
                 swaps++;
                 swap(row, i+1, map.get(second));
             }
         }         
         return swaps;
     }
    
    public void swap(int[] row, int i, int j ) {
        
        int temp = row[i];
        row[i] = row[j];
        row[j]= temp;
        
        map.put(row[i],i);
        map.put(row[j],j);
    }
}


or


class Solution {
    public int minSwapsCouples(int[] row) {
        int n = row.length;
        // hashmap to store current position of each person
        Map<Integer,Integer> position = new HashMap<>();
        for (int i=0; i<n; i++) {
            position.put(row[i], i);
        }

        // Greedily swap if couple is not present
        int swaps = 0;
        for (int i=0; i<=n-2; i+=2) {
            int person1 = row[i];
            int person2;
            if (person1 % 2 == 0) // 0 1 case
                person2 = person1 + 1;
            else // 1 0 case
                person2 = person1 - 1;
            
            // couple not forming, swap 
            if (row[i+1] != person2) {
                swaps++;
                int person2index = position.get(person2);
                // swap person2 with person at index i+1
                position.put(row[i+1], person2index);
                row[person2index] = row[i+1];

                position.put(person2, i+1);
                row[i+1] = person2;
            }
        }
        return swaps;
    }
}

or


class Solution {
    public int minSwapsCouples(int[] row) {
        int n=row.length;
        int swaps=0;
        for(int i=0;i<n;i+=2){
            int couple=row[i]%2==0 ? row[i]+1 : row[i]-1;
            if(row[i+1]!=couple){
                swaps++;
                for(int j=i+1;j<n;j++){
                    if(row[j]==couple){
                        row[j]=row[i+1];
                        row[i+1]=couple;
                        break;
                    }
                }
            }
        }
        return swaps;
    }
}

or


class Solution {
    public int minSwapsCouples(int[] row) {
        int n = row.length;
		// index of each num in row
        int[] pos = new int[n];
        
        for(int i=0; i<n; i++)
            pos[row[i]] = i;
        
        int ans = 0;
        
		// iterate for each pair (skipping next element)
        for(int i=0; i<n; i += 2) {
			// if curr num is even? pair should be next odd num else it should be prev even num
            int actualPair = row[i] + (row[i] % 2 == 0 ? 1 : -1);
            int curPair = row[i+1];
            
            if( curPair != actualPair ) {
				// swap cur pair with actual pair (use pos arr to get pos of actual pair)
                swap(row, i+1, pos[actualPair]);
				
				// update pos arr to update indices of swapped nums
                swap(pos, curPair, actualPair);
				
                ans++;
            }
        }
        return ans;
    }
    
    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
