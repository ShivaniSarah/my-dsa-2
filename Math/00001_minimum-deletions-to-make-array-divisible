https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/description/

You are given two positive integer arrays nums and numsDivide. You can delete any number of elements from nums.

Return the minimum number of deletions such that the smallest element in nums divides all the elements of numsDivide. If this is not possible, return -1.

Note that an integer x divides y if y % x == 0.

Example 1:

Input: nums = [2,3,2,4,3], numsDivide = [9,6,9,3,15]
Output: 2
Explanation: 
The smallest element in [2,3,2,4,3] is 2, which does not divide all the elements of numsDivide.
We use 2 deletions to delete the elements in nums that are equal to 2 which makes nums = [3,4,3].
The smallest element in [3,4,3] is 3, which divides all the elements of numsDivide.
It can be shown that 2 is the minimum number of deletions needed.
Example 2:

Input: nums = [4,3,6], numsDivide = [8,2,6,10]
Output: -1
Explanation: 
We want the smallest element in nums to divide all the elements of numsDivide.
There is no way to delete elements from nums to allow this.
 

Constraints:

1 <= nums.length, numsDivide.length <= 105
1 <= nums[i], numsDivide[i] <= 109


# java

class Solution {
    // This method finds the minimum number of operations required 
    // to make every number in numsDivide divisible by some number 
    // in nums by removing the smallest numbers in nums.
    public int minOperations(int[] nums, int[] numsDivide) {
        // Initialize the greatest common divisor (gcd) of all numbers in numsDivide.
        int gcdValue = 0;
        for (int value : numsDivide) {
            gcdValue = gcd(gcdValue, value);
        }
      
        // Set an initial high value to find the minimum value in nums that divides the gcd without remainder.
        int minDivisibleValue = Integer.MAX_VALUE;
        for (int value : nums) {
            if (gcdValue % value == 0) {
                minDivisibleValue = Math.min(minDivisibleValue, value);
            }
        }
      
        // If no number was found, return -1 as it's not possible to satisfy the condition with any deletions.
        if (minDivisibleValue == Integer.MAX_VALUE) {
            return -1;
        }
      
        // Count the numbers of operations (number of elements smaller than the minDivisibleValue to be deleted).
        int operations = 0;
        for (int value : nums) {
            if (value < minDivisibleValue) {
                operations++;
            }
        }
      
        // Return the number of operations required.
        return operations;
    }

    // Helper method to compute the gcd of two numbers using the Euclidean algorithm.
    private int gcd(int a, int b) {
        // If b is zero, a is the gcd by definition.
        return b == 0 ? a : gcd(b, a % b);
    }
}


or

class Solution {
    public int minOperations(int[] nums, int[] numsDivide) {
        int x = 0;
        for (int v : numsDivide) {
            x = gcd(x, v);
        }
        Arrays.sort(nums);
        for (int i = 0; i < nums.length; ++i) {
            if (x % nums[i] == 0) {
                return i;
            }
        }
        return -1;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}

or

class Solution {
        public int minOperations(int[] A, int[] numsDivide) {
        int g = numsDivide[0], tmp;
        for (int a : numsDivide) {
            while (a > 0) { // g = gcd(g, a)
                tmp = g % a;
                g = a;
                a = tmp;
            }
        }
        Arrays.sort(A);
        for (int i = 0; i < A.length && A[i] <= g; ++i)
            if (g % A[i] == 0)
                return i;
        return -1;
    }
}
