https://leetcode.com/problems/max-points-on-a-line/description/


149. Max Points on a Line
Hard
Topics
Companies
Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.

 

Example 1:


Input: points = [[1,1],[2,2],[3,3]]
Output: 3
Example 2:


Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4
 

Constraints:

1 <= points.length <= 300
points[i].length == 2
-104 <= xi, yi <= 104
All the points are unique.


# java

class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        int ans = 1;
        for (int i = 0; i < n; ++i) {
            int x1 = points[i][0], y1 = points[i][1];
            Map<String, Integer> cnt = new HashMap<>();
            for (int j = i + 1; j < n; ++j) {
                int x2 = points[j][0], y2 = points[j][1];
                int dx = x2 - x1, dy = y2 - y1;
                int g = gcd(dx, dy);
                String k = (dx / g) + "." + (dy / g);
                cnt.put(k, cnt.getOrDefault(k, 0) + 1);
                ans = Math.max(ans, cnt.get(k) + 1);
            }
        }
        return ans;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}


or


class Solution {
      public int maxPoints(int[][] arr) {
        int max = 1;
        for (int i = 0; i < arr.length; i++) {
            HashMap<Double, Integer> map = new HashMap<>();
            for (int j = 0; j < arr.length; j++) {
                if (i == j) continue;
                double slope = (arr[j][0] - arr[i][0]) != 0 ? (arr[j][1] - arr[i][1]) * 1.0 / (arr[j][0] - arr[i][0]) : Integer.MAX_VALUE;
                map.put(slope, map.getOrDefault(slope, 1) + 1);
                max = Math.max(max, map.get(slope));
            }
        }
        return max;
    }
}

or


class Solution {
    public int maxPoints(int[][] points) {
        int ans = 0;
        for (int i = 0; i<points.length; ++i){
            Map<Double, Integer> check = new HashMap<>();
            for (int  j = i+1; j<points.length; ++j){
                double slope;
                if (points[i][0] == points[j][0])
                    slope = Double.MAX_VALUE;
                else{
                    slope = (points[i][1] - points[j][1]) / ((double) (points[i][0] - points[j][0]));
                    if (slope == -0.0)
                        slope = 0.0;
                }
                check.put(slope, check.getOrDefault(slope, 0) + 1);
                ans = Math.max(ans, check.get(slope));
            }
        }
        return ans+1;
    }
}

or


class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        // if there is only one point, the max points will be 1
        if( n == 1) return 1;
        // if there are more points, the max will be at least 2
        int max = 2;
        for(int i=0; i<n-1; i++){
            Map<Double, Integer> tangentMap = new HashMap<>();
            for(int j=0; j<n; j++){
                if(i == j)
                    continue;
                
                int[] p1 = points[i];
                int[] p2 = points[j];
                int x1 = p1[0];
                int y1 = p1[1];
                int x2 = p2[0];
                int y2 = p2[1];
                
                // calculate the tangent..
                double tangent = Math.atan2((y2-y1),(x2-x1));
                int c = tangentMap.getOrDefault(tangent, 0);
                // increase the count..
                tangentMap.put(tangent, c+1);
            }

            // calculate the max points from the tangentMap.
            // To include the point points[i] itself 
            // we added +1 to the values
            max = Math.max(max, Collections.max(tangentMap.values())+1);
        }
        
        return max;
    }
}

or


class Solution {
    public int maxPoints(int[][] points) {
        int max=0;
        // x -> x[0],x[1]  (x1,y1)
        for(int[] x:points)
        {
            Map<Double,Integer> map= new HashMap<>();
            // y -> y[0],y[1]  (x2,y2)
            for(int[] y:points){
                if(x==y)
                  continue;
                
                double slope=0;
                // if (x2 - x1 == 0) 
                if(y[0]-x[0]==0)
                   slope=Double.POSITIVE_INFINITY; 
                else
                   // slope = (y2 - y1) / (x2 - x1)
                   slope = (y[1]-x[1])/(double)(y[0]-x[0]);
                
                map.put(slope,map.getOrDefault(slope,0)+1);
                max=Math.max(max,map.get(slope));
            }
        }
        return max+1;
    }
}
