https://leetcode.com/problems/match-substring-after-replacement/description/


2301. Match Substring After Replacement
Hard
Topics
Companies
Hint
You are given two strings s and sub. You are also given a 2D character array mappings where mappings[i] = [oldi, newi] indicates that you may perform the following operation any number of times:

Replace a character oldi of sub with newi.
Each character in sub cannot be replaced more than once.

Return true if it is possible to make sub a substring of s by replacing zero or more characters according to mappings. Otherwise, return false.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "fool3e7bar", sub = "leet", mappings = [["e","3"],["t","7"],["t","8"]]
Output: true
Explanation: Replace the first 'e' in sub with '3' and 't' in sub with '7'.
Now sub = "l3e7" is a substring of s, so we return true.
Example 2:

Input: s = "fooleetbar", sub = "f00l", mappings = [["o","0"]]
Output: false
Explanation: The string "f00l" is not a substring of s and no replacements can be made.
Note that we cannot replace '0' with 'o'.
Example 3:

Input: s = "Fool33tbaR", sub = "leetd", mappings = [["e","3"],["t","7"],["t","8"],["d","b"],["p","b"]]
Output: true
Explanation: Replace the first and second 'e' in sub with '3' and 'd' in sub with 'b'.
Now sub = "l33tb" is a substring of s, so we return true.

 

Constraints:

1 <= sub.length <= s.length <= 5000
0 <= mappings.length <= 1000
mappings[i].length == 2
oldi != newi
s and sub consist of uppercase and lowercase English letters and digits.
oldi and newi are either uppercase or lowercase English letters or digits.



# java

class Solution {
  public boolean matchReplacement(String s, String sub, char[][] mappings) {
    boolean[][] isMapped = new boolean[128][128];

    for (char[] m : mappings) {
      final char old = m[0];
      final char _new = m[1];
      isMapped[old][_new] = true;
    }

    for (int i = 0; i < s.length(); ++i)
      if (canTransform(s, i, sub, isMapped))
        return true;

    return false;
  }

  private boolean canTransform(final String s, int start, final String sub, boolean[][] isMapped) {
    if (start + sub.length() > s.length())
      return false;

    for (int i = 0; i < sub.length(); ++i) {
      final char a = sub.charAt(i);
      final char b = s.charAt(start + i);
      if (a != b && !isMapped[a][b])
        return false;
    }

    return true;
  }
}


or


class Solution {
    public boolean matchReplacement(String s, String sub, char[][] mappings) {
        Map<Character, Set<Character>> d = new HashMap<>();
        for (var e : mappings) {
            d.computeIfAbsent(e[0], k -> new HashSet<>()).add(e[1]);
        }
        int m = s.length(), n = sub.length();
        for (int i = 0; i < m - n + 1; ++i) {
            boolean ok = true;
            for (int j = 0; j < n && ok; ++j) {
                char a = s.charAt(i + j), b = sub.charAt(j);
                if (a != b && !d.getOrDefault(b, Collections.emptySet()).contains(a)) {
                    ok = false;
                }
            }
            if (ok) {
                return true;
            }
        }
        return false;
    }
}



or



class Solution {
    public boolean matchReplacement(String s, String sub, char[][] mappings) {
        int m = sub.length(), n = s.length();
        final int RANGE = 'z' - '0' + 1;
        
        boolean[][] multiMap = new boolean[RANGE][RANGE];
        for (char[] map : mappings) {
            char from = map[0], to = map[1];
            multiMap[from - '0'][to - '0'] = true;
        }
        // Now, we use a naive string matching algorithm
        // This will run in O(mn) time.
        for (int i = 0; i < n - m + 1; i++) {
            int j = 0;
            while (j < m) {
                char sc = s.charAt(i + j), subc = sub.charAt(j);
                if (sc != subc && !multiMap[subc - '0'][sc - '0'])
                    break;
                j++;
            }
            // Went the whole length of substring, return true:
            if (j == m)
                return true;
        }
        return false;
    }
}


or



class Solution {
    public boolean matchReplacement(String s, String sub, char[][] mappings) {
        Map<Character, Set<Character>> map = new HashMap<>();
        Set<String> allSubStrings = new HashSet<>();
        for(char[] c : mappings){
            map.putIfAbsent(c[0], new HashSet<>());
            map.get(c[0]).add(c[1]);
        }
        int window = sub.length();
        for(int i =0; i<=s.length() - window; i++)
            allSubStrings.add(s.substring(i,i+window));
        for(String possibleSubString : allSubStrings){
            int i = 0;
            
            for(; i<possibleSubString.length(); i++){
                Set<Character> set = map.getOrDefault(sub.charAt(i), new HashSet<>());
                if(sub.charAt(i) == possibleSubString.charAt(i) || 
                set.contains(possibleSubString.charAt(i))) continue;
                else
                    break;
            }
            if(i == possibleSubString.length()) return true;
        }
        return false;
    }
}

or


class Solution {
    public boolean matchReplacement(String s, String sub, char[][] mappings) 
    {
        int n=mappings.length;
        Map<Character,Set<Character>> map=new HashMap<>();
        
        for(int i=0;i<n;i++)
        {
            if(!map.containsKey(mappings[i][0]))
            map.put(mappings[i][0],new HashSet<>());
            
            map.get(mappings[i][0]).add(mappings[i][1]);
        }
        
        for(int i=0;i<s.length()-sub.length()+1;i++)
        {
            int f=-1; int pos=i;
            
            for(int j=0;j<sub.length();j++)
            {
                
                if(s.charAt(pos)==sub.charAt(j))
                pos++;
                
                
                else if(!map.containsKey(sub.charAt(j)) || !map.get(sub.charAt(j)).contains(s.charAt(pos)))
                {
                    f++; break;
                }
                
                else
                pos++;
                    
            }
            
            if(f==-1)
            return true;
        }
        
        return false;
    }
}
