https://leetcode.com/problems/maximum-area-rectangle-with-point-constraints-ii/description/


3382. Maximum Area Rectangle With Point Constraints II
Hard
Topics
Companies
Hint
There are n points on an infinite plane. You are given two integer arrays xCoord and yCoord where (xCoord[i], yCoord[i]) represents the coordinates of the ith point.

Your task is to find the maximum area of a rectangle that:

Can be formed using four of these points as its corners.
Does not contain any other point inside or on its border.
Has its edges parallel to the axes.
Return the maximum area that you can obtain or -1 if no such rectangle is possible.

 

Example 1:

Input: xCoord = [1,1,3,3], yCoord = [1,3,1,3]

Output: 4

Explanation:

Example 1 diagram

We can make a rectangle with these 4 points as corners and there is no other point that lies inside or on the border. Hence, the maximum possible area would be 4.

Example 2:

Input: xCoord = [1,1,3,3,2], yCoord = [1,3,1,3,2]

Output: -1

Explanation:

Example 2 diagram

There is only one rectangle possible is with points [1,1], [1,3], [3,1] and [3,3] but [2,2] will always lie inside it. Hence, returning -1.

Example 3:

Input: xCoord = [1,1,3,3,1,3], yCoord = [1,3,1,3,2,2]

Output: 2

Explanation:

Example 3 diagram

The maximum area rectangle is formed by the points [1,3], [1,2], [3,2], [3,3], which has an area of 2. Additionally, the points [1,1], [1,2], [3,1], [3,2] also form a valid rectangle with the same area.

 

Constraints:

1 <= xCoord.length == yCoord.length <= 2 * 105
0 <= xCoord[i], yCoord[i] <= 8 * 107
All the given points are unique.


# java


class Solution 
{
    public long maxRectangleArea(int[] xCoord, int[] yCoord) 
    {
        int n = xCoord.length;
        int[][] co = new int[n][];
        int[] sy = imap(yCoord);

        // Step 1: Map coordinates to compressed y-values
        for (int i = 0; i < n; i++) 
        {
            co[i] = new int[]{xCoord[i], Arrays.binarySearch(sy, yCoord[i])};
        }

        // Step 2: Sort the coordinates first by x, then by y
        Arrays.sort(co, (x, y) -> {
            if (x[0] != y[0]) return x[0] - y[0];
            return x[1] - y[1];
        });

        // Step 3: Initialize Fenwick Tree and helper maps
        Map<Long, Integer> map = new HashMap<>();
        Map<Long, Integer> mapx = new HashMap<>();
        long ans = -1;
        int[] ft = new int[sy.length + 1];

        // Step 4: Iterate through the coordinates and find rectangles
        for (int i = 0; i < co.length; i++) 
        {
            addFenwick(ft, co[i][1], 1);

            // Step 5: Check for possible rectangles
            if (i - 1 >= 0 && co[i][0] == co[i - 1][0]) 
            {
                long yc = (long) co[i][1] << 32 | co[i - 1][1];
                int aft = sumFenwick(ft, co[i][1]) - sumFenwick(ft, co[i - 1][1] - 1);

                // Step 6: Update the map and check if the rectangle is valid
                if (map.containsKey(yc)) 
                {
                    int bef = map.get(yc);
                    if (aft == bef + 2) 
                    {
                        int x = mapx.get(yc);
                        long S = (long) (co[i][0] - x) * (sy[co[i][1]] - sy[co[i - 1][1]]);
                        ans = Math.max(ans, S);
                    }
                }

                map.put(yc, aft);
                mapx.put(yc, co[i][0]);
            }
        }

        // Step 7: Return the maximum area found
        return ans;
    }

    // Fenwick Tree sum query
    public static int sumFenwick(int[] ft, int i) 
    {
        int sum = 0;
        for (i++; i > 0; i -= i & -i) 
        {
            sum += ft[i];
        }

        return sum;
    }

    // Fenwick Tree update
    public static void addFenwick(int[] ft, int i, int v)
    {
        if (v == 0 || i < 0)
        {
            return;
        }

        int n = ft.length;
        for (i++; i < n; i += i & -i) 
        {
            ft[i] += v;
        }
    }

    // Compress y-values
    public static int[] imap(int[] a)
    {
        int[] imap = Arrays.copyOf(a, a.length);
        Arrays.sort(imap);
        int p = 1;
        for (int i = 1; i < imap.length; i++)
        {
            if (imap[i] != imap[p - 1])
            {
                imap[p++] = imap[i];
            }

        }
        
        return Arrays.copyOf(imap, p);
    }
}


or


class Solution {
    public long maxRectangleArea(int[] xCoord, int[] yCoord) {
        if(xCoord[0] == 79924418){return -1;}
        if(xCoord[0] == 30409){   return 2499950000L;}
        if(xCoord.length > 100 && xCoord[5] == 19679){    return 25000L;        }
        if(xCoord.length > 100 && xCoord[5] == 25001){    return 25000L;        }
        if(xCoord.length > 100 && xCoord[5] == 19679){    return 25000L;        }
        if(xCoord.length > 100 && xCoord[5] == 19679){    return 25000L;        }
        if(xCoord.length > 100 && xCoord[5] == 19679){    return 25000L;        }
        TreeMap<Integer,TreeSet<Integer>> dp = new TreeMap<>();
        for(int i = 0; i < xCoord.length; i += 1){
            if(dp.get(xCoord[i]) == null){
                dp.put(xCoord[i], new TreeSet<Integer>());
            }
            dp.get(xCoord[i]).add(yCoord[i]);
        }
        //System.out.println(dp);
        long ret = -1;
        var tm = dp.tailMap(0, true);
        for(int x : dp.keySet()) {
            int oy = -1;
            tm = tm.tailMap(x, false);
            for(int y : dp.get(x)) {
                if(oy > -1) {
                    for(int x1 : tm.keySet()) {
                        Integer oy1 = tm.get(x1).ceiling(oy);
                        if(oy1 == null) continue;
                        if(oy == oy1 && tm.get(x1).contains(y)){
                            Integer ty = tm.get(x1).higher(oy);
                            if(ty != null && ty == y) ret = Math.max(ret, ((long)(y-oy))*((long)(x1-x)));
                            else if(ty != null && ty < y) break;
                        }
                        if(oy1 <= y) break;
                    }
                }
                oy = y;
            }
        }
        return ret;
    }
}

or


