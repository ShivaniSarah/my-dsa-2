https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard/


1453. Maximum Number of Darts Inside of a Circular Dartboard
Hard
Topics
Companies
Hint
Alice is throwing n darts on a very large wall. You are given an array darts where darts[i] = [xi, yi] is the position of the ith dart that Alice threw on the wall.

Bob knows the positions of the n darts on the wall. He wants to place a dartboard of radius r on the wall so that the maximum number of darts that Alice throws lie on the dartboard.

Given the integer r, return the maximum number of darts that can lie on the dartboard.

 

Example 1:


Input: darts = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.
Example 2:


Input: darts = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).
 

Constraints:

1 <= darts.length <= 100
darts[i].length == 2
-104 <= xi, yi <= 104
All the darts are unique
1 <= r <= 5000


# java


class Point {
  public double x = 0;
  public double y = 0;
  public Point(double x, double y) {
    this.x = x;
    this.y = y;
  }
}

class Solution {
  public int numPoints(int[][] darts, int r) {
    int ans = 1;
    List<Point> points = convertToPoints(darts);

    for (int i = 0; i < points.size(); ++i)
      for (int j = i + 1; j < points.size(); ++j)
        for (Point c : getCircles(points.get(i), points.get(j), r)) {
          int count = 0;
          for (Point point : points)
            if (dist(c, point) - r <= ERR)
              ++count;
          ans = Math.max(ans, count);
        }

    return ans;
  }

  private static final double ERR = 1e-6;

  private List<Point> convertToPoints(int[][] darts) {
    List<Point> points = new ArrayList<>();
    for (int[] dart : darts)
      points.add(new Point(dart[0], dart[1]));
    return points;
  }

  private Point[] getCircles(Point p, Point q, int r) {
    if (dist(p, q) - 2.0 * r > ERR)
      return new Point[] {};
    Point m = new Point((p.x + q.x) / 2, (p.y + q.y) / 2);
    final double distCM = Math.sqrt(Math.pow(r, 2) - Math.pow(dist(p, q) / 2, 2));
    final double alpha = Math.atan2(p.y - q.y, q.x - p.x);
    return new Point[] {new Point(m.x - distCM * Math.sin(alpha), m.y - distCM * Math.cos(alpha)),
                        new Point(m.x + distCM * Math.sin(alpha), m.y + distCM * Math.cos(alpha))};
  }

  private double dist(Point p, Point q) {
    return Math.sqrt(Math.pow(p.x - q.x, 2) + Math.pow(p.y - q.y, 2));
  }
}


or


class Solution {
    public int numPoints(int[][] points, int r) {
        int maxPoints = 1;
        int pointsCount = points.length;
        for (int i = 0; i < pointsCount; i++) {
            for (int j = i + 1; j < pointsCount; j++) {
                double[][] intersections = getIntersections(points[i], points[j], r);
                for (double[] intersection : intersections) {
                    int pointsInCircle = 0;
                    for (int[] point : points) {
                        double distance = distance(intersection, point);
                        if (distance <= r + 1e-5)
                            pointsInCircle++;
                    }
                    maxPoints = Math.max(maxPoints, pointsInCircle);
                }
            }
        }
        return maxPoints;
    }

    public double[][] getIntersections(int[] point1, int[] point2, int radius) {
        int squaredDistance = squaredDistance(point1, point2);
        if (squaredDistance > radius * radius * 4)
            return new double[0][2];
        else if (squaredDistance == radius * radius * 4) {
            double[] intersection = new double[2];
            for (int i = 0; i < 2; i++)
                intersection[i] = (point1[i] + point2[i]) / 2.0;
            double[][] intersections = new double[1][2];
            intersections[0] = intersection;
            return intersections;
        } else {
            double[] midPoint = new double[2];
            for (int i = 0; i < 2; i++)
                midPoint[i] = (point1[i] + point2[i]) / 2.0;
            double remaining = Math.sqrt(radius * radius - squaredDistance / 4.0);
            int difference1 = point1[1] - point2[1];
            int difference2 = point2[0] - point1[0];
            double radian = Math.atan(1.0 * difference2 / difference1);
            double[] intersection0 = {midPoint[0] + remaining * Math.cos(radian), midPoint[1] + remaining * Math.sin(radian)};
            double[] intersection1 = {midPoint[0] - remaining * Math.cos(radian), midPoint[1] - remaining * Math.sin(radian)};
            double[][] intersections = new double[2][2];
            intersections[0] = intersection0;
            intersections[1] = intersection1;
            return intersections;
        }
    }

    public int squaredDistance(int[] point1, int[] point2) {
        return (point2[0] - point1[0]) * (point2[0] - point1[0]) + (point2[1] - point1[1]) * (point2[1] - point1[1]);
    }

    public double distance(double[] point1, int[] point2) {
        return Math.sqrt((point2[0] - point1[0]) * (point2[0] - point1[0]) + (point2[1] - point1[1]) * (point2[1] - point1[1]));
    }
}


or


// angular sweep


class Solution {
    static class Angle implements Comparable<Angle> {
        double a;
        boolean enter;

        Angle(double a, boolean enter) {
            this.a = a;
            this.enter = enter;
        }

        @Override
        public int compareTo(Angle o) {
            //make sure enter is ahead of exit
            return (a > o.a) ? 1 : (a < o.a) ? -1 : enter == o.enter ? 0 : enter ? -1 : 1;
        }
    }

    int getPointsInside(int i, double r, int n, int[][] points, double[][] dis) {
        List<Angle> angles = new ArrayList<>(2 * n);

        for (int j = 0; j < n; j++) {
            if (i != j && dis[i][j] <= 2 * r) {
                // angle between line [i, j] and line [i, center]
                double B = Math.acos(dis[i][j] / (2 * r));
                // angle between line [i, j] and x axis
                double A = Math.atan2(points[j][1] - points[i][1], points[j][0] - points[i][0]);
                double alpha = A - B;
                double beta = A + B;
                angles.add(new Angle(alpha, true));
                angles.add(new Angle(beta, false));
            }
        }

        Collections.sort(angles);

        int count = 1, res = 1;
        for (Angle a : angles) {
            if (a.enter) {
                count++;
            } else {
                count--;
            }

            if (count > res) {
                res = count;
            }
        }

        return res;
    }

    public int numPoints(int[][] points, int r) {
        {
            int n = points.length;
            double[][] dis = new double[n][n];
            for (int i = 0; i < n - 1; i++) {
                for (int j = i + 1; j < n; j++) {
                    dis[i][j] = dis[j][i] = Math.sqrt(Math.pow(points[i][0] - points[j][0], 2) + Math.pow(points[i][1] - points[j][1], 2));
                }
            }

            int ans = 0;
            for (int i = 0; i < n; i++) {
                ans = Math.max(ans, getPointsInside(i, r, n, points, dis));
            }

            return ans;
        }
    }
}


or


class Solution {
    int maximum = 0;
    double EPSILON = 0.001;

    public int numPoints(int[][] darts, int r) {
        for (int i = 0; i < darts.length; i++) calculate(darts, darts[i], r);
        return maximum;
    }

    void calculate(int[][] darts, int[] dart, int r) {
        for (int deg = 0; deg < 360; deg++) {
            double centerX = dart[0]+r*Math.cos(deg);
            double centerY = dart[1]+r*Math.sin(deg);
            int count = checkCircle(centerX, centerY, r, darts);
            if (count > maximum) maximum = count;
        }
    }

    int checkCircle(double x, double y, int r, int[][] darts) {
        int count = 0;
        for (int i = 0; i < darts.length; i++) {
            double dist = Math.sqrt(Math.pow(darts[i][0]-x,2)+Math.pow(darts[i][1]-y,2));
            if (dist - r <= EPSILON) count++;
        }
        return count;
    }
}
