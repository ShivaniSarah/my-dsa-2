https://leetcode.com/problems/stamping-the-grid/description/


2132. Stamping the Grid
Hard
Topics
Companies
Hint
You are given an m x n binary matrix grid where each cell is either 0 (empty) or 1 (occupied).

You are then given stamps of size stampHeight x stampWidth. We want to fit the stamps such that they follow the given restrictions and requirements:

Cover all the empty cells.
Do not cover any of the occupied cells.
We can put as many stamps as we want.
Stamps can overlap with each other.
Stamps are not allowed to be rotated.
Stamps must stay completely inside the grid.
Return true if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return false.

 

Example 1:


Input: grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3
Output: true
Explanation: We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.
Example 2:


Input: grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 
Output: false 
Explanation: There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.
 

Constraints:

m == grid.length
n == grid[r].length
1 <= m, n <= 105
1 <= m * n <= 2 * 105
grid[r][c] is either 0 or 1.
1 <= stampHeight, stampWidth <= 105



# java


public class Solution {
    private static final int FILLED = 1;

    public boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {
        // fill empty space with negative number, which indicates consecutive number of rows that have been empty
        int height = grid.length, width = grid[0].length;
        int[] pre = new int[width];
        Arrays.fill(pre, 1);
        for (int r = 0; r < height; r++) {
            for (int c = 0; c < width; c++) {
                if (grid[r][c] != FILLED) {
                    grid[r][c] = pre[c] == 1 ? -1: Math.max(pre[c] - 1, -stampHeight);
                }
            }
            pre = grid[r];
        }

        // scan each height, and once we find consecutive `grid` of `-stampHeight` of length `stampWidth` or longer,
        // replace the `grid` value with `FILLED`
        for (int r = stampHeight - 1; r < height; r++) {
            int cnt = 0;
            for (int c = 0; c < width; c++) {
                if (grid[r][c] == -stampHeight) cnt++;
                else cnt = 0;
                if (cnt == stampWidth) fill(grid, r, c, stampHeight, stampWidth);
                if (cnt > stampWidth) fill(grid, r, c, stampHeight, 1);
                // width set to 1 for performance; the previous width 0 - cnt would have been already filled
            }
        }

        // check if there is remaining cell of value that is not `FILLED`
        for (int[] ints : grid) {
            for (int v: ints) {
                if (v != FILLED) return false;
            }
        }
        return true;
    }

    private void fill(int[][] grid, int r, int c, int height, int width) {
        for (int i = c - width + 1; i <= c; i++) {
            int j = r;
            while (j >= r - height + 1 && grid[j][i] != FILLED)
                grid[j--][i] = FILLED;
        }
    }
}

or

class Solution {
    public boolean possibleToStamp(int[][] grid, int height, int width) {
        int n = grid[0].length, r, w, stamp;
        int[] h = new int[n], hh = new int[n];
        width = Math.min(width, n);

        for (int[] row : grid) {
            r = w = stamp = 0;

            while (r < width - 1) {
                h[r] = row[r] == 1 ? 0 : h[r] + 1;
                w = h[r] < height ? 0 : w + 1;
                r++;
            }

            for (int l = 0; l < n; l++) {

                if (r < n) {
                    h[r] = row[r] == 1 ? 0 : h[r] + 1;
                    w = h[r] < height ? 0 : w + 1;
                    r++;
                    
                    if (w >= width) stamp = r;
                }

                if (hh[l] == height || (row[l] == 1 && hh[l] > 0)) 
                    return false;

                hh[l] = (l < stamp || row[l] == 1) ? 0 : hh[l] + 1;
            }
        }
        return java.util.Arrays.stream(hh).allMatch(ht -> ht == 0);
    }
}


or



class Solution {
    int[][] hurdleGrid;
    int[][] stampedGrid;
    int[][] stampedGridPrefix;

    private void preparePrefixGrid(int[][] grid, int[][] prefixGrid) {
        int n = grid.length;
        int m = grid[0].length;

        prefixGrid[0][0] = grid[0][0];

        for (int i = 1; i < n; i++) {
            prefixGrid[i][0] = grid[i][0] + prefixGrid[i - 1][0];
        }

        for (int i = 1; i < m; i++) {
            prefixGrid[0][i] = grid[0][i] + prefixGrid[0][i - 1];
        }

        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++) {
                prefixGrid[i][j] =
                    prefixGrid[i][j - 1] + prefixGrid[i - 1][j] - prefixGrid[i - 1][j - 1] + grid[i][j];
            }
        }
    }

    private int hurdlesInStamping(int i, int j, int h, int w) {
        if (i == 0 && j == 0) {
            return hurdleGrid[i + h - 1][j + w - 1];
        }
        if (i == 0) {
            return hurdleGrid[i + h - 1][j + w - 1] - hurdleGrid[i + h - 1][j - 1];
        } else if (j == 0) {
            return hurdleGrid[i + h - 1][j + w - 1] - hurdleGrid[i - 1][j + w - 1];
        }
        return hurdleGrid[i + h - 1][j + w - 1] - hurdleGrid[i + h - 1][j - 1] - hurdleGrid[i - 1][j + w - 1] + hurdleGrid[i - 1][j - 1];
    }

    private void stampGrid(int h, int w) {
        for (int i = 0; i <= stampedGrid.length - h; i++) {
            for (int j = 0; j <= stampedGrid[0].length - w; j++) {
                if (hurdlesInStamping(i, j, h, w) == 0) {
                    stampedGrid[i][j] += 1;
                    if (j + w < stampedGrid[0].length) {
                        stampedGrid[i][j + w] += -1;
                    }
                    if (i + h < stampedGrid.length) {
                        stampedGrid[i + h][j] += -1;
                    }
                    if (j + w < stampedGrid[0].length && i + h < stampedGrid.length) {
                        stampedGrid[i + h][j + w] += 1;
                    }
                }
            }
        }
    }

    private boolean checkAllStamped(int[][] grid, int[][] stampedGridPrefix) {
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 0 && stampedGridPrefix[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }

    public boolean possibleToStamp(int[][] grid, int stampHeight, int stampWidth) {
        int n = grid.length;
        int m = grid[0].length;
        hurdleGrid = new int[n][m];
        stampedGrid = new int[n][m];
        stampedGridPrefix = new int[n][m];
        preparePrefixGrid(grid, hurdleGrid);
        stampGrid(stampHeight, stampWidth);
        preparePrefixGrid(stampedGrid, stampedGridPrefix);
        return checkAllStamped(grid, stampedGridPrefix);
    }
}
