https://leetcode.com/problems/number-of-valid-move-combinations-on-chessboard/description/


2056. Number of Valid Move Combinations On Chessboard
Hard
Topics
Companies
Hint
There is an 8 x 8 chessboard containing n pieces (rooks, queens, or bishops). You are given a string array pieces of length n, where pieces[i] describes the type (rook, queen, or bishop) of the ith piece. In addition, you are given a 2D integer array positions also of length n, where positions[i] = [ri, ci] indicates that the ith piece is currently at the 1-based coordinate (ri, ci) on the chessboard.

When making a move for a piece, you choose a destination square that the piece will travel toward and stop on.

A rook can only travel horizontally or vertically from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), or (r, c-1).
A queen can only travel horizontally, vertically, or diagonally from (r, c) to the direction of (r+1, c), (r-1, c), (r, c+1), (r, c-1), (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
A bishop can only travel diagonally from (r, c) to the direction of (r+1, c+1), (r+1, c-1), (r-1, c+1), (r-1, c-1).
You must make a move for every piece on the board simultaneously. A move combination consists of all the moves performed on all the given pieces. Every second, each piece will instantaneously travel one square towards their destination if they are not already at it. All pieces start traveling at the 0th second. A move combination is invalid if, at a given time, two or more pieces occupy the same square.

Return the number of valid move combinations​​​​​.

Notes:

No two pieces will start in the same square.
You may choose the square a piece is already on as its destination.
If two pieces are directly adjacent to each other, it is valid for them to move past each other and swap positions in one second.
 

Example 1:


Input: pieces = ["rook"], positions = [[1,1]]
Output: 15
Explanation: The image above shows the possible squares the piece can move to.
Example 2:


Input: pieces = ["queen"], positions = [[1,1]]
Output: 22
Explanation: The image above shows the possible squares the piece can move to.
Example 3:


Input: pieces = ["bishop"], positions = [[4,3]]
Output: 12
Explanation: The image above shows the possible squares the piece can move to.
 

Constraints:

n == pieces.length 
n == positions.length
1 <= n <= 4
pieces only contains the strings "rook", "queen", and "bishop".
There will be at most one queen on the chessboard.
1 <= ri, ci <= 8
Each positions[i] is distinct.


# java


class Solution {
  public int countCombinations(String[] pieces, int[][] positions) {
    final int n = pieces.length;
    Set<Long> hashedBoards = new HashSet<>();
    // Stores all possible move combinations for `pieces`. Each element is a
    // vector of moves, one for each piece in the input order. e.g., if pieces =
    // ["rook", "bishop"], one element might be [[1,0], [1,1]], representing a
    // rook moving right and a bishop moving diagonally up-right.
    List<List<int[]>> combMoves = new ArrayList<>();

    getCombMoves(pieces, 0, new ArrayList<>(), combMoves);

    for (List<int[]> combMove : combMoves)
      dfs(positions, n, combMove, (1 << n) - 1, hashedBoards);

    return hashedBoards.size();
  }

  private static Map<String, int[][]> MOVES = new HashMap<>();

  static {
    MOVES.put("rook", new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}});
    MOVES.put("bishop", new int[][] {{1, 1}, {1, -1}, {-1, 1}, {-1, -1}});
    MOVES.put("queen",
              new int[][] {{1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}});
  }

  // Generates all possible combinations of moves for the given pieces.
  private void getCombMoves(String[] pieces, int ithPiece, List<int[]> path,
                            List<List<int[]>> combMoves) {
    if (ithPiece == pieces.length) {
      combMoves.add(new ArrayList<>(path));
      return;
    }

    for (int[] move : MOVES.get(pieces[ithPiece])) {
      path.add(move);
      getCombMoves(pieces, ithPiece + 1, path, combMoves);
      path.remove(path.size() - 1);
    }
  }

  // Performs a depth-first search to explore all possible board states.
  private void dfs(int[][] board, int n, List<int[]> combMove, int activeMask,
                   Set<Long> hashedBoards) {
    if (activeMask == 0)
      return;
    hashedBoards.add(getHash(board));

    for (int nextActiveMask = 1; nextActiveMask < 1 << n; ++nextActiveMask) {
      if ((activeMask & nextActiveMask) != nextActiveMask)
        continue;

      // Copy the board.
      int[][] nextBoard = new int[n][];
      for (int i = 0; i < n; ++i)
        nextBoard[i] = board[i].clone();

      // Move the pieces that are active in this turn.
      for (int i = 0; i < n; ++i)
        if ((nextActiveMask >> i & 1) == 1) {
          nextBoard[i][0] += combMove.get(i)[0];
          nextBoard[i][1] += combMove.get(i)[1];
        }

      // No two or more pieces occupy the same square.
      if (getUniqueSize(nextBoard) < n)
        continue;

      // Every piece needs to be in the boundary.
      if (Arrays.stream(nextBoard).allMatch(p -> 1 <= p[0] && p[0] <= 8 && 1 <= p[1] && p[1] <= 8))
        dfs(nextBoard, n, combMove, nextActiveMask, hashedBoards);
    }
  }

  // Generates a unique hash for the given board state.
  private long getHash(int[][] board) {
    long hash = 0;
    for (int[] pos : board)
      hash = (hash * 64) + (pos[0] - 1 << 3) + (pos[1] - 1);
    return hash;
  }

  // Counts the number of unique positions on the board occupied by the pieces.
  private int getUniqueSize(int[][] board) {
    Set<Integer> unique = new HashSet<>();
    for (int[] pos : board)
      unique.add(pos[0] * 8 + pos[1]);
    return unique.size();
  }
}



or



class Solution {
    int n, m = 9, ans;
    int[][][] dist;
    int[][] end;
    String[] pieces;
    int[][] positions;
    int[][] rookDirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
    int[][] bishopDirs = { {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };
    int[][] queenDirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };

    public int countCombinations(String[] pieces, int[][] positions) {
        n = pieces.length;
        dist = new int[n][m][m];
        end = new int[n][3];
        ans = 0;
        this.pieces = pieces;
        this.positions = positions;

        dfs(0);
        return ans;
    }

    private void dfs(int i) {
        if (i >= n) {
            ans++;
            return;
        }

        int x = positions[i][0], y = positions[i][1];
        resetDist(i);
        dist[i][x][y] = 0;
        end[i] = new int[] {x, y, 0};

        if (checkStop(i, x, y, 0)) {
            dfs(i + 1);
        }

        int[][] dirs = getDirs(pieces[i]);
        for (int[] dir : dirs) {
            resetDist(i);
            dist[i][x][y] = 0;
            int nx = x + dir[0], ny = y + dir[1], nt = 1;

            while (isValid(nx, ny) && checkPass(i, nx, ny, nt)) {
                dist[i][nx][ny] = nt;
                end[i] = new int[] {nx, ny, nt};
                if (checkStop(i, nx, ny, nt)) {
                    dfs(i + 1);
                }
                nx += dir[0];
                ny += dir[1];
                nt++;
            }
        }
    }

    private void resetDist(int i) {
        for (int j = 0; j < m; j++) {
            for (int k = 0; k < m; k++) {
                dist[i][j][k] = -1;
            }
        }
    }

    private boolean checkStop(int i, int x, int y, int t) {
        for (int j = 0; j < i; j++) {
            if (dist[j][x][y] >= t) {
                return false;
            }
        }
        return true;
    }

    private boolean checkPass(int i, int x, int y, int t) {
        for (int j = 0; j < i; j++) {
            if (dist[j][x][y] == t) {
                return false;
            }
            if (end[j][0] == x && end[j][1] == y && end[j][2] <= t) {
                return false;
            }
        }
        return true;
    }

    private boolean isValid(int x, int y) {
        return x >= 1 && x < m && y >= 1 && y < m;
    }

    private int[][] getDirs(String piece) {
        char c = piece.charAt(0);
        return switch (c) {
            case 'r' -> rookDirs;
            case 'b' -> bishopDirs;
            default -> queenDirs;
        };
    }
}


or


class Solution {
    int[][][] all = new int[][][]{
        {{0, 0}, {1, 0}, {-1, 0}, {0, -1}, {0, 1}}, // Rook
        {{0, 0}, {1, -1}, {1, 1}, {-1, 1}, {-1, -1}}, // Bishop
        {{0, 0}, {1, 0}, {-1, 0}, {0, -1}, {0, 1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}} // queen
    };
    int ROOK   = 0;
    int BISHOP = 1;
    int QUEEN  = 2;
    int[] type; // what type does piece[i] has?
    int[][] A; // our current position for each piece
    public int countCombinations(String[] pieces, int[][] positions) {
        A = positions;
        type = new int[pieces.length];
        for (int[] a : A){ // make it 0 index first
            a[0]--; a[1]--;
        }
        for (int i = 0; i < pieces.length; i++){ // assign the type for each piece
            type[i] = switch(pieces[i]){
                case "rook"   : yield ROOK;
                case "bishop" : yield BISHOP;
                default       : yield QUEEN;
            };
        }
        return choose(0, new int[A.length], new int[A.length][2]); // choose all destinations and return the sum of it
    }

    private int choose(int idx, int[] dir, int[][] dest){
        if (idx == A.length){ // now solve for this destination
            return solve(0, dir, dest);
        }
        int ans = 0;
        for (int i = 0; i < all[type[idx]].length; i++){ // first we choose direction
            int[] d = all[type[idx]][i];
            int nx = A[idx][0] + d[0], ny = A[idx][1] + d[1];
            dir[idx] = i;
            while(nx >= 0 && nx < 8 && ny >= 0 && ny < 8){ // then we move the destination along that direction for each piece
                dest[idx][0] = nx; // we can add a check to make sure no dup dest, but it is not really faster.
                dest[idx][1] = ny;
                ans += choose(idx+1, dir, dest);
                if (i == 0){ // i = 0 -> needs to break because it doesn't move
                    break;
                }
                nx += d[0];
                ny += d[1];
            }
        }
        return ans;
    }

    private int solve(int idx, int[] dir, int[][] dest){
        if (idx == A.length){ // at the end of 1 second.
            boolean ok = true;
            for (int i = 0; i < A.length && ok; i++){ // check if all pieces have reached the dest
                ok &= A[i][0] == dest[i][0] && A[i][1] == dest[i][1];
            }
            return ok? 1 : solve(0, dir, dest); // if yes, return 1, if not, go for the next second.
        }
        int j = dest[idx][0] == A[idx][0] && dest[idx][1] == A[idx][1]? 0 : dir[idx]; // changed dir to 0 if it is at the destination, so it doesn't move
        int[] d = all[type[idx]][j];
        A[idx][0] += d[0];
        A[idx][1] += d[1];
        boolean bad = false;
        for (int i = 0; i < idx && !bad; i++){ // check if it collides with any previous pieces
            bad |= A[idx][0] == A[i][0] && A[idx][1] == A[i][1];
        }
        int ans = bad? 0 : solve(idx+1, dir, dest); // if it does, return 0, if not, solve for the next piece.
        A[idx][0] -= d[0];
        A[idx][1] -= d[1];
        return ans;
    }
}
