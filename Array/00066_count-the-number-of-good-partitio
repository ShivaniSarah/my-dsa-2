https://leetcode.com/problems/count-the-number-of-good-partitions/description/

2963. Count the Number of Good Partitions
Hard
Topics
Companies
Hint
You are given a 0-indexed array nums consisting of positive integers.

A partition of an array into one or more contiguous subarrays is called good if no two subarrays contain the same number.

Return the total number of good partitions of nums.

Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4]
Output: 8
Explanation: The 8 possible good partitions are: ([1], [2], [3], [4]), ([1], [2], [3,4]), ([1], [2,3], [4]), ([1], [2,3,4]), ([1,2], [3], [4]), ([1,2], [3,4]), ([1,2,3], [4]), and ([1,2,3,4]).
Example 2:

Input: nums = [1,1,1,1]
Output: 1
Explanation: The only possible good partition is: ([1,1,1,1]).
Example 3:

Input: nums = [1,2,1,3]
Output: 2
Explanation: The 2 possible good partitions are: ([1,2,1], [3]) and ([1,2,1,3]).
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


# java

class Solution {
    public int numberOfGoodPartitions(int[] nums) {
        Map<Integer, Integer> last = new HashMap<>();
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            last.put(nums[i], i);
        }
        final int mod = (int) 1e9 + 7;
        int j = -1;
        int k = 0;
        for (int i = 0; i < n; ++i) {
            j = Math.max(j, last.get(nums[i]));
            k += i == j ? 1 : 0;
        }
        return qpow(2, k - 1, mod);
    }

    private int qpow(long a, int n, int mod) {
        long ans = 1;
        for (; n > 0; n >>= 1) {
            if ((n & 1) == 1) {
                ans = ans * a % mod;
            }
            a = a * a % mod;
        }
        return (int) ans;
    }
}


or


class Solution {
  public int numberOfGoodPartitions(int[] nums) {
    final int MOD = 1_000_000_007;
    int ans = 1;

    // lastSeen[num] := the index of the last time `num` appeared
    HashMap<Integer, Integer> lastSeen = new HashMap<>();

    for (int i = 0; i < nums.length; ++i)
      lastSeen.put(nums[i], i);

    // Track the maximum right index of each running partition by ensuring that
    // the first and last occurrences of a number fall within the same
    // partition.
    int maxRight = 0;
    for (int i = 0; i < nums.length; ++i) {
      if (i > maxRight)
        // Start a new partition that starts from nums[i].
        // Each partition doubles the total number of good partitions.
        ans = (int) ((ans * 2L) % MOD);
      maxRight = Math.max(maxRight, lastSeen.get(nums[i]));
    }

    return ans;
  }
}

or


class Solution {
    static int mod = 1000000007;
    public int numberOfGoodPartitions(int[] nums) {
        HashMap<Integer,Integer> mp = new HashMap<>();
        int n = nums.length;
        for(int i = 0; i < n; i++){
            mp.put(nums[i],i);
        }

        int i = 0;
        int j = 0;
        int cnt = 0;
        while(i<n){
            j = Math.max(j, mp.get(nums[i]));
            if(i==j){
                cnt++;
            }
            i++;
        }

        int res = 1;
        for(int k = 1; k < cnt; k++){
            res = res * 2;
            res %= mod;
        }
    
        return res;
    }
}
