https://leetcode.com/problems/number-of-subarrays-with-and-value-of-k/description/

3209. Number of Subarrays With AND Value of K
Hard
Topics
Companies
Hint
Given an array of integers nums and an integer k, return the number of subarrays of nums where the bitwise AND of the elements of the subarray equals k.

 

Example 1:

Input: nums = [1,1,1], k = 1

Output: 6

Explanation:

All subarrays contain only 1's.

Example 2:

Input: nums = [1,1,2], k = 1

Output: 3

Explanation:

Subarrays having an AND value of 1 are: [1,1,2], [1,1,2], [1,1,2].

Example 3:

Input: nums = [1,2,3], k = 2

Output: 2

Explanation:

Subarrays having an AND value of 2 are: [1,2,3], [1,2,3].

 

Constraints:

1 <= nums.length <= 105
0 <= nums[i], k <= 109


 # java

class Solution {
    public long countSubarrays(int[] nums, int k) {
        long ans = 0;
        Map<Integer, Integer> pre = new HashMap<>();
        for (int x : nums) {
            Map<Integer, Integer> cur = new HashMap<>();
            for (var e : pre.entrySet()) {
                int y = e.getKey(), v = e.getValue();
                cur.merge(x & y, v, Integer::sum);
            }
            cur.merge(x, 1, Integer::sum);
            ans += cur.getOrDefault(k, 0);
            pre = cur;
        }
        return ans;
    }
}


or


class Solution {
  // Similar to 1521. Find a Value of a Mysterious Function Closest to Target
  public long countSubarrays(int[] nums, int k) {
    long ans = 0;
    // the counter of all the values of subarrays that end in the previous
    // number
    Map<Integer, Integer> prev = new HashMap<>();

    for (final int num : nums) {
      Map<Integer, Integer> curr = new HashMap<>() {
        { put(num, 1); }
      };
      // Extend each subarray that ends in the previous number. Due to
      // monotonicity of the AND operation, the size of `curr` will be at most
      // Integer.bitCount(num) + 1.
      for (Map.Entry<Integer, Integer> entry : prev.entrySet()) {
        final int val = entry.getKey();
        final int freq = entry.getValue();
        curr.merge(val & num, freq, Integer::sum);
      }
      ans += curr.getOrDefault(k, 0);
      prev = curr;
    }

    return ans;
  }
}
