https://leetcode.com/problems/subsequences-with-a-unique-middle-mode-i/

3395. Subsequences with a Unique Middle Mode I
Hard
Topics
Companies
Hint
Given an integer array nums, find the number of subsequences of size 5 of nums with a unique middle mode.

Since the answer may be very large, return it modulo 109 + 7.

A mode of a sequence of numbers is defined as the element that appears the maximum number of times in the sequence.

A sequence of numbers contains a unique mode if it has only one mode.

A sequence of numbers seq of size 5 contains a unique middle mode if the middle element (seq[2]) is a unique mode.

 

Example 1:

Input: nums = [1,1,1,1,1,1]

Output: 6

Explanation:

[1, 1, 1, 1, 1] is the only subsequence of size 5 that can be formed, and it has a unique middle mode of 1. This subsequence can be formed in 6 different ways, so the output is 6. 

Example 2:

Input: nums = [1,2,2,3,3,4]

Output: 4

Explanation:

[1, 2, 2, 3, 4] and [1, 2, 3, 3, 4] each have a unique middle mode because the number at index 2 has the greatest frequency in the subsequence. [1, 2, 2, 3, 3] does not have a unique middle mode because 2 and 3 appear twice.

Example 3:

Input: nums = [0,1,2,3,4,5,6,7,8]

Output: 0

Explanation:

There is no subsequence of length 5 with a unique middle mode.

 

Constraints:

5 <= nums.length <= 1000
-109 <= nums[i] <= 109


# java


class Solution {
  public int subsequencesWithMiddleMode(int[] nums) {
    int n = nums.length;
    long ans = 0;
    Map<Integer, Integer> left = new HashMap<>();
    Map<Integer, Integer> right = new HashMap<>();

    for (int i = 0; i < 2; ++i)
      left.merge(nums[i], 1, Integer::sum);

    for (int i = 2; i < n; ++i)
      right.merge(nums[i], 1, Integer::sum);

    for (int i = 2; i < n - 2; ++i) {
      final int num = nums[i];
      if (right.merge(num, -1, Integer::sum) == 0)
        right.remove(num);

      final int leftCount = left.getOrDefault(num, 0);
      final int rightCount = right.getOrDefault(num, 0);
      final int leftOther = i - leftCount;
      final int rightOther = n - 1 - i - rightCount;

      // count[mode] = 5 -- [a a] a [a a]
      ans = (ans + nC2(leftCount) * nC2(rightCount)) % MOD;

      // count[mode] = 4 -- [a a] a [a ?]
      ans = (ans + nC2(leftCount) * rightCount % MOD * rightOther % MOD) % MOD;

      // count[mode] = 4 -- [a ?] a [a a]
      ans = (ans + leftCount * leftOther % MOD * nC2(rightCount) % MOD) % MOD;

      // count[mode] = 3 -- [a a] a [? ?]
      ans = (ans + nC2(leftCount) * nC2(rightOther) % MOD) % MOD;

      // count[mode] = 3 -- [? ?] a [a a]
      ans = (ans + nC2(leftOther) * nC2(rightCount) % MOD) % MOD;

      // count[mode] = 3 -- [a ?] a [a ?]
      ans = (ans + leftCount * leftOther % MOD * rightCount % MOD * rightOther % MOD) % MOD;

      // count[mode] = 2 -- [a ?] a [? ?]
      ans = (ans + leftCount * calc(num, leftOther, rightOther, left, right) % MOD) % MOD;

      // count[mode] = 2 -- [? ?] a [a ?]
      ans = (ans + rightCount * calc(num, rightOther, leftOther, right, left) % MOD) % MOD;

      // Update left map
      left.merge(num, 1, Integer::sum);
    }

    return (int) (ans % MOD);
  }

  private static final int MOD = 1_000_000_007;

  // Returns C(n, 2)
  private long nC2(long n) {
    return n * (n - 1) / 2 % MOD;
  }

  // Returns the count of subsequences that have 'a' as the middle number, where
  // invalid subsequences are excluded
  private long calc(int a, long other1, long other2, Map<Integer, Integer> count1,
                    Map<Integer, Integer> count2) {
    // [a ?] a [? ?]
    long res = other1 * nC2(other2) % MOD;

    for (Map.Entry<Integer, Integer> entry : count1.entrySet()) {
      final int b = entry.getKey();
      final long b1 = entry.getValue();
      if (b == a)
        continue;
      final long b2 = count2.getOrDefault(b, 0);
      // Exclude triples -- [a b] a [b b]
      res = (res - b1 * nC2(b2) % MOD + MOD) % MOD;
      // Exclude doubles -- [a b] a [b ?]
      res = (res - b1 * b2 % MOD * (other2 - b2) % MOD + MOD) % MOD;
    }

    for (Map.Entry<Integer, Integer> entry : count2.entrySet()) {
      final int b = entry.getKey();
      final long b2 = entry.getValue();
      if (b == a)
        continue;
      final long b1 = count1.getOrDefault(b, 0);
      // Exclude doubles -- [a ?] a [b b]
      res = (res - (other1 - b1) * nC2(b2) % MOD + MOD) % MOD;
    }

    return res;
  }
}


or


class Solution {
  public int subsequencesWithMiddleMode(int[] nums) {
    int ans = 0;
    Map<Integer, Integer> p = new HashMap<>(); // prefix counter
    Map<Integer, Integer> s = new HashMap<>(); // suffix counter

    for (final int num : nums)
      s.merge(num, 1, Integer::sum);

    for (int i = 0; i < nums.length; ++i) {
      final int a = nums[i];
      s.merge(a, -1, Integer::sum);

      final int l = i;
      final int r = nums.length - i - 1;

      final int pa = p.getOrDefault(a, 0);
      final int sa = s.get(a);

      // Start with all possible subsequences with `a` as the middle number.
      ans = (int) ((ans + (long) nC2(l) * nC2(r)) % MOD);

      // Minus cases where frequency of 'a' is 1, so it's not a mode.
      ans = (int) ((ans - (long) nC2(l - pa) * nC2(r - sa)) % MOD);

      for (final int b : getUniqueNums(p, s)) {
        if (b == a)
          continue;

        final int pb = p.getOrDefault(b, 0);
        final int sb = s.get(b);

        // Minus cases where the middle number is not a "unique" mode
        int subtract = 0;

        // [a b] a [b c]
        subtract = (int) ((subtract + (long) pa * pb * sb * (r - sa - sb)) % MOD);

        // [b c] a [a b]
        subtract = (int) ((subtract + (long) sa * sb * pb * (l - pa - pb)) % MOD);

        // [b b] a [a c]
        subtract = (int) ((subtract + (long) nC2(pb) * sa * (r - sa - sb)) % MOD);

        // [a c] a [b b]
        subtract = (int) ((subtract + (long) nC2(sb) * pa * (l - pa - pb)) % MOD);

        // [b b] a [a b]
        subtract = (int) ((subtract + (long) nC2(pb) * sa * sb) % MOD);

        // [a b] a [b b]
        subtract = (int) ((subtract + (long) nC2(sb) * pa * pb) % MOD);

        ans = (int) ((ans - subtract + MOD) % MOD);
      }

      p.merge(a, 1, Integer::sum);
    }

    return (ans + MOD) % MOD;
  }

  private static final int MOD = 1_000_000_007;

  private int nC2(long n) {
    return (int) (n * (n - 1) / 2 % MOD);
  }

  private Set<Integer> getUniqueNums(final Map<Integer, Integer> p, final Map<Integer, Integer> s) {
    final Set<Integer> uniqueNums = new HashSet<>();
    uniqueNums.addAll(p.keySet());
    uniqueNums.addAll(s.keySet());
    return uniqueNums;
  }
}




or


// Recall from solution 1 that after counting all the subsequences with `a` as
// the middle mode number, we need to subtract the cases where `a` is not a
// unique mode or not a mode.
//
// To avoid the need of looping through all numbers that are not `a`, we can
// maintain the sums that are not related to `a` in the loop.
//
// So, during the simplification of the formula, keep the running sums of
// pss, spp, pp, ss, and ps as the first item.
// (for cleaner notation, abbreviate p[b] and s[b] to just p and s)
//
//   sum(b != a) (p[a] * p * s) * (r - s[a] - s)
//             + (s[a] * s * p) * (l - p[a] - p)
//             + (p, 2) * s[a] * (r - s[a])
//             + (s, 2) * p[a] * (l - p[a])
//
//   sum(b != a) (p * s) * (p[a] * (r - s[a])) + (p * s^2) * (-p[a])
//             + (s * p) * (s[a] * (l - p[a])) + (s * p^2) * (-s[a])
//             + (p^2 - p) * (s[a] * (r - s[a]) / 2)
//             + (s^2 - s) * (p[a] * (l - p[a]) / 2)

class Solution {
  public int subsequencesWithMiddleMode(int[] nums) {
    int ans = 0;
    Map<Integer, Integer> p = new HashMap<>(); // prefix counter
    Map<Integer, Integer> s = new HashMap<>(); // suffix counter

    for (final int num : nums)
      s.merge(num, 1, Integer::sum);

    long pss = 0;
    long spp = 0;
    long pp = 0;
    long ss = 0;
    long ps = 0;

    for (final int freq : s.values())
      ss = (ss + (long) freq * freq) % MOD;

    for (int i = 0; i < nums.length; ++i) {
      final int a = nums[i];
      long sa = s.get(a);
      final long pa = p.getOrDefault(a, 0);

      // Update running sums after decrementing s[a]
      pss = (pss + pa * (-sa * sa + (sa - 1) * (sa - 1))) % MOD;
      spp = (spp - pa * pa) % MOD; // (-sa + (sa - 1)) * pa * pa
      ss = (ss - sa * sa + (sa - 1) * (sa - 1)) % MOD;
      ps = (ps - pa) % MOD; // -pa * (-sa + (sa - 1))

      s.merge(a, -1, Integer::sum);
      sa = s.get(a);

      final int l = i;
      final int r = nums.length - i - 1;

      // Start with all possible subsequences with `a` as the middle number
      ans = (int) ((ans + (long) nC2(l) * nC2(r)) % MOD);

      // Minus cases where frequency of `a` is 1, so it's not a mode
      ans = (int) ((ans - (long) nC2(l - pa) * nC2(r - sa)) % MOD);

      // Minus the values where `b != a`
      final long pss_ = (pss - pa * sa * sa) % MOD;
      final long spp_ = (spp - sa * pa * pa) % MOD;
      final long pp_ = (pp - pa * pa) % MOD;
      final long ss_ = (ss - sa * sa) % MOD;
      final long ps_ = (ps - pa * sa) % MOD;
      final long p_ = l - pa;
      final long s_ = r - sa;

      // Minus cases where `a` is not a "unique" mode or not a mode
      long subtract = 0;
      subtract = (subtract + ps_ * (pa * (r - sa))) % MOD;
      subtract = (subtract + pss_ * (-pa)) % MOD;
      subtract = (subtract + ps_ * (sa * (l - pa))) % MOD;
      subtract = (subtract + spp_ * (-sa)) % MOD;
      subtract = (subtract + (pp_ - p_) * sa * (r - sa) / 2) % MOD;
      subtract = (subtract + (ss_ - s_) * pa * (l - pa) / 2) % MOD;
      ans = (int) ((ans - subtract + MOD) % MOD);

      // Update running sums after incrementing p[a]
      pss = (pss + sa * sa) % MOD; // (-pa + (pa + 1)) * sa * sa
      spp = (spp + sa * (-pa * pa + (pa + 1) * (pa + 1))) % MOD;
      pp = (pp - pa * pa + (pa + 1) * (pa + 1)) % MOD;
      ps = (ps + sa) % MOD; // (-pa + (pa + 1)) * sa

      p.merge(a, 1, Integer::sum);
    }

    return (int) ((ans + MOD) % MOD);
  }

  private static final int MOD = 1_000_000_007;

  // Returns C(n, 2)
  private long nC2(long n) {
    return n * (n - 1) / 2 % MOD;
  }
}


or

class Solution {
    public int subsequencesWithMiddleMode(int[] nums) {
        int n = nums.length;
        final int mod = 1_000_000_007;
        Map<Integer, Long> pref = new HashMap<>();
        Map<Integer, Long> suff = new HashMap<>();
        Map<Integer, Long> pf = new HashMap<>();

        for (int num : nums) {
            suff.put(num, suff.getOrDefault(num, 0L) + 1);
        }

        long[] nC2 = new long[n + 1];
        for (int i = 1; i <= n; i++) {
            nC2[i] = nC2[i - 1] + (i - 1);
        }

        long sum1 = 0;
        long sum2 = 0;
        for (long cnt : suff.values()) {
            sum2 += nC2[(int) cnt];
        }
        long sum3 = 0;
        long sum4 = 0;
        long sum5 = 0;

        long res = 0;
        for (int i = 0; i < n; i++) {
            int mid = nums[i];

            sum1 -= nC2[pref.getOrDefault(mid, 0L).intValue()];
            sum2 -= nC2[suff.getOrDefault(mid, 0L).intValue()];
            sum3 -= pf.getOrDefault(mid, 0L);
            sum4 -= pf.getOrDefault(mid, 0L) * pref.getOrDefault(mid, 0L);
            sum5 -= pf.getOrDefault(mid, 0L) * suff.getOrDefault(mid, 0L);

            suff.put(mid, suff.get(mid) - 1);
            long l = i - pref.getOrDefault(mid, 0L);
            long r = n - i - 1 - suff.getOrDefault(mid, 0L);

            res += pref.getOrDefault(mid, 0L) * l * (nC2[n - i - 1] - sum2)
                    + (nC2[i] - sum1) * r * suff.getOrDefault(mid, 0L);
            res -= (pref.getOrDefault(mid, 0L) * r + l * suff.getOrDefault(mid, 0L)) * sum3;
            res += pref.getOrDefault(mid, 0L) * sum5 + sum4 * suff.getOrDefault(mid, 0L);
            res += (nC2[pref.getOrDefault(mid, 0L).intValue()] + nC2[(int) l] - nC2[i]) * nC2[n - i - 1];
            res += nC2[i] * (nC2[suff.getOrDefault(mid, 0L).intValue()] + nC2[(int) r]);
            res -= nC2[(int) l] * nC2[(int) r];

            res %= mod;

            pf.put(mid, pf.getOrDefault(mid, 0L) - pref.getOrDefault(mid, 0L) + suff.getOrDefault(mid, 0L));
            pref.put(mid, pref.getOrDefault(mid, 0L) + 1);

            sum1 += nC2[pref.get(mid).intValue()];
            sum2 += nC2[suff.get(mid).intValue()];
            sum3 += pf.get(mid);
            sum4 += pf.get(mid) * pref.get(mid);
            sum5 += pf.get(mid) * suff.get(mid);
        }
        return (int) (res % mod);
    }
}
