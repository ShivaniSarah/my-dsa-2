https://leetcode.com/problems/minimum-operations-to-make-array-elements-zero/

3495. Minimum Operations to Make Array Elements Zero
Hard
Topics
Companies
Hint
You are given a 2D array queries, where queries[i] is of the form [l, r]. Each queries[i] defines an array of integers nums consisting of elements ranging from l to r, both inclusive.

In one operation, you can:

Select two integers a and b from the array.
Replace them with floor(a / 4) and floor(b / 4).
Your task is to determine the minimum number of operations required to reduce all elements of the array to zero for each query. Return the sum of the results for all queries.

 

Example 1:

Input: queries = [[1,2],[2,4]]

Output: 3

Explanation:

For queries[0]:

The initial array is nums = [1, 2].
In the first operation, select nums[0] and nums[1]. The array becomes [0, 0].
The minimum number of operations required is 1.
For queries[1]:

The initial array is nums = [2, 3, 4].
In the first operation, select nums[0] and nums[2]. The array becomes [0, 3, 1].
In the second operation, select nums[1] and nums[2]. The array becomes [0, 0, 0].
The minimum number of operations required is 2.
The output is 1 + 2 = 3.

Example 2:

Input: queries = [[2,6]]

Output: 4

Explanation:

For queries[0]:

The initial array is nums = [2, 3, 4, 5, 6].
In the first operation, select nums[0] and nums[3]. The array becomes [0, 3, 4, 1, 6].
In the second operation, select nums[2] and nums[4]. The array becomes [0, 3, 1, 1, 1].
In the third operation, select nums[1] and nums[2]. The array becomes [0, 0, 0, 1, 1].
In the fourth operation, select nums[3] and nums[4]. The array becomes [0, 0, 0, 0, 0].
The minimum number of operations required is 4.
The output is 4.

 

Constraints:

1 <= queries.length <= 105
queries[i].length == 2
queries[i] == [l, r]
1 <= l < r <= 109


# java


class Solution {
  public long minOperations(int[][] queries) {
    long ans = 0;
    for (int[] query : queries) {
      final int l = query[0];
      final int r = query[1];
      ans += (getOperations(r) - getOperations(l - 1) + 1) / 2;
    }
    return ans;
  }

  // Returns the number of operations required for [1, n].
  private long getOperations(int n) {
    long res = 0;
    int ops = 0;
    for (int powerOfFour = 1; powerOfFour <= n; powerOfFour *= 4) {
      final int l = powerOfFour;
      final int r = Math.min(n, powerOfFour * 4 - 1);
      res += (long) (r - l + 1) * ++ops;
    }
    return res;
  }
}


or


class Solution {
    public long minOperations(int[][] queries) {
        long ans = 0;
        for (int i = 0; i < queries.length; i++) {
            long start = queries[i][0], end = queries[i][1];
            long ops = 0;
            for (long d = 1, prev = 1; d < 17; d++) {
                long cur = prev * 4;
                // Find the intersection between the query interval [start, end] and [prev, cur - 1]
                long l = Math.max(start, prev);
                long r = Math.min(end, cur - 1);
                if (r >= l) {
                    ops += (r - l + 1) * d;
                }
                prev = cur;
            }
            // Each operation handles 2 steps, so we take ceil(ops / 2)
            ans += (ops + 1) / 2;
        }
        return ans;
    }
}


or



class Solution {
    public long minOperations(int[][] queries) {
        long ans = 0;
        long[] p = new long[16];
        p[0] = 1;

        // Precompute powers of 4 up to 4^15
        for (int i = 1; i < 16; i++) p[i] = p[i - 1] * 4;

        for (int[] q : queries) {
            long l = q[0], r = q[1], sum = 0;
            // Iterate over powers of 4 to compute operations
            for (int t = 1; t <= 15; t++) {
                long L = Math.max(l, p[t - 1]);
                long R = Math.min(r, p[t] - 1);
                if (L <= R) sum += t * (R - L + 1);
            }ans += (sum + 1) / 2;
        }return ans;
    }
}

or


class Solution {
    long getCount(long n){
    long cnt = 1 + ((n == 0)?0: (long)(Math.log(n) / Math.log(4)));   // this is just 1 + log n to base 4 i.e log(a)/log(b) = log(n)/log(4)
    long sumOfGp = ((cnt <= 0)?0: (long)((Math.pow(4, cnt) - 1)/3));  // sum of gp = a.(r^t -1)/(r - 1) and here a = 1, r = 4 and t = cnt
    return cnt * (n + 1) - sumOfGp;                                   // apply the formula we deduced
} 

long minOperations(int[][] queries) {
    long ans = 0;
    for(int[] q: queries) ans += (getCount(q[1]) - getCount(q[0]-1) + 1)/2;
    return ans;
}
}
