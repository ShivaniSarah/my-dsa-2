https://leetcode.com/problems/number-of-different-subsequences-gcds/description/


1819. Number of Different Subsequences GCDs
Hard
Topics
Companies
Hint
You are given an array nums that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

For example, the GCD of the sequence [4,6,16] is 2.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
Return the number of different GCDs among all non-empty subsequences of nums.

 

Example 1:


Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all the non-empty subsequences and their GCDs.
The different GCDs are 6, 10, 3, 2, and 1.
Example 2:

Input: nums = [5,15,40,5,6]
Output: 7
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 2 * 105


# java


class Solution {
  public int countDifferentSubsequenceGCDs(int[] nums) {
    final int maxNum = Arrays.stream(nums).max().getAsInt();
    int ans = 0;
    // factor[i] := the GCD of numbers having factor i
    int[] factor = new int[maxNum + 1];

    for (final int num : nums)
      for (int i = 1; i * i <= num; ++i)
        if (num % i == 0) {
          final int j = num / i;
          factor[i] = gcd(factor[i], num);
          factor[j] = gcd(factor[j], num);
        }

    for (int i = 1; i <= maxNum; ++i)
      if (factor[i] == i)
        ++ans;

    return ans;
  }

  private int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}



or



class Solution {
    public int countDifferentSubsequenceGCDs(int[] nums) {
        int mx = Arrays.stream(nums).max().getAsInt();
        boolean[] vis = new boolean[mx + 1];
        for (int x : nums) {
            vis[x] = true;
        }
        int ans = 0;
        for (int x = 1; x <= mx; ++x) {
            int g = 0;
            for (int y = x; y <= mx; y += x) {
                if (vis[y]) {
                    g = gcd(g, y);
                    if (x == g) {
                        ++ans;
                        break;
                    }
                }
            }
        }
        return ans;
    }

    private int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
}


or


class Solution {
    int max = 0;
    Set<Integer> exist = new HashSet();
    public int countDifferentSubsequenceGCDs(int[] nums) {
        getMax(nums);
        for(int num : nums) exist.add(num);
        int count = 0;
        for (int i=1;i<=max;i++) if(findGCD(i)) count++;      //  <---- findGCD
        return count;
    }
    public void getMax(int[] nums){
        for(int i : nums) max = Math.max(max, i);
    }
    public int gcd(int a, int b){
        return (a == 0) ? b : gcd(b % a, a);
    }
	public boolean findGCD(int num){
        int val = 0;
        for(int i = num; i <= max; i+= num)
            if(exist.contains(i)) val = gcd(i, val);          //  <---- gcd between two number
        return (val == num);
    }
}

