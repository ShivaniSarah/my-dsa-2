https://leetcode.com/problems/unique-paths-iii/description/

980. Unique Paths III
Hard
Topics
Companies
You are given an m x n integer array grid where grid[i][j] could be:

1 representing the starting square. There is exactly one starting square.
2 representing the ending square. There is exactly one ending square.
0 representing empty squares we can walk over.
-1 representing obstacles that we cannot walk over.
Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.

 

Example 1:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)
Example 3:


Input: grid = [[0,1],[2,0]]
Output: 0
Explanation: There is no path that walks over every empty square exactly once.
Note that the starting and ending square can be anywhere in the grid.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 20
1 <= m * n <= 20
-1 <= grid[i][j] <= 2
There is exactly one starting cell and one ending cell.



# java

class Solution {
  public int uniquePathsIII(int[][] grid) {
    int empty = 1;
    int sx = -1;
    int sy = -1;
    int ex = -1;
    int ey = -1;

    for (int i = 0; i < grid.length; ++i)
      for (int j = 0; j < grid[0].length; ++j)
        if (grid[i][j] == 0) {
          ++empty;
        } else if (grid[i][j] == 1) {
          sx = i;
          sy = j;
        } else if (grid[i][j] == 2) {
          ex = i;
          ey = j;
        }

    dfs(grid, empty, sx, sy, ex, ey);

    return ans;
  }

  private int ans = 0;

  private void dfs(int[][] grid, int empty, int i, int j, int ex, int ey) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return;
    if (grid[i][j] < 0)
      return;
    if (i == ex && j == ey) {
      if (empty == 0)
        ++ans;
      return;
    }

    grid[i][j] = -2;
    dfs(grid, empty - 1, i + 1, j, ex, ey);
    dfs(grid, empty - 1, i - 1, j, ex, ey);
    dfs(grid, empty - 1, i, j + 1, ex, ey);
    dfs(grid, empty - 1, i, j - 1, ex, ey);
    grid[i][j] = 0;
  }
}


or


class Solution {
    private int m;
    private int n;
    private int cnt;
    private int[][] grid;
    private boolean[][] vis;

    public int uniquePathsIII(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        this.grid = grid;
        int x = 0, y = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 0) {
                    ++cnt;
                } else if (grid[i][j] == 1) {
                    x = i;
                    y = j;
                }
            }
        }
        vis = new boolean[m][n];
        vis[x][y] = true;
        return dfs(x, y, 0);
    }

    private int dfs(int i, int j, int k) {
        if (grid[i][j] == 2) {
            return k == cnt + 1 ? 1 : 0;
        }
        int ans = 0;
        int[] dirs = {-1, 0, 1, 0, -1};
        for (int h = 0; h < 4; ++h) {
            int x = i + dirs[h], y = j + dirs[h + 1];
            if (x >= 0 && x < m && y >= 0 && y < n && !vis[x][y] && grid[x][y] != -1) {
                vis[x][y] = true;
                ans += dfs(x, y, k + 1);
                vis[x][y] = false;
            }
        }
        return ans;
    }
}


or



class Solution { 
 // DFS function
 public int DFS(int [][]obstacleGrid,int i,int j,int totalZeros,int currentZeros)
 {
     // Checking whether current position is valid or not
     if(i<0 || i>=obstacleGrid.length || j<0 || j>=obstacleGrid[0].length)
         return 0;
     // If current cell is an obstacle ,then we cant proceed further, hence no path exists
     if(obstacleGrid[i][j]==-1)
         return 0;
     // If we found ending square then we got a path. But also take care of number of zeros traversed.
     if(obstacleGrid[i][j]==2 && totalZeros==currentZeros-1)
         return 1;
     else if(obstacleGrid[i][j]==2)
         return 0;
     // If all the above conditions were false, it means our cell is having 0 and we can move further, so first make that cell to be invalid.
     obstacleGrid[i][j]=-1;
     // Now, perform for the four directions of current cell
     int totalPaths=DFS(obstacleGrid,i+1,j,totalZeros,currentZeros+1)+
                    DFS(obstacleGrid,i-1,j,totalZeros,currentZeros+1)+
                    DFS(obstacleGrid,i,j+1,totalZeros,currentZeros+1)+ 
                    DFS(obstacleGrid,i,j-1,totalZeros,currentZeros+1);
     // Backtrack=>Make that cell as valid so that we can use this cell for other paths.
     obstacleGrid[i][j]=0;
     // Finally return total number of valid paths.
     return totalPaths;
 }

 public int uniquePathsIII(int[][] grid) {
     
     int totalZeros=0,startX=0,startY=0;
     // Find total number of zeros, we should move exactly once and also find starting cell indices.
     for(int i=0;i<grid.length;i++)
     {
         for(int j=0;j<grid[0].length;j++)
         {
             if(grid[i][j]==0)
                 totalZeros++;
             if(grid[i][j]==1)
             {
                 startX=i;
                 startY=j;
             }
         }
     }
     // Calling DFS Function.
     return DFS(grid,startX,startY,totalZeros,0);
 }
}
