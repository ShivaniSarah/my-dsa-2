https://leetcode.com/problems/construct-2d-grid-matching-graph-layout/

3311. Construct 2D Grid Matching Graph Layout
Hard
Topics
Companies
Hint
You are given a 2D integer array edges representing an undirected graph having n nodes, where edges[i] = [ui, vi] denotes an edge between nodes ui and vi.

Construct a 2D grid that satisfies these conditions:

The grid contains all nodes from 0 to n - 1 in its cells, with each node appearing exactly once.
Two nodes should be in adjacent grid cells (horizontally or vertically) if and only if there is an edge between them in edges.
It is guaranteed that edges can form a 2D grid that satisfies the conditions.

Return a 2D integer array satisfying the conditions above. If there are multiple solutions, return any of them.

 

Example 1:

Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]]

Output: [[3,1],[2,0]]

Explanation:



Example 2:

Input: n = 5, edges = [[0,1],[1,3],[2,3],[2,4]]

Output: [[4,2,3,1,0]]

Explanation:



Example 3:

Input: n = 9, edges = [[0,1],[0,4],[0,5],[1,7],[2,3],[2,4],[2,5],[3,6],[4,6],[4,7],[6,8],[7,8]]

Output: [[8,6,3],[7,4,2],[1,0,5]]

Explanation:

Constraints:

2 <= n <= 5 * 104
1 <= edges.length <= 105
edges[i] = [ui, vi]
0 <= ui < vi < n
All the edges are distinct.
The input is generated such that edges can form a 2D grid that satisfies the conditions.

# java

class Solution {
  public int[][] constructGridLayout(int n, int[][] edges) {
    List<Integer>[] graph = new ArrayList[n];

    for (int i = 0; i < n; i++)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(v);
      graph[v].add(u);
    }

    // Randomly choose a node with the minimum degree as the corner.
    int corner = 0;
    for (int i = 1; i < n; i++)
      if (graph[i].size() < graph[corner].size())
        corner = i;

    boolean[] seen = new boolean[n];
    seen[corner] = true;
    int[] firstRow = getFirstRow(graph, corner, seen);
    int cols = firstRow.length;
    int rows = n / cols;

    int[][] ans = new int[rows][cols];
    ans[0] = firstRow;

    for (int i = 1; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
        for (final int v : graph[ans[i - 1][j]])
          if (!seen[v]) {
            ans[i][j] = v;
            seen[v] = true;
            break;
          }

    return ans;
  }

  private int[] getFirstRow(List<Integer>[] graph, int corner, boolean[] seen) {
    final int cornerDegree = graph[corner].size();
    List<Integer> row = new ArrayList<>(List.of(corner));
    // Continue appending neighbors until we hit another corner.
    while (row.size() == 1 || graph[row.get(row.size() - 1)].size() == cornerDegree + 1) {
      List<Integer> neighbors = graph[row.get(row.size() - 1)];
      Collections.sort(neighbors, (a, b) -> graph[a].size() - graph[b].size());
      for (final int v : neighbors)
        if (!seen[v] && (graph[v].size() == cornerDegree || graph[v].size() == cornerDegree + 1)) {
          row.add(v);
          seen[v] = true;
          break;
        }
    }
    return row.stream().mapToInt(Integer::intValue).toArray();
  }
}


or


class Solution {
    public int[][] constructGridLayout(int n, int[][] edges) {
        List<Integer>[] g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        for (int[] e : edges) {
            int u = e[0], v = e[1];
            g[u].add(v);
            g[v].add(u);
        }

        int[] deg = new int[5];
        Arrays.fill(deg, -1);

        for (int x = 0; x < n; x++) {
            deg[g[x].size()] = x;
        }

        List<Integer> row = new ArrayList<>();
        if (deg[1] != -1) {
            row.add(deg[1]);
        } else if (deg[4] == -1) {
            int x = deg[2];
            for (int y : g[x]) {
                if (g[y].size() == 2) {
                    row.add(x);
                    row.add(y);
                    break;
                }
            }
        } else {
            int x = deg[2];
            row.add(x);
            int pre = x;
            x = g[x].get(0);
            while (g[x].size() > 2) {
                row.add(x);
                for (int y : g[x]) {
                    if (y != pre && g[y].size() < 4) {
                        pre = x;
                        x = y;
                        break;
                    }
                }
            }
            row.add(x);
        }

        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>(row));

        boolean[] vis = new boolean[n];
        int rowSize = row.size();
        for (int i = 0; i < n / rowSize - 1; i++) {
            for (int x : row) {
                vis[x] = true;
            }
            List<Integer> nxt = new ArrayList<>();
            for (int x : row) {
                for (int y : g[x]) {
                    if (!vis[y]) {
                        nxt.add(y);
                        break;
                    }
                }
            }
            res.add(new ArrayList<>(nxt));
            row = nxt;
        }

        int[][] ans = new int[res.size()][rowSize];
        for (int i = 0; i < res.size(); i++) {
            for (int j = 0; j < rowSize; j++) {
                ans[i][j] = res.get(i).get(j);
            }
        }
        return ans;
    }
}

or


import java.util.ArrayList;
import java.util.List;

class Solution {
    public int[][] constructGridLayout(int n, int[][] edges) {
        List<Integer>[] graph = new List[n];

        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] edge : edges) {
            graph[edge[0]].add(edge[1]);
            graph[edge[1]].add(edge[0]);
        }
        boolean[] visit = new boolean[n];
        List<Integer> firstRow = populateFirstRow(graph, visit);
        int noOfColumn = firstRow.size();
        int noOfRow = n / noOfColumn;

        int[][] result = new int[noOfRow][noOfColumn];
        for (int j = 0; j < noOfColumn; j++) {
            result[0][j] = firstRow.get(j);
        }
        for (int i = 0; i < noOfRow - 1; i++) {
            for (int j = 0; j < noOfColumn; j++) {
                int currentNode = result[i][j];
                int nextNode = -1;
                for (int child : graph[currentNode]) {
                    if (!visit[child]) {
                        nextNode = child;
                        break;
                    }
                }
                result[i + 1][j] = nextNode;
                visit[nextNode] = true;
            }
        }
        return result;
    }

    private List<Integer> populateFirstRow(List<Integer>[] graph, boolean[] visit) {
        int lowestInDegreeNode = 0;
        for (int i = 0; i < graph.length; i++) {
            if (graph[lowestInDegreeNode].size() > graph[i].size()) {
                lowestInDegreeNode = i;
            }
        }

        List<Integer> firstRow = new ArrayList<>();
        firstRow.add(lowestInDegreeNode);

        int currentNode = lowestInDegreeNode;
        visit[currentNode] = true;
        while (currentNode == lowestInDegreeNode || graph[currentNode].size() != graph[lowestInDegreeNode].size()) {
            int nextNode = -1;
            for (int child : graph[currentNode]) {
                if (!visit[child] && (nextNode == -1 || graph[nextNode].size() > graph[child].size())) {
                    nextNode = child;
                }
            }
            firstRow.add(nextNode);
            currentNode = nextNode;
            visit[currentNode] = true;
        }

        return firstRow;
    }
}

or


class Solution {
    public int[][] constructGridLayout(int n, int[][] edges) {
        List<Integer>[] graph = new List[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (int[] e : edges) {
            graph[e[0]].add(e[1]);
            graph[e[1]].add(e[0]);
        }
        int[] adj = new int[n];
        int[] adjNum = new int[5];
        List<Integer> adj1 = new ArrayList<>();
        List<Integer> adj2 = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            adj[i] = graph[i].size();
            for (int j = 0; j <= 4; j++) {
                if (adj[i] == j) adjNum[j]++;
            }
            if (adj[i] == 1) adj1.add(i);
            if (adj[i] == 2) adj2.add(i);
        }
        int[][] res = null;
        int[] parent = new int[0];
        if (adjNum[1] == 2) {
            res = new int[1][n];
            int start = adj1.get(0);
            int i = 0;
            boolean[] v = new boolean[n];
            Queue<Integer> q = new LinkedList<>();
            q.add(start);
            v[start] = true;
            while (!q.isEmpty()) {
                int cur = q.poll();
                res[0][i++] = cur;
                for (int next : graph[cur]) {
                    if (!v[next]) {
                        v[next] = true;
                        q.add(next);
                    }
                }
            }
            return res;
        } else {
            int hight = 0;
            int width = 0;
            int start = adj2.get(0);
            boolean[] v = new boolean[n];
            Queue<Integer> q = new LinkedList<>();
            q.add(start);
            v[start] = true;
            List<List<Integer>> list = new ArrayList<>();
            int l = 0;
            while (!q.isEmpty()) {
                int size = q.size();
                l++;
                List<Integer> nextLevel = new ArrayList<>();
                int cur = q.poll();
                nextLevel.add(cur);
                int min = -1;
                for (int next : graph[cur]) {
                    if (!v[next] && (min == -1 || adj[min] > adj[next])) {
                        min = next;
                    } 
                }
                if (min != -1) {
                    q.add(min);
                    v[min] = true; 
                    if (min != start && adj2.contains(min) && hight == 0) {
                        hight = l + 1;
                    }
                }
                for (int next : graph[cur]) {
                    if (!v[next]) {
                        v[next] = true;
                        q.add(next);
                    } 
                }
                size--;
                while (size-- > 0) {
                    cur = q.poll();
                    nextLevel.add(cur);
                    if (adj2.contains(cur)) {
                        if (width == 0) width = l;
                    }
                    
                    for (int next : graph[cur]) {
                        if (!v[next]) {
                            v[next] = true;
                            q.add(next);
                        }
                    }
                }
                list.add(nextLevel);
            }
            res = new int[hight][width];
            int lvl = -1;
            for (int i = 0; i < list.size(); i++) {
                List<Integer> level = list.get(i);
                int size = level.size();
                lvl++;
                int row = Math.min(lvl, hight - 1);
                int col = lvl - row;
                for (int j = 0; j < size; j++) {
                int val = level.get(j);
                res[row - j][col + j] = val;
                }
            }
        }
        return res;
    }
}


