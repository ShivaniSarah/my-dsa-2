https://leetcode.com/problems/find-xor-sum-of-all-pairs-bitwise-and/description/


1835. Find XOR Sum of All Pairs Bitwise AND
Hard
Topics
Companies
Hint
The XOR sum of a list is the bitwise XOR of all its elements. If the list only contains one element, then its XOR sum will be equal to this element.

For example, the XOR sum of [1,2,3,4] is equal to 1 XOR 2 XOR 3 XOR 4 = 4, and the XOR sum of [3] is equal to 3.
You are given two 0-indexed arrays arr1 and arr2 that consist only of non-negative integers.

Consider the list containing the result of arr1[i] AND arr2[j] (bitwise AND) for every (i, j) pair where 0 <= i < arr1.length and 0 <= j < arr2.length.

Return the XOR sum of the aforementioned list.

 

Example 1:

Input: arr1 = [1,2,3], arr2 = [6,5]
Output: 0
Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].
The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.
Example 2:

Input: arr1 = [12], arr2 = [4]
Output: 4
Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.
 

Constraints:

1 <= arr1.length, arr2.length <= 105
0 <= arr1[i], arr2[j] <= 109


# java


class Solution {
  public int getXORSum(int[] arr1, int[] arr2) {
    final int xors1 = Arrays.stream(arr1).reduce((a, b) -> a ^ b).getAsInt();
    final int xors2 = Arrays.stream(arr2).reduce((a, b) -> a ^ b).getAsInt();
    return xors1 & xors2;
  }
}


or


class Solution {
    public int getXORSum(int[] arr1, int[] arr2) {
        int a = 0, b = 0;
        for (int v : arr1) {
            a ^= v;
        }
        for (int v : arr2) {
            b ^= v;
        }
        return a & b;
    }
}

or


class Solution {
     public int getXORSum(int[] arr1, int[] arr2) {
         int xor1=0 , xor2=0;
         for(int val:arr1) xor1^=val;
         for(int val:arr2) xor2^=val;
        return (xor1&xor2);
    }
}


or


class Solution {
    public int getXORSum(int[] arr1, int[] arr2) {
  int xor1=0;
  int xor2=0;
  for(int i=0;i<arr1.length;i++){
    xor1=xor1^arr1[i];
  }
   for(int j=0;j<arr2.length;j++){
    xor2=xor2^arr2[j];
  }
       return xor1&xor2;
        
    }
}
