https://leetcode.com/problems/distribute-elements-into-two-arrays-ii/description/


3072. Distribute Elements Into Two Arrays II
Hard
Topics
Companies
Hint
You are given a 1-indexed array of integers nums of length n.

We define a function greaterCount such that greaterCount(arr, val) returns the number of elements in arr that are strictly greater than val.

You need to distribute all the elements of nums between two arrays arr1 and arr2 using n operations. In the first operation, append nums[1] to arr1. In the second operation, append nums[2] to arr2. Afterwards, in the ith operation:

If greaterCount(arr1, nums[i]) > greaterCount(arr2, nums[i]), append nums[i] to arr1.
If greaterCount(arr1, nums[i]) < greaterCount(arr2, nums[i]), append nums[i] to arr2.
If greaterCount(arr1, nums[i]) == greaterCount(arr2, nums[i]), append nums[i] to the array with a lesser number of elements.
If there is still a tie, append nums[i] to arr1.
The array result is formed by concatenating the arrays arr1 and arr2. For example, if arr1 == [1,2,3] and arr2 == [4,5,6], then result = [1,2,3,4,5,6].

Return the integer array result.

 

Example 1:

Input: nums = [2,1,3,3]
Output: [2,3,1,3]
Explanation: After the first 2 operations, arr1 = [2] and arr2 = [1].
In the 3rd operation, the number of elements greater than 3 is zero in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.
In the 4th operation, the number of elements greater than 3 is zero in both arrays. As the length of arr2 is lesser, hence, append nums[4] to arr2.
After 4 operations, arr1 = [2,3] and arr2 = [1,3].
Hence, the array result formed by concatenation is [2,3,1,3].
Example 2:

Input: nums = [5,14,3,1,2]
Output: [5,3,1,2,14]
Explanation: After the first 2 operations, arr1 = [5] and arr2 = [14].
In the 3rd operation, the number of elements greater than 3 is one in both arrays. Also, the lengths are equal, hence, append nums[3] to arr1.
In the 4th operation, the number of elements greater than 1 is greater in arr1 than arr2 (2 > 1). Hence, append nums[4] to arr1.
In the 5th operation, the number of elements greater than 2 is greater in arr1 than arr2 (2 > 1). Hence, append nums[5] to arr1.
After 5 operations, arr1 = [5,3,1,2] and arr2 = [14].
Hence, the array result formed by concatenation is [5,3,1,2,14].
Example 3:

Input: nums = [3,3,3,3]
Output: [3,3,3,3]
Explanation: At the end of 4 operations, arr1 = [3,3] and arr2 = [3,3].
Hence, the array result formed by concatenation is [3,3,3,3].
 

Constraints:

3 <= n <= 105
1 <= nums[i] <= 109


# java


class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        this.c = new int[n + 1];
    }

    public void update(int x, int delta) {
        for (; x <= n; x += x & -x) {
            c[x] += delta;
        }
    }

    public int query(int x) {
        int s = 0;
        for (; x > 0; x -= x & -x) {
            s += c[x];
        }
        return s;
    }
}

class Solution {
    public int[] resultArray(int[] nums) {
        int[] st = nums.clone();
        Arrays.sort(st);
        int n = st.length;
        BinaryIndexedTree tree1 = new BinaryIndexedTree(n + 1);
        BinaryIndexedTree tree2 = new BinaryIndexedTree(n + 1);
        tree1.update(Arrays.binarySearch(st, nums[0]) + 1, 1);
        tree2.update(Arrays.binarySearch(st, nums[1]) + 1, 1);
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];
        arr1[0] = nums[0];
        arr2[0] = nums[1];
        int i = 1, j = 1;
        for (int k = 2; k < n; ++k) {
            int x = Arrays.binarySearch(st, nums[k]) + 1;
            int a = i - tree1.query(x);
            int b = j - tree2.query(x);
            if (a > b) {
                arr1[i++] = nums[k];
                tree1.update(x, 1);
            } else if (a < b) {
                arr2[j++] = nums[k];
                tree2.update(x, 1);
            } else if (i <= j) {
                arr1[i++] = nums[k];
                tree1.update(x, 1);
            } else {
                arr2[j++] = nums[k];
                tree2.update(x, 1);
            }
        }
        for (int k = 0; k < j; ++k) {
            arr1[i++] = arr2[k];
        }
        return arr1;
    }
}


or


class FenwickTree {
  public FenwickTree(int n) {
    sums = new int[n + 1];
  }

  public void add(int i, int delta) {
    while (i < sums.length) {
      sums[i] += delta;
      i += lowbit(i);
    }
  }

  public int get(int i) {
    int sum = 0;
    while (i > 0) {
      sum += sums[i];
      i -= lowbit(i);
    }
    return sum;
  }

  private int[] sums;

  private static int lowbit(int i) {
    return i & -i;
  }
}

class Solution {
  public int[] resultArray(int[] nums) {
    List<Integer> arr1 = new ArrayList<>();
    List<Integer> arr2 = new ArrayList<>();
    Map<Integer, Integer> ranks = getRanks(nums);
    FenwickTree tree1 = new FenwickTree(ranks.size());
    FenwickTree tree2 = new FenwickTree(ranks.size());

    add(nums[0], arr1, tree1, ranks);
    add(nums[1], arr2, tree2, ranks);

    for (int i = 2; i < nums.length; ++i) {
      final int greaterCount1 = arr1.size() - tree1.get(ranks.get(nums[i]));
      final int greaterCount2 = arr2.size() - tree2.get(ranks.get(nums[i]));
      if (greaterCount1 > greaterCount2)
        add(nums[i], arr1, tree1, ranks);
      else if (greaterCount1 < greaterCount2)
        add(nums[i], arr2, tree2, ranks);
      else if (arr1.size() > arr2.size())
        add(nums[i], arr2, tree2, ranks);
      else
        add(nums[i], arr1, tree1, ranks);
    }

    arr1.addAll(arr2);
    return arr1.stream().mapToInt(Integer::intValue).toArray();
  }

  private Map<Integer, Integer> getRanks(int[] nums) {
    Map<Integer, Integer> ranks = new HashMap<>();
    SortedSet<Integer> sorted = new TreeSet<>();
    for (final int num : nums)
      sorted.add(num);
    int rank = 0;
    for (Iterator<Integer> it = sorted.iterator(); it.hasNext();)
      ranks.put(it.next(), ++rank);
    return ranks;
  }

  private void add(int num, List<Integer> arr, FenwickTree tree, Map<Integer, Integer> ranks) {
    arr.add(num);
    tree.add(ranks.get(num), 1);
  };
}


or


class Solution {
    public int[] resultArray(int[] nums) {
        ArrayList<Integer> arr1 = new ArrayList<>(), arr2 = new ArrayList<>();
        ArrayList<Integer> arr1Sorted = new ArrayList<>(), arr2Sorted = new ArrayList<>();
        
        arr1.add(nums[0]); 
        arr2.add(nums[1]);
        arr1Sorted.add(nums[0]);
        arr2Sorted.add(nums[1]);
        
        for(int i=2; i<nums.length; i++){
            int val = nums[i];
            int pos1 = binarySearch(arr1Sorted, val), pos2 = binarySearch(arr2Sorted, val);
            int gc1 = arr1.size() - pos1;
            int gc2 = arr2.size() - pos2;
            
            if(gc1 > gc2){
                arr1.add(val);
                arr1Sorted.add(pos1, val);
            }
            
            else if(gc2 > gc1){
                arr2.add(val);
                arr2Sorted.add(pos2, val);
            }
            
            else{
                if(arr2.size() < arr1.size()){
                    arr2.add(val);
                    arr2Sorted.add(pos2, val);
                }
                else{
                    arr1.add(val);
                    arr1Sorted.add(pos1, val);
                }
            }
        }
        int i=0;
        for(int num : arr1){
            nums[i++] = num;
        }
        for(int num : arr2){
            nums[i++] = num;
        }
        return nums;
    }
    public int binarySearch(List<Integer> arr, int val){
        int left = 0;
        int right = arr.size() - 1;
        
        while(left <= right){
            int mid = left + (right-left)/2;
            if(arr.get(mid) <= val)
                left = mid + 1;
            else
                right = mid - 1;
        }
        return left;
    }
}



or



private int counter(ArrayList<Node> list, int val, int size){
	int res = size, l=0, r=size-1;
	while(l <= r){
		int mid = l + (r-l)/2;
		Node curr = list.get(mid);
		if(curr.val > val){
			res = mid;
			r = mid-1;
		}else {
			l = mid+1;
		}
	}
	return res;
}

class Node {
	int idx;
	int val;
	Node(int v, int i){
		idx = i;
		val = v;
	}
}

public int[] resultArray(int[] nums) {
	ArrayList<Node> arr1 = new ArrayList<>();
	ArrayList<Node> arr2 = new ArrayList<>();

	arr1.add(new Node(nums[0], 0));
	arr2.add(new Node(nums[1], 0));
	int size1 = 1, size2 = 1;

	int n = nums.length;
	for(int i=2; i<n; i++){
		int idx1 = counter(arr1, nums[i], size1);
		int idx2 = counter(arr2, nums[i], size2);

		int val1=size1-idx1, val2=size2-idx2;

		if(val1 > val2) {
			arr1.add(idx1, new Node(nums[i], size1));
			size1++;

		}else if(val1 < val2) {
			arr2.add(idx2, new Node(nums[i], size2));
			size2++;

		}else {
			if(size1 <= size2){
				arr1.add(idx1, new Node(nums[i], size1));
				size1++;

			}else {
				arr2.add(idx2, new Node(nums[i], size2));
				size2++;
			}
		}
	}

	int res[] = new int[n];
	int i=0, k=0;
	while(i < size1){
		Node curr = arr1.get(i++);
		res[curr.idx] = curr.val;
	}
	i=0;
	while(i < size2){
		Node curr = arr2.get(i++);
		res[size1+curr.idx] = curr.val;
	}

	return res;
}


or


class Solution {
    private int counter(ArrayList<Node> list, int val, int size){
	int res = size, l=0, r=size-1;
	while(l <= r){
		int mid = l + (r-l)/2;
		Node curr = list.get(mid);
		if(curr.val > val){
			res = mid;
			r = mid-1;
		}else {
			l = mid+1;
		}
	}
	return res;
}

class Node {
	int idx;
	int val;
	Node(int v, int i){
		idx = i;
		val = v;
	}
}

public int[] resultArray(int[] nums) {
	ArrayList<Node> arr1 = new ArrayList<>();
	ArrayList<Node> arr2 = new ArrayList<>();

	arr1.add(new Node(nums[0], 0));
	arr2.add(new Node(nums[1], 0));
	int size1 = 1, size2 = 1;

	int n = nums.length;
	for(int i=2; i<n; i++){
		int idx1 = counter(arr1, nums[i], size1);
		int idx2 = counter(arr2, nums[i], size2);

		int val1=size1-idx1, val2=size2-idx2;

		if(val1 > val2) {
			arr1.add(idx1, new Node(nums[i], size1));
			size1++;

		}else if(val1 < val2) {
			arr2.add(idx2, new Node(nums[i], size2));
			size2++;

		}else {
			if(size1 <= size2){
				arr1.add(idx1, new Node(nums[i], size1));
				size1++;

			}else {
				arr2.add(idx2, new Node(nums[i], size2));
				size2++;
			}
		}
	}

	int res[] = new int[n];
	int i=0, k=0;
	while(i < size1){
		Node curr = arr1.get(i++);
		res[curr.idx] = curr.val;
	}
	i=0;
	while(i < size2){
		Node curr = arr2.get(i++);
		res[size1+curr.idx] = curr.val;
	}

	return res;
}
}

or


class Solution {
    int n;
    FenwickTree BIT1, BIT2;
    
    public int[] resultArray(int[] nums) {
        n = nums.length; HashSet<Integer> set = new HashSet<Integer>();
        for (int i = 0; i < n; i++){
            set.add(nums[i]);
        }
        ArrayList<Integer> arr = new ArrayList<Integer>(set); Collections.sort(arr);
        HashMap<Integer, Integer> compressMap = new HashMap<Integer, Integer>(), reverseMap = new HashMap<Integer, Integer>();
        for (int i = 0; i < arr.size(); i++){
            compressMap.put(arr.get(i), i+1);
            reverseMap.put(i+1, arr.get(i));
        }
        for (int i = 0; i < n; i++){
            nums[i] = compressMap.get(nums[i]);
        }
        ArrayList<Integer> a = new ArrayList<Integer>(), b = new ArrayList<Integer>(); BIT1 = new FenwickTree(n); BIT2 = new FenwickTree(n);
        a.add(nums[0]); b.add(nums[1]); BIT1.update(nums[0], 1); BIT2.update(nums[1], 1); 
        for (int i = 2; i < n; i++){
            int c1 = BIT1.sumRange(nums[i]+1, n), c2 = BIT2.sumRange(nums[i]+1, n);
            if (c1 > c2) {
                a.add(nums[i]); BIT1.update(nums[i], 1);
            }
            else if (c1 < c2){
                b.add(nums[i]); BIT2.update(nums[i], 1);
            }
            else { // c1 == c2
                if (a.size() <= b.size()){
                    a.add(nums[i]); BIT1.update(nums[i], 1);
                }
                else {
                    b.add(nums[i]); BIT2.update(nums[i], 1);
                }
            }
        }
        int[] ret = new int[n];
        for (int i = 0; i < a.size(); i++) ret[i] = reverseMap.get(a.get(i));
        for (int i = a.size(); i < n; i++) ret[i] = reverseMap.get(b.get(i-a.size()));
        return ret;
    }
    
    class FenwickTree {
        int n;
        int[] BIT;

        FenwickTree(int n){
            this.n = n;
            BIT = new int[n+1];
        }

        void update(int idx, int v) {
            for (int i = idx; i <= n; i += i&-i) {
                BIT[i] += v;
            }
        }

        int query(int idx) {
            int ret = 0;
            for (int i = idx; i > 0; i -= i&-i) {
                ret += BIT[i];
            }
            return ret;
        }

        int sumRange(int l, int r) {
            if (r < l) {
                return 0;
            }
            if (l != 0) {
                return query(r) - query(l-1);
            }
            return query(r);
        }
    }
}
