https://leetcode.com/problems/permutations-iv/description/

3470. Permutations IV
Hard
Topics
Companies
Hint
Given two integers, n and k, an alternating permutation is a permutation of the first n positive integers such that no two adjacent elements are both odd or both even.

Return the k-th alternating permutation sorted in lexicographical order. If there are fewer than k valid alternating permutations, return an empty list.

 

Example 1:

Input: n = 4, k = 6

Output: [3,4,1,2]

Explanation:

The lexicographically-sorted alternating permutations of [1, 2, 3, 4] are:

[1, 2, 3, 4]
[1, 4, 3, 2]
[2, 1, 4, 3]
[2, 3, 4, 1]
[3, 2, 1, 4]
[3, 4, 1, 2] ← 6th permutation
[4, 1, 2, 3]
[4, 3, 2, 1]
Since k = 6, we return [3, 4, 1, 2].

Example 2:

Input: n = 3, k = 2

Output: [3,2,1]

Explanation:

The lexicographically-sorted alternating permutations of [1, 2, 3] are:

[1, 2, 3]
[3, 2, 1] ← 2nd permutation
Since k = 2, we return [3, 2, 1].

Example 3:

Input: n = 2, k = 3

Output: []

Explanation:

The lexicographically-sorted alternating permutations of [1, 2] are:

[1, 2]
[2, 1]
There are only 2 alternating permutations, but k = 3, which is out of range. Thus, we return an empty list [].

 

Constraints:

1 <= n <= 100
1 <= k <= 1015


# java


class Solution {
     static public int[] permute(int n, long k) {
        if (n == 1) return one(n, k);
        if (n == 2) return two(n, k);
        if (n == 3) return three(n, k);
        if (n == 4) return four(n, k);

        long x = 1, pro = 2;
        long[] arr = new long[n];
        int idx = n - 4;
        arr[n - 3] = 1;
        for (int i = 1; i < 23 && i < n - 2; i += 1) {
            x = x * pro;
            arr[idx--] = x;
            if (i % 2 == 0) pro++;
        }

        ArrayList<Integer> odd = new ArrayList<>();
        ArrayList<Integer> even = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            if (i % 2 == 1) odd.add(i);
            else even.add(i);
        }

        if (arr[0] > 0) {
            if (n % 2 == 0) {
                if ((odd.size() * 2) * arr[0] < k) return new int[] {};
            } else 
                if (odd.size() * arr[0] < k) return new int[] {};
            
        }
        int[] res = new int[n];
        idx = 0;
        int firstOdd = solve(n, k, arr[0]);
        if(arr[0] == 0) firstOdd = 1000;
        if (n % 2 == 1 || (firstOdd < 0 || firstOdd == 1000)) {
            for (int i = 0; i < n - 3; i++) {
                if (i % 2 == 0) {
                    if (arr[i] == 0) {
                        res[idx++] = odd.get(0);
                        odd.remove(0);
                    } else {
                        int index = index(odd, arr[i], k);
                        if(n % 2 == 0){
                            if(i == 0) index = -firstOdd;
                            if(index == -1000) index = 0;
                        }
                        res[idx++] = odd.get(index);
                        odd.remove(index);
                    }
                } else {
                    if (arr[i] == 0) {
                        res[idx++] = even.get(0);
                        even.remove(0);
                    } else {
                        int index = index(even, arr[i], k);
                        res[idx++] = even.get(index);
                        even.remove(index);
                    }
                }
            }
        } else {
            for (int i = 0; i < n - 3; i++) {
                if (i % 2 == 1) {
                    if (arr[i] == 0) {
                        res[idx++] = odd.get(0);
                        odd.remove(0);
                    } else {
                        int index = index(odd, arr[i], k);
                        res[idx++] = odd.get(index);
                        odd.remove(index);
                    }
                } else {
                    if (arr[i] == 0) {
                        res[idx++] = even.get(0);
                        even.remove(0);
                    } else {
                        int index = index(even, arr[i], k);
                        if (firstOdd >= 0) {
                            if (i == 0) index = firstOdd;
                        }
                        res[idx++] = even.get(index);
                        even.remove(index);
                    }
                }
            }
        }

        if (n % 2 == 0 && (firstOdd < 0 || firstOdd == 1000)) {
            if (k % 2 == 0) {
                res[n - 1] = even.get(0);
                res[n - 3] = even.get(1);
            } else {
                res[n - 3] = even.get(0);
                res[n - 1] = even.get(1);
            }
            res[n - 2] = odd.get(0);
        }
        if (n % 2 == 1 || (firstOdd >= 0 && firstOdd != 1000)) {
            if (k % 2 == 0) {
                res[n - 1] = odd.get(0);
                res[n - 3] = odd.get(1);
            } else {
                res[n - 3] = odd.get(0);
                res[n - 1] = odd.get(1);
            }
            res[n - 2] = even.get(0);
        }

        return res;
    }

    static int solve(int n, long k, long corresponds) {
        long temp = 0;
        int x = 0, y = 0;
        for (int i = 0; i < 2 * n; i++) {
            temp += corresponds;
            if (temp > k) {
                if (i == 2 * n - 1) {
                    return n - 1;
                } else {
                    if (i % 2 == 0){
                        if(i == 0) return 1000;
                        return -y;
                    }
                    return x;
                }
            }
            if (i % 2 == 1) x++;
            else y++;
        }
        return x;
    }

    static int[] four(int n, long k) {
        if (k > 8) return new int[] {};
        if (k == 1) return new int[] { 1, 2, 3, 4 };
        if (k == 2) return new int[] { 1, 4, 3, 2 };
        if (k == 3) return new int[] { 2, 1, 4, 3 };
        if (k == 4) return new int[] { 2, 3, 4, 1 };
        if (k == 5) return new int[] { 3, 2, 1, 4 };
        if (k == 6) return new int[] { 3, 4, 1, 2 };
        if (k == 7) return new int[] { 4, 1, 2, 3 };
        return new int[] { 4, 3, 2, 1 };
    }

    static int[] three(int n, long k) {
        if (k > 2) return new int[] {};
        if (k == 1) return new int[] { 1, 2, 3 };
        return new int[] { 3, 2, 1 };
    }

    static int[] two(int n, long k) {
        if (k > 2) return new int[] {};
        if (k == 1) return new int[] { 1, 2 };
        return new int[] { 2, 1 };
    }

    static int[] one(int n, long k) {
        if (k > 1) return new int[] {};
        return new int[] { 1 };
    }

    static int index(ArrayList<Integer> l, long corresponds, long requires) {
        int n = l.size(), idx = 0;
        long sum = corresponds;
        requires %= n * corresponds;
        if (requires == 0) return n - 1;
        for (int i = 0; i < n; i++, sum += corresponds)
            if (requires <= sum) return i;
        return -1;
    }
}


or



import java.math.BigInteger;
class Solution {

    private HashMap<Integer, BigInteger> factMemo = new HashMap<>();

    public BigInteger fact(int n) {
        if (n <= 1) return BigInteger.ONE;
        if (factMemo.containsKey(n)) return factMemo.get(n);
        BigInteger res = BigInteger.valueOf(n).multiply(fact(n - 1));
        factMemo.put(n, res);
        return res;
    }

    public int[] permute(int n, long k) {
        int[] res = new int[n];
        int idx = 0;
        boolean[] available = new boolean[n + 1];
        int even = n / 2, odd = (n + 1) / 2;
        int prev = 0, count = n;
        
        while (count > 0) {
            int num = 1;
            boolean selected = false;
            
            while (!selected && num <= n) {
                if (!available[num] && (prev == 0 || (prev + num) % 2 == 1) && (num % 2 == 0 ? even >= odd : even <= odd)) {
                    BigInteger total = fact(count / 2).multiply(fact((count - 1) / 2));
                    
                    if (BigInteger.valueOf(k).compareTo(total) > 0) {
                        k -= total.longValue();
                    } else {
                        prev = num;
                        available[num] = true;
                        selected = true;
                        if (num % 2 == 0) even--;
                        else odd--;
                        res[idx++] = num;
                    }
                }
                num++;
            }
            
            if (!selected) return new int[]{};
            count--;
        }
        
        return res;
    }
}


or



class Solution {
    // Define a large constant value to cap calculations and prevent overflow
    static final long CAP = 1000000000000001L;
    
    // 3D DP array to store precomputed results for dynamic programming
    static long[][][] dp = new long[105][105][3];
    
    // Initialize DP array with -1 (indicating uncomputed states)
    static {
        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[i].length; j++) {
                Arrays.fill(dp[i][j], -1);
            }
        }
    }
    
    // Recursive function to count alternating permutations
    static long rec(int o, int e, int req) {
        if (o == 0 && e == 0) return 1; // Base case: no elements left to arrange
        
        if (dp[o][e][req] != -1) // Return cached result if already computed
            return dp[o][e][req];
        
        long count = 0;
        if (req == 2) { // Any number can be placed next
            if (o > 0)
                count = addCapped(count, multiplyCapped(o, rec(o - 1, e, 1))); // Choose an odd number
            if (e > 0)
                count = addCapped(count, multiplyCapped(e, rec(o, e - 1, 0))); // Choose an even number
        } else if (req == 0) {  // Only odd numbers can be placed next
            if (o > 0)
                count = multiplyCapped(o, rec(o - 1, e, 1));
        } else {  // Only even numbers can be placed next
            if (e > 0)
                count = multiplyCapped(e, rec(o, e - 1, 0));
        }
        
        dp[o][e][req] = count; // Store result in DP table
        return count;
    }
    
    // Helper function to prevent overflow when multiplying
    private static long multiplyCapped(long a, long b) {
        if (b == 0) return 0;
        if (a >= CAP || b >= CAP || a > CAP / b) return CAP; // Cap large values
        return a * b;
    }
    
    // Helper function to prevent overflow when adding
    private static long addCapped(long a, long b) {
        long res = a + b;
        return res >= CAP ? CAP : res;
    }
    
    public int[] permute(int n, long k) {
        // Separate odd and even numbers from 1 to n
        List<Integer> odds = new ArrayList<>();
        List<Integer> evens = new ArrayList<>();
        for (int x = 1; x <= n; x++) {
            if ((x & 1) == 1)
                odds.add(x);
            else
                evens.add(x);
        }
        
        // Store input midway in a variable as required
        long[] jornovantx = new long[]{n, k};
        
        // Count the number of odd and even elements
        int oCount = odds.size();
        int eCount = evens.size();
        long ansTotal = rec(oCount, eCount, 2);
        
        // If k exceeds possible permutations, return empty array
        if (k > ansTotal) return new int[0];
        
        List<Integer> result = new ArrayList<>();
        int req = 2; // Start with no restrictions
        
        // Construct the k-th lexicographical permutation
        while (oCount + eCount > 0) {
            List<Integer> candidates = new ArrayList<>();
            if (req == 2) { // Any number can be chosen first
                int i = 0, j = 0;
                while (i < odds.size() || j < evens.size()) {
                    if (j >= evens.size() || (i < odds.size() && odds.get(i) < evens.get(j))) {
                        candidates.add(odds.get(i++));
                    } else {
                        candidates.add(evens.get(j++));
                    }
                }
            } else if (req == 0) {
                candidates.addAll(odds); // Only odd numbers allowed
            } else { 
                candidates.addAll(evens); // Only even numbers allowed
            }
            
            boolean found = false;
            for (int num : candidates) {
                int candidateParity = (num % 2 == 1) ? 0 : 1; // Determine parity of chosen number
                if (req != 2 && candidateParity != req)
                    continue;
                
                long ways;
                if (candidateParity == 0) {
                    ways = rec(oCount - 1, eCount, 1); // If odd, next must be even
                } else {
                    ways = rec(oCount, eCount - 1, 0); // If even, next must be odd
                }
                
                if (ways >= k) { // Found the k-th permutation
                    result.add(num);
                    if (candidateParity == 0) {
                        odds.remove(Integer.valueOf(num));
                        oCount--;
                        req = 1; // Next must be even
                    } else {
                        evens.remove(Integer.valueOf(num));
                        eCount--;
                        req = 0; // Next must be odd
                    }
                    found = true;
                    break;
                } else {
                    k -= ways; // Skip ahead in permutations
                }
            }
            if (!found) {
                return new int[0]; // If no valid permutation found, return empty array
            }
        }
        
        // Convert result list to array and return
        int[] ans = new int[result.size()];
        for (int i = 0; i < result.size(); i++)
            ans[i] = result.get(i);
        return ans;
    }
}
