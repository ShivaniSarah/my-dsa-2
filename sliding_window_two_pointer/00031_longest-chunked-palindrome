https://leetcode.com/problems/longest-chunked-palindrome-decomposition/description/

1147. Longest Chunked Palindrome Decomposition
Hard
Topics
Companies
Hint
You are given a string text. You should split it to k substrings (subtext1, subtext2, ..., subtextk) such that:

subtexti is a non-empty string.
The concatenation of all the substrings is equal to text (i.e., subtext1 + subtext2 + ... + subtextk == text).
subtexti == subtextk - i + 1 for all valid values of i (i.e., 1 <= i <= k).
Return the largest possible value of k.

 

Example 1:

Input: text = "ghiabcdefhelloadamhelloabcdefghi"
Output: 7
Explanation: We can split the string on "(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)".
Example 2:

Input: text = "merchant"
Output: 1
Explanation: We can split the string on "(merchant)".
Example 3:

Input: text = "antaprezatepzapreanta"
Output: 11
Explanation: We can split the string on "(a)(nt)(a)(pre)(za)(tep)(za)(pre)(a)(nt)(a)".
 

Constraints:

1 <= text.length <= 1000
text consists only of lowercase English characters.


# java


class Solution {
     public int longestDecomposition(String text) {
        int n = text.length();   
        for (int i = 0; i < n/2; i++) 
            if (text.substring(0, i + 1).equals(text.substring(n-1-i, n))) 
                return 2+longestDecomposition(text.substring(i+1, n-1-i));
        return (n==0)?0:1;
    }
}

or


class Solution {
     public int longestDecomposition(String text) {
        int ans = 0;
        for(int i = 0, j = text.length() - 1;i<=j;){
            boolean isDecomposed = false;
            for(int l = 1;i+l-1<j-l+1;l++){
                if(text.substring(i,i+l).equals(text.substring(j-l+1,j+1))){
                    i = i+l;
                    j = j-l;
                    ans += 2;
                    isDecomposed = true;
                    break;
                }
            }
            if(!isDecomposed){
                ans += 1;
                break;
            }
        }
        return ans;
    }
}


or


class Solution {
    public int longestDecomposition(String text) {
        String l = "", r = "";
        int c = 0;
        for (int i = 0; i < text.length(); i++) {
            l = l + text.charAt(i);
            r = text.charAt(text.length() - i - 1) + r;
            if (l.equals(r)) {
                c++;
                l = "";
                r = "";
            }
        }
        return c;
    }
}

or


class Solution {
    public int longestDecomposition(String text) {
        int n = text.length();
        int k = 0, totalLength = 0;
        int str1Start = 0, str1End = 0;
        int str2Start = n-1, str2End = n;
        while (str1End < str2Start) {
            if (text.substring(str1Start, str1End + 1).equals(text.substring(str2Start, str2End))) {
                totalLength += (str2End - str2Start) * 2; 
                k++;
                str1Start = str1End + 1; 
                str2End = str2Start; 
            }
            str1End++;
            str2Start--;
        }
        if (totalLength < n) return (k * 2) + 1;
        return k * 2;
    }
}

or


class Solution {
    public int longestDecomposition(String text) {
        int n = text.length();
        int res = 0;
        String left = "", right = "";

        for (int i = 0; i < n; ++i) {
            left += text.charAt(i);
            right = text.charAt(n - 1 - i) + right;

            if (left.equals(right)) {
                res++;
                left = "";
                right = "";
            }
        }

        return res;
    }
}

or


// 1 test case not passes in the code

import java.util.*;

class Solution {
    public int longestDecomposition(String text) {
        int res = 0;
        int l = 0, r = text.length() - 1;
        Stack<Character> stack = new Stack<>();
        Queue<Character> queue = new LinkedList<>();

        while (l < r) {
            stack.push(text.charAt(l++));
            queue.add(text.charAt(r--));

            while (!stack.isEmpty() && !queue.isEmpty() && stack.peek().equals(queue.peek())) {
                stack.pop();
                queue.poll();
            }

            if (stack.isEmpty()) {
                res += l <= r ? 2 : 1;
            }
        }

        return res + 1;
    }
}

