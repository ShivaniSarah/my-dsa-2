https://leetcode.com/problems/get-the-maximum-score/description/


1537. Get the Maximum Score
Hard
Topics
Companies
Hint
You are given two sorted arrays of distinct integers nums1 and nums2.

A valid path is defined as follows:

Choose array nums1 or nums2 to traverse (from index-0).
Traverse the current array from left to right.
If you are reading any value that is present in nums1 and nums2 you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).
The score is defined as the sum of unique values in a valid path.

Return the maximum score you can obtain of all possible valid paths. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:


Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].
Example 2:

Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].
Example 3:

Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.
Maximum sum is obtained with the path [6,7,8,9,10].
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[i] <= 107
nums1 and nums2 are strictly increasing.



# java


class Solution {
    public int maxSum(int[] nums1, int[] nums2) {
        final int mod = (int) 1e9 + 7;
        int m = nums1.length, n = nums2.length;
        int i = 0, j = 0;
        long f = 0, g = 0;
        while (i < m || j < n) {
            if (i == m) {
                g += nums2[j++];
            } else if (j == n) {
                f += nums1[i++];
            } else if (nums1[i] < nums2[j]) {
                f += nums1[i++];
            } else if (nums1[i] > nums2[j]) {
                g += nums2[j++];
            } else {
                f = g = Math.max(f, g) + nums1[i];
                i++;
                j++;
            }
        }
        return (int) (Math.max(f, g) % mod);
    }
}

or


class Solution {
  public int maxSum(int[] nums1, int[] nums2) {
    final int MOD = 1_000_000_007;
    // Keep the running the sum of `nums1` and `nums2` before the next rendezvous.
    // Since `nums1` and `nums2` are increasing, move forward on the smaller one
    // to ensure we don't miss any rendezvous. When meet rendezvous, choose the
    // better path.
    long ans = 0;
    // sum(nums1) in (the prevoious rendezvous, the next rendezvous)
    long sum1 = 0;
    // sum(nums2) in (the prevoious rendezvous, the next rendezvous)
    long sum2 = 0;
    int i = 0; // nums1's index
    int j = 0; // nums2's index

    while (i < nums1.length && j < nums2.length)
      if (nums1[i] < nums2[j]) {
        sum1 += nums1[i++];
      } else if (nums1[i] > nums2[j]) {
        sum2 += nums2[j++];
      } else { // An rendezvous happens.
        ans += Math.max(sum1, sum2) + nums1[i];
        sum1 = 0;
        sum2 = 0;
        ++i;
        ++j;
      }

    while (i < nums1.length)
      sum1 += nums1[i++];

    while (j < nums2.length)
      sum2 += nums2[j++];

    return (int) ((ans + Math.max(sum1, sum2)) % MOD);
  }
}

or


class Solution {
    public int maxSum(int[] nums1, int[] nums2) {
        
        int n = nums1.length;
        int m = nums2.length;
        int i=0, j=0;
        long si=0, sj=0;
        long res = 0;
        
        while(i<n && j<m)
        {
            if(nums1[i] < nums2[j])
            {
                si += nums1[i];
                i++;
            }
            else if(nums1[i] > nums2[j])
            {
                sj += nums2[j];
                j++;
            }
            else
            {
                res += Math.max(si, sj) + nums1[i];
                i++; 
                j++;
                si=0;
                sj=0;
            }
        }
        
        while(i<n)
        {
            si += nums1[i];
            i++;
        }
        
        while(j<m)
        {
            sj += nums2[j];
            j++;
        }
        
        return (int)((Math.max(si, sj) + res) % 1000000007);
        
    }
}

or

class Solution {
    int MOD =  1_000_000_007;

    public int maxSum(int[] nums1, int[] nums2) {
        int len1 = nums1.length;
        int len2 = nums2.length;

        long sum1 = 0, sum2 = 0;
        int i = 0, j = 0;
        while (i < len1 || j < len2) {
            if (i < len1 && (j == len2 || nums1[i] < nums2[j])) {
                sum1 += nums1[i++];
            } else if (j < len2 && (i == len1 || nums1[i] > nums2[j])) {
                sum2 += nums2[j++];
            } else {
                sum2 = Math.max(sum1, sum2) + nums1[i];
                sum1 = sum2;
                i++;
                j++;
            }
        }
        return (int) (Math.max(sum1, sum2) % MOD);
    }
}
