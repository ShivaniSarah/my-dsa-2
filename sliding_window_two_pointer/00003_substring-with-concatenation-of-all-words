https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/

You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated string is a string that exactly contains all the strings of any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated string because it is not the concatenation of any permutation of words.
Return an array of the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]

Output: [0,9]

Explanation:

The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.

Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]

Output: []

Explanation:

There is no concatenated substring.

Example 3:

Input: s = "barfoofoobarthefoobarman", words = ["bar","foo","the"]

Output: [6,9,12]

Explanation:

The substring starting at 6 is "foobarthe". It is the concatenation of ["foo","bar","the"].
The substring starting at 9 is "barthefoo". It is the concatenation of ["bar","the","foo"].
The substring starting at 12 is "thefoobar". It is the concatenation of ["the","foo","bar"].

 

Constraints:

1 <= s.length <= 104
1 <= words.length <= 5000
1 <= words[i].length <= 30
s and words[i] consist of lowercase English letters.


class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> res = new ArrayList<>();
        if (s == null || words.length == 0 || words[0].length() == 0) return res;

        int wordLen = words[0].length(), wordCount = words.length;
        int totalLen = wordLen * wordCount, n = s.length();

        Map<String, Integer> wordFreq = new HashMap<>();
        for (String word : words) wordFreq.put(word, wordFreq.getOrDefault(word, 0) + 1);

        for (int i = 0; i < wordLen; i++) {
            Map<String, Integer> seen = new HashMap<>();
            int left = i, count = 0;

            for (int j = i; j + wordLen <= n; j += wordLen) {
                String word = s.substring(j, j + wordLen);
                if (wordFreq.containsKey(word)) {
                    seen.put(word, seen.getOrDefault(word, 0) + 1);
                    count++;

                    while (seen.get(word) > wordFreq.get(word)) {
                        String leftWord = s.substring(left, left + wordLen);
                        seen.put(leftWord, seen.get(leftWord) - 1);
                        count--;
                        left += wordLen;
                    }

                    if (count == wordCount) res.add(left);
                } else {
                    seen.clear();
                    count = 0;
                    left = j + wordLen;
                }
            }
        }

        return res;
    }
}


or


class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();
        int n = s.length(), cnt = words.length;
        if (n == 0 || cnt == 0) return ans;

        // Word occurrence map
        Map<String, Integer> dict = new HashMap<>();
        for (String word : words) dict.put(word, dict.getOrDefault(word, 0) + 1);

        int wl = words[0].length();
        for (int i = 0; i < wl; i++) {
            int left = i, count = 0;
            Map<String, Integer> tdict = new HashMap<>();

            for (int j = i; j <= n - wl; j += wl) {
                String str = s.substring(j, j + wl);
                if (dict.containsKey(str)) {
                    tdict.put(str, tdict.getOrDefault(str, 0) + 1);

                    if (tdict.get(str) <= dict.get(str)) {
                        count++;
                    } else {
                        while (tdict.get(str) > dict.get(str)) {
                            String leftStr = s.substring(left, left + wl);
                            tdict.put(leftStr, tdict.get(leftStr) - 1);
                            if (tdict.get(leftStr) < dict.get(leftStr)) count--;
                            left += wl;
                        }
                    }

                    if (count == cnt) {
                        ans.add(left);
                        String leftStr = s.substring(left, left + wl);
                        tdict.put(leftStr, tdict.get(leftStr) - 1);
                        count--;
                        left += wl;
                    }

                } else {
                    tdict.clear();
                    count = 0;
                    left = j + wl;
                }
            }
        }

        return ans;
    }
}


or


public class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
		/**
		 * Let n=s.length, k=words[0].length traverse s with indices i, i+k,
		 * i+2k, ... for 0<=i<k, so that the time complexity is O(n).
		 */
		List<Integer> res = new ArrayList<Integer>();
		int n = s.length(), m = words.length, k;
		if (n == 0 || m == 0 || (k = words[0].length()) == 0)
			return res;

		HashMap<String, Integer> wDict = new HashMap<String, Integer>();

		for (String word : words) {
			if (wDict.containsKey(word))
				wDict.put(word, wDict.get(word) + 1);
			else
				wDict.put(word, 1);
		}

		int i, j, start, x, wordsLen = m * k;
		HashMap<String, Integer> curDict = new HashMap<String, Integer>();
		String test, temp;
		for (i = 0; i < k; i++) {
			curDict.clear();
			start = i;
			if (start + wordsLen > n)
				return res;
			for (j = i; j + k <= n; j += k) {
				test = s.substring(j, j + k);

				if (wDict.containsKey(test)) {
					if (!curDict.containsKey(test)) {
						curDict.put(test, 1);

						start = checkFound(res, start, wordsLen, j, k, curDict, s);
						continue;
					}

					// curDict.containsKey(test)
					x = curDict.get(test);
					if (x < wDict.get(test)) {
						curDict.put(test, x + 1);

						start = checkFound(res, start, wordsLen, j, k, curDict, s);
						continue;
					}

					// curDict.get(test)==wDict.get(test), slide start to
					// the next word of the first same word as test
					while (!(temp = s.substring(start, start + k)).equals(test)) {
						decreaseCount(curDict, temp);
						start += k;
					}
					start += k;
					if (start + wordsLen > n)
						break;
					continue;
				}

				// totally failed up to index j+k, slide start and reset all
				start = j + k;
				if (start + wordsLen > n)
					break;
				curDict.clear();
			}
		}
		return res;
	}

	public int checkFound(List<Integer> res, int start, int wordsLen, int j, int k,
			HashMap<String, Integer> curDict, String s) {
		if (start + wordsLen == j + k) {
			res.add(start);
			// slide start to the next word
			decreaseCount(curDict, s.substring(start, start + k));
			return start + k;
		}
		return start;
	}

	public void decreaseCount(HashMap<String, Integer> curDict, String key) {
		// remove key if curDict.get(key)==1, otherwise decrease it by 1
		int x = curDict.get(key);
		if (x == 1)
			curDict.remove(key);
		else
			curDict.put(key, x - 1);
	}
}

or

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        Map<String, Integer> cnt = new HashMap<>();
        for (String w : words) {
            cnt.merge(w, 1, Integer::sum);
        }
        int m = s.length(), n = words.length;
        int k = words[0].length();
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; ++i) {
            Map<String, Integer> cnt1 = new HashMap<>();
            int l = i, r = i;
            int t = 0;
            while (r + k <= m) {
                String w = s.substring(r, r + k);
                r += k;
                if (!cnt.containsKey(w)) {
                    cnt1.clear();
                    l = r;
                    t = 0;
                    continue;
                }
                cnt1.merge(w, 1, Integer::sum);
                ++t;
                while (cnt1.get(w) > cnt.get(w)) {
                    String remove = s.substring(l, l + k);
                    l += k;
                    cnt1.merge(remove, -1, Integer::sum);
                    --t;
                }
                if (t == n) {
                    ans.add(l);
                }
            }
        }
        return ans;
    }
}


or

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();
        int n = s.length();
        int m = words.length;
        int w = words[0].length();

        HashMap<String,Integer> map = new HashMap<>();
        for(String x : words)
        map.put(x, map.getOrDefault(x,0)+1);

        for(int i=0; i<w; i++){
            HashMap<String,Integer> temp = new HashMap<>();
            int count = 0;
            for(int j=i,k=i; j+w <= n; j=j+w){
                String word = s.substring(j,j+w);
                temp.put(word,temp.getOrDefault(word,0)+1);
                count++;
                
                if(count==m){
                    if(map.equals(temp)){
                        ans.add(k);
                    }
                    String remove = s.substring(k,k+w);
                    temp.computeIfPresent(remove, (a, b) -> (b > 1) ? b - 1 : null);
                    count--;
                    k=k+w;
                }
            }
        
        return ans;
    }
}


or 



class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> ans = new ArrayList<>();

        if (words.length == 0 || s.length() == 0) {
            return ans;
        }

        int wordSize = words[0].length();
        int wordCount = words.length;
        int N = s.length();

        HashMap<String,Integer> originalCount = new HashMap<>();
        for(int i = 0; i<words.length; i++){
            originalCount.put(words[i], originalCount.getOrDefault(words[i],0)+1);
        }

        for(int offset = 0; offset<wordSize; offset++){
            HashMap<String,Integer> currentCount = new HashMap<>();
            int start = offset;
            int count = 0;
            for(int end = offset; end + wordSize <= N; end += wordSize){
                String currWord = s.substring(end, end + wordSize);
                if(originalCount.containsKey(currWord)){
                    currentCount.put(currWord, currentCount.getOrDefault(currWord,0)+1);
                    count++;

                    while(currentCount.get(currWord)>originalCount.get(currWord)){
                        String startWord = s.substring(start,start+wordSize);
                        currentCount.put(startWord, currentCount.get(startWord)-1);
                        start+=wordSize;
                        count--;                        
                    }

                    if(count == wordCount){
                        ans.add(start);
                    }
                    
                }
                else{
                    count = 0;
                    start = end + wordSize;
                    currentCount.clear();
                }
            }

        }
        return ans;
    }
}
