https://leetcode.com/problems/count-pairs-of-nodes/description/

1782. Count Pairs Of Nodes
Hard
Topics
Companies
Hint
You are given an undirected graph defined by an integer n, the number of nodes, and a 2D integer array edges, the edges in the graph, where edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi. You are also given an integer array queries.

Let incident(a, b) be defined as the number of edges that are connected to either node a or b.

The answer to the jth query is the number of pairs of nodes (a, b) that satisfy both of the following conditions:

a < b
incident(a, b) > queries[j]
Return an array answers such that answers.length == queries.length and answers[j] is the answer of the jth query.

Note that there can be multiple edges between the same two nodes.

 

Example 1:


Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
Output: [6,5]
Explanation: The calculations for incident(a, b) are shown in the table above.
The answers for each of the queries are as follows:
- answers[0] = 6. All the pairs have an incident(a, b) value greater than 2.
- answers[1] = 5. All the pairs except (3, 4) have an incident(a, b) value greater than 3.
Example 2:

Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
Output: [10,10,9,8,6]
 

Constraints:

2 <= n <= 2 * 104
1 <= edges.length <= 105
1 <= ui, vi <= n
ui != vi
1 <= queries.length <= 20
0 <= queries[j] < edges.length


# java


class Solution {
    public int[] countPairs(int n, int[][] edges, int[] queries) {
        int[] cnt = new int[n];
        Map<Integer, Integer> g = new HashMap<>();
        for (var e : edges) {
            int a = e[0] - 1, b = e[1] - 1;
            ++cnt[a];
            ++cnt[b];
            int k = Math.min(a, b) * n + Math.max(a, b);
            g.merge(k, 1, Integer::sum);
        }
        int[] s = cnt.clone();
        Arrays.sort(s);
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; ++i) {
            int t = queries[i];
            for (int j = 0; j < n; ++j) {
                int x = s[j];
                int k = search(s, t - x, j + 1);
                ans[i] += n - k;
            }
            for (var e : g.entrySet()) {
                int a = e.getKey() / n, b = e.getKey() % n;
                int v = e.getValue();
                if (cnt[a] + cnt[b] > t && cnt[a] + cnt[b] - v <= t) {
                    --ans[i];
                }
            }
        }
        return ans;
    }

    private int search(int[] arr, int x, int i) {
        int left = i, right = arr.length;
        while (left < right) {
            int mid = (left + right) >> 1;
            if (arr[mid] > x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}


or


class Solution {
    public int[] countPairs(int n, int[][] edges, int[] queries) {
        int[] ans = new int[queries.length];

        // count[i] := the number of edges of node i
        int[] count = new int[n + 1];

        // shared[i][j] := the number of edges incident to i or j, where i < j
        Map<Integer, Integer>[] shared = new Map[n + 1];

        for (int i = 1; i <= n; ++i)
            shared[i] = new HashMap<>();

        for (int[] edge : edges) {
            final int u = edge[0];
            final int v = edge[1];
            ++count[u];
            ++count[v];
            shared[Math.min(u, v)].merge(Math.max(u, v), 1, Integer::sum);
        }

        int[] sortedCount = count.clone();
        Arrays.sort(sortedCount);

        int k = 0;
        for (final int query : queries) {
            for (int i = 1, j = n; i < j;)
                if (sortedCount[i] + sortedCount[j] > query)
                    // sortedCount[i] + sortedCount[j] > query
                    // sortedCount[i + 1] + sortedCount[j] > query
                    // ...
                    // sortedCount[j - 1] + sortedCount[j] > query
                    // So, there are (j - 1) - i + 1 = j - i pairs > query
                    ans[k] += (j--) - i;
                else
                    ++i;
            for (int i = 1; i <= n; ++i)
                for (Map.Entry<Integer, Integer> p : shared[i].entrySet()) {
                    final int j = p.getKey();
                    final int sh = p.getValue();
                    if (count[i] + count[j] > query && count[i] + count[j] - sh <= query)
                        --ans[k];
                }
            ++k;
        }

        return ans;
    }
}


or



class Solution {
    public int[] countPairs(int n, int[][] edges, int[] qs) {
    int[] cnt = new int[n + 1], sorted_cnt = new int[n + 1], res = new int[qs.length];
    HashMap<Integer, Integer>[] shared = new HashMap[n + 1];
    for (var e : edges) {
        sorted_cnt[e[0]] = cnt[e[0]] = cnt[e[0]] + 1;
        sorted_cnt[e[1]] = cnt[e[1]] = cnt[e[1]] + 1;
        int n1 = Math.min(e[0], e[1]), n2 = Math.max(e[0], e[1]);
        shared[n1] = shared[n1] == null ? new HashMap() : shared[n1];
        shared[n1].put(n2, shared[n1].getOrDefault(n2, 0) + 1);
    }
    Arrays.sort(sorted_cnt);
    for (int q = 0; q < qs.length; ++q) {
        for (int i = 1, j = n; i < j; )
            if (qs[q] < sorted_cnt[i] + sorted_cnt[j])
                res[q] += (j--) - i;
            else
                ++i;
        for (int i = 1; i <= n; ++i)
            if (shared[i] != null)
                for (var p : shared[i].entrySet()) {
                    int j =  p.getKey(), sh_cnt = p.getValue();
                    if (qs[q] < cnt[i] + cnt[j] && qs[q] + sh_cnt >= cnt[i] + cnt[j])
                        --res[q]; 
                }
    }
    return res;
}
}


or



// two steps strategy


class Solution {
    public int[] countPairs(int n, int[][] edges, int[] queries) {
        int[] degree = new int[n];
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int[] ed : edges) {
            degree[--ed[0]] ++;
            degree[--ed[1]] ++;
            if (ed[0] > ed[1]) {
                int temp = ed[0];
                ed[0] = ed[1];
                ed[1] = temp;
            }
			// store the number of edges for each node pair
            cnt.put(ed[0] * 20000 + ed[1], cnt.getOrDefault(ed[0] * 20000 + ed[1], 0) + 1);
        }
        
        int[] sorted = degree.clone();
        Arrays.sort(sorted);
        
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; ++i) {
            int ans = 0;            
			// using two pointers to find how many potential node pairs
            for (int l = 0, r = sorted.length - 1; l < r;) {
                if (sorted[l] + sorted[r] > queries[i]) {
                    ans += (r - l);
                    r --;
                }
                else {
                    l ++;
                }
                
            }
            
			// remove all invalid pairs
            for (int k : cnt.keySet()) {
                int fi = k / 20000;
                int se = k % 20000;
                if (degree[fi] + degree[se] > queries[i] && degree[fi] + degree[se] - cnt.get(k) <= queries[i])
                    ans --;
            }
            
            res[i] = ans;
        }
        return res;
    }
}
