https://leetcode.com/problems/find-substring-with-given-hash-value/description/

2156. Find Substring With Given Hash Value
Hard
Topics
Companies
Hint
The hash of a 0-indexed string s of length k, given integers p and m, is computed using the following function:

hash(s, p, m) = (val(s[0]) * p0 + val(s[1]) * p1 + ... + val(s[k-1]) * pk-1) mod m.
Where val(s[i]) represents the index of s[i] in the alphabet from val('a') = 1 to val('z') = 26.

You are given a string s and the integers power, modulo, k, and hashValue. Return sub, the first substring of s of length k such that hash(sub, power, modulo) == hashValue.

The test cases will be generated such that an answer always exists.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "leetcode", power = 7, modulo = 20, k = 2, hashValue = 0
Output: "ee"
Explanation: The hash of "ee" can be computed to be hash("ee", 7, 20) = (5 * 1 + 5 * 7) mod 20 = 40 mod 20 = 0. 
"ee" is the first substring of length 2 with hashValue 0. Hence, we return "ee".
Example 2:

Input: s = "fbxzaad", power = 31, modulo = 100, k = 3, hashValue = 32
Output: "fbx"
Explanation: The hash of "fbx" can be computed to be hash("fbx", 31, 100) = (6 * 1 + 2 * 31 + 24 * 312) mod 100 = 23132 mod 100 = 32. 
The hash of "bxz" can be computed to be hash("bxz", 31, 100) = (2 * 1 + 24 * 31 + 26 * 312) mod 100 = 25732 mod 100 = 32. 
"fbx" is the first substring of length 3 with hashValue 32. Hence, we return "fbx".
Note that "bxz" also has a hash of 32 but it appears later than "fbx".
 

Constraints:

1 <= k <= s.length <= 2 * 104
1 <= power, modulo <= 109
0 <= hashValue < modulo
s consists of lowercase English letters only.
The test cases are generated such that an answer always exists.



# java


class Solution {
    public String subStrHash(String s, int power, int modulo, int k, int hashValue) {
        long h = 0, p = 1;
        int n = s.length();
        for (int i = n - 1; i >= n - k; --i) {
            int val = s.charAt(i) - 'a' + 1;
            h = ((h * power % modulo) + val) % modulo;
            if (i != n - k) {
                p = p * power % modulo;
            }
        }
        int j = n - k;
        for (int i = n - k - 1; i >= 0; --i) {
            int pre = s.charAt(i + k) - 'a' + 1;
            int cur = s.charAt(i) - 'a' + 1;
            h = ((h - pre * p % modulo + modulo) * power % modulo + cur) % modulo;
            if (h == hashValue) {
                j = i;
            }
        }
        return s.substring(j, j + k);
    }
}


or


class Solution {
  public String subStrHash(String s, int power, int modulo, int k, int hashValue) {
    long maxPower = 1;
    long hash = 0;
    int bestLeft = -1;

    for (int i = s.length() - 1; i >= 0; --i) {
      hash = (hash * power + val(s.charAt(i))) % modulo;
      if (i + k < s.length())
        hash = (hash - val(s.charAt(i + k)) * maxPower % modulo + modulo) % modulo;
      else
        maxPower = maxPower * power % modulo;
      if (hash == hashValue)
        bestLeft = i;
    }

    return s.substring(bestLeft, bestLeft + k);
  }

  private int val(char c) {
    return c - 'a' + 1;
  }
}

or

//  Sliding Window + Rolling Hash

class Solution {
        public String subStrHash(String s, int p, int m, int k, int hashValue) {
        long cur = 0, pk = 1;
        int res = 0, n = s.length();
        for (int i = n - 1; i >= 0; --i) {
            cur = (cur * p + s.charAt(i) - 'a' + 1) % m;
            if (i + k >= n)
                pk = pk * p % m;
            else
                cur = (cur - (s.charAt(i + k) - 'a' + 1) * pk % m + m) % m;
            if (cur == hashValue)
                res = i;
        }
        return s.substring(res, res + k);
    }
}

or

//  Sliding Window and Caching

class Solution {
       public String subStrHash(String s, int power, int modulo, int k, int hashValue) {
        long[] p = new long[k]; //to store all the power values beforehand to avoid redundant calculations
        for(int i=0;i<k;i++){
            p[i] = binpow(power, i, modulo);
        }

        for(int j=0;j<s.length()-k+1;j++){
            long hash = 0;
            for(int i=j;i<j+k;i++){
                hash += (s.charAt(i)-'a'+1)*p[i-j];
            }
            hash %= modulo;
            if(hash==hashValue)
                return s.substring(j,j+k);
        }
        return "";
    }
    
    // function to calculate (a^n)mod(n) in O(log(n)) time
    private long binpow(long a, long b, long m) {
        a %= m;
        long res = 1;
        while (b > 0) {
            if (b%2==1)
                res = res * a % m;
            a = a * a % m;
            b >>= 1;
        }
        return res;
    }

}


or


// Roll hashing like sliding windows


class Solution {

public String subStrHash(String s, int p, int m, int k, int t) {

        long h=0,kp=1; //avoid overflow
        int ans =0,n=s.length();

        for(int i=n-1;i>=0;i--){

            h  = (h * p + val(s.charAt(i)))%m;

            if(i+k >=n){
                kp = kp*p%m;
            }
            else{
                h = (h-val(s.charAt(i+k)) * kp%m+m)%m;
            }

            if(h==t){
                ans=i;
            }
        }
        return s.substring(ans,ans+k);
        
    }
    private int val(char c){ //find index
        return c-'a'+1;
    }
};
