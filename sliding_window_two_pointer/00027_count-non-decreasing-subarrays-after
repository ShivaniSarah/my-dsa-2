https://leetcode.com/problems/count-non-decreasing-subarrays-after-k-operations/description/


3420. Count Non-Decreasing Subarrays After K Operations
Hard
Topics
Companies
Hint
You are given an array nums of n integers and an integer k.

For each subarray of nums, you can apply up to k operations on it. In each operation, you increment any element of the subarray by 1.

Note that each subarray is considered independently, meaning changes made to one subarray do not persist to another.

Return the number of subarrays that you can make non-decreasing ​​​​​after performing at most k operations.

An array is said to be non-decreasing if each element is greater than or equal to its previous element, if it exists.

 

Example 1:

Input: nums = [6,3,1,2,4,4], k = 7

Output: 17

Explanation:

Out of all 21 possible subarrays of nums, only the subarrays [6, 3, 1], [6, 3, 1, 2], [6, 3, 1, 2, 4] and [6, 3, 1, 2, 4, 4] cannot be made non-decreasing after applying up to k = 7 operations. Thus, the number of non-decreasing subarrays is 21 - 4 = 17.

Example 2:

Input: nums = [6,3,1,3,6], k = 4

Output: 12

Explanation:

The subarray [3, 1, 3, 6] along with all subarrays of nums with three or fewer elements, except [6, 3, 1], can be made non-decreasing after k operations. There are 5 subarrays of a single element, 4 subarrays of two elements, and 2 subarrays of three elements except [6, 3, 1], so there are 1 + 5 + 4 + 2 = 12 subarrays that can be made non-decreasing.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= k <= 109


# java


class Solution {
  public long countNonDecreasingSubarrays(int[] nums, int k) {
    long ans = 0;
    long cost = 0;
    // Store (number, count) pairs in non-increasing order. The numbers in the
    // queue represent what nums[i..j] look like after adjustments.
    Deque<Pair<Integer, Integer>> dq = new ArrayDeque<>();

    for (int i = nums.length - 1, j = nums.length - 1; i >= 0; --i) {
      final int num = nums[i];
      int count = 1;
      while (!dq.isEmpty() && dq.getLast().getKey() < num) {
        final int nextNum = dq.getLast().getKey();
        final int nextCount = dq.removeLast().getValue();
        count += nextCount;
        // Adjust `nextNum`s to `num`.
        cost += (long) (num - nextNum) * nextCount;
      }
      dq.offerLast(new Pair<>(num, count));
      while (cost > k) {
        final int rightmostNum = dq.getFirst().getKey();
        final int rightmostCount = dq.removeFirst().getValue();
        cost -= (long) (rightmostNum - nums[j--]);
        if (rightmostCount > 1)
          dq.offerFirst(new Pair<>(rightmostNum, rightmostCount - 1));
      }
      ans += j - i + 1;
    }

    return ans;
  }
}


or


class Solution {
      public long countNonDecreasingSubarrays(int[] A, long k) {
        // Reverse the array
        int n = A.length;
        for (int i = 0; i < n / 2; ++i) {
            int temp = A[i];
            A[i] = A[n - 1 - i];
            A[n - 1 - i] = temp;
        }

        long res = 0;
        Deque<Integer> q = new ArrayDeque<>();
        for (int j = 0, i = 0; j < A.length; ++j) {
            while (!q.isEmpty() && A[q.peekLast()] < A[j]) {
                int r = q.pollLast();
                int l = q.isEmpty() ? i - 1 : q.peekLast();
                k -= 1L * (r - l) * (A[j] - A[r]);
            }
            q.addLast(j);
            while (k < 0) {
                k += A[q.peekFirst()] - A[i];
                if (q.peekFirst() == i) {
                    q.pollFirst();
                }
                ++i;
            }
            res += j - i + 1;
        }
        return res;
    }
}


or

class Solution {
    public long countNonDecreasingSubarrays(int[] nums, int k) {
        // return sol1(nums, k);

        return sol2(nums, k);
    }

    public long sol2(int[] nums, int k) {
        int n = nums.length;

        int i = 0;
        int j = 0;
        long total = 0;
        int prev = nums[0];
        int op = k;
        while(j < n) {
            if(nums[j] >= prev) {
                prev = nums[j];
                j += 1;
            }
            else if(prev - nums[j] <= op){
                op = op - (prev - nums[j]);
                j += 1;
            }
            else {
                total += (j - i);
                op = k;
                i = i + 1;
                int ind = i;
                prev = nums[ind];
                while(ind < j) {
                    if(nums[ind] >= prev) {
                        prev = nums[ind];
                    }
                    op = op - (prev - nums[ind]);
                    ind += 1;
                }
            }
        }

        // finally
        total += (long) (j-i)*(j-i+1) / 2;
        return total;
    }

    public long sol1(int[] nums, int k)  {
        int n = nums.length;

        long total = 0;
        for(int i=0; i<n ;i++) {
            long currLen = 1;
            int prev = nums[i];
            int allowedOperations = k;
            for(int j=i; j<n; j++) {
                if(nums[j] >= prev) {
                    prev = nums[j];
                    currLen = (j-i+1);
                }
                else if(prev - nums[j] > allowedOperations) {
                    break;
                }
                else {
                    allowedOperations = allowedOperations - (prev - nums[j]);
                    currLen = (j-i+1);
                }
            }

            total += currLen;
        }

        return total;
    }
}


