https://leetcode.com/problems/count-substrings-with-k-frequency-characters-ii/description/


3329. Count Substrings With K-Frequency Characters II ðŸ”’
Description
Given a string s and an integer k, return the total number of substrings of s where at least one character appears at least k times.

 

Example 1:

Input: s = "abacb", k = 2

Output: 4

Explanation:

The valid substrings are:

"aba" (character 'a' appears 2 times).
"abac" (character 'a' appears 2 times).
"abacb" (character 'a' appears 2 times).
"bacb" (character 'b' appears 2 times).
Example 2:

Input: s = "abcde", k = 1

Output: 15

Explanation:

All substrings are valid because every character appears at least once.

 

Constraints:

1 <= s.length <= 3 * 105
1 <= k <= s.length
s consists only of lowercase English letters.



# java

class Solution {
  public long numberOfSubstrings(String s, int k) {
    final int n = s.length();
    long total = (long) n * (n + 1) / 2;  // Total number of substrings
    long invalid = 0;
    int[] count = new int[26];

    for (int l = 0, r = 0; r < n; ++r) {
      int c = s.charAt(r) - 'a';
      ++count[c];

      // When a char hits k freq, we must shrink the window to exclude substrings that include it k times or more
      while (count[c] == k)
        --count[s.charAt(l++) - 'a'];

      // All substrings ending at r and starting from l to r are invalid
      invalid += r - l + 1;
    }

    return total - invalid;  // Valid substrings = total - invalid
  }
}

or


class Solution {
  public long numberOfSubstrings(String s, int k) {
    final int n = s.length();
    long ans = n * (long) (n + 1) / 2;
    int[] count = new int[26];

    for (int l = 0, r = 0; r < n; ++r) {
      final int c = s.charAt(r) - 'a';
      ++count[c];
      while (count[c] == k)
        --count[s.charAt(l++) - 'a'];
      ans -= r - l + 1;
    }

    return ans;
  }
}


or

class Solution {
    public long numberOfSubstrings(String s, int k) {
        int[] cnt = new int[26];
        long ans = 0;
        for (int l = 0, r = 0; r < s.length(); ++r) {
            int c = s.charAt(r) - 'a';
            ++cnt[c];
            while (cnt[c] >= k) {
                --cnt[s.charAt(l) - 'a'];
                l++;
            }
            ans += l;
        }
        return ans;
    }
}



