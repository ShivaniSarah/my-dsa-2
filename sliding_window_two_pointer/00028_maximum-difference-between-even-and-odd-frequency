https://leetcode.com/problems/maximum-difference-between-even-and-odd-frequency-ii/description/


3445. Maximum Difference Between Even and Odd Frequency II
Hard
Topics
Companies
Hint
You are given a string s and an integer k. Your task is to find the maximum difference between the frequency of two characters, freq[a] - freq[b], in a substring subs of s, such that:

subs has a size of at least k.
Character a has an odd frequency in subs.
Character b has an even frequency in subs.
Return the maximum difference.

Note that subs can contain more than 2 distinct characters.

 

Example 1:

Input: s = "12233", k = 4

Output: -1

Explanation:

For the substring "12233", the frequency of '1' is 1 and the frequency of '3' is 2. The difference is 1 - 2 = -1.

Example 2:

Input: s = "1122211", k = 3

Output: 1

Explanation:

For the substring "11222", the frequency of '2' is 3 and the frequency of '1' is 2. The difference is 3 - 2 = 1.

Example 3:

Input: s = "110", k = 3

Output: -1

 

Constraints:

3 <= s.length <= 3 * 104
s consists only of digits '0' to '4'.
The input is generated that at least one substring has a character with an even frequency and a character with an odd frequency.
1 <= k <= s.length



# java

class Solution {
  public int maxDifference(String s, int k) {
    int ans = Integer.MIN_VALUE;

    for (Pair<Character, Character> pair : getPermutations()) {
      final char a = pair.getKey();
      final char b = pair.getValue();

      // minDiff[parityA][parityB] := min(a - b) of all valid windows with
      // parityA and parityB
      int[][] minDiff = new int[2][2];
      Arrays.stream(minDiff).forEach(A -> Arrays.fill(A, Integer.MAX_VALUE / 2));
      // prefixA[i] := the number of 'a's in s[0..i)
      List<Integer> prefixA = new ArrayList<>(List.of(0));
      // prefixB[i] := the number of 'b's in s[0..i)
      List<Integer> prefixB = new ArrayList<>(List.of(0));
      for (int l = 0, r = 0; r < s.length(); ++r) {
        prefixA.add(prefixA.get(prefixA.size() - 1) + (s.charAt(r) == a ? 1 : 0));
        prefixB.add(prefixB.get(prefixB.size() - 1) + (s.charAt(r) == b ? 1 : 0));
        while (r - l + 1 >= k &&                                   // the window size >= k
               prefixA.get(l) < prefixA.get(prefixA.size() - 1) && // the number of 'a's > 0
               prefixB.get(l) < prefixB.get(prefixB.size() - 1)) { // the number of 'b's > 0
          minDiff[prefixA.get(l) % 2][prefixB.get(l) % 2] = Math.min(
              minDiff[prefixA.get(l) % 2][prefixB.get(l) % 2], prefixA.get(l) - prefixB.get(l));
          ++l;
        }
        ans = Math.max(ans, (prefixA.get(prefixA.size() - 1) - prefixB.get(prefixB.size() - 1)) -
                                minDiff[1 - prefixA.get(prefixA.size() - 1) % 2]
                                       [prefixB.get(prefixB.size() - 1) % 2]);
      }
    }

    return ans;
  }

  private List<Pair<Character, Character>> getPermutations() {
    List<Pair<Character, Character>> permutations = new ArrayList<>();
    for (final char a : "01234".toCharArray())
      for (final char b : "01234".toCharArray())
        if (a != b)
          permutations.add(new Pair<>(a, b));
    return permutations;
  }
}


or


import java.util.*;

class Solution {
    public int maxDifference(String s, int k) {
        int ans = Integer.MIN_VALUE;

        for (Map.Entry<Character, Character> pair : getPermutations()) {
            final char a = pair.getKey();
            final char b = pair.getValue();

            int[][] minDiff = new int[2][2];
            for (int[] row : minDiff)
                Arrays.fill(row, Integer.MAX_VALUE / 2);

            List<Integer> prefixA = new ArrayList<>();
            List<Integer> prefixB = new ArrayList<>();
            prefixA.add(0);
            prefixB.add(0);

            for (int l = 0, r = 0; r < s.length(); ++r) {
                prefixA.add(prefixA.get(prefixA.size() - 1) + (s.charAt(r) == a ? 1 : 0));
                prefixB.add(prefixB.get(prefixB.size() - 1) + (s.charAt(r) == b ? 1 : 0));

                while (r - l + 1 >= k &&
                        prefixA.get(l) < prefixA.get(prefixA.size() - 1) &&
                        prefixB.get(l) < prefixB.get(prefixB.size() - 1)) {
                    int pa = prefixA.get(l);
                    int pb = prefixB.get(l);
                    minDiff[pa % 2][pb % 2] = Math.min(minDiff[pa % 2][pb % 2], pa - pb);
                    ++l;
                }

                int paLast = prefixA.get(prefixA.size() - 1);
                int pbLast = prefixB.get(prefixB.size() - 1);
                ans = Math.max(ans, (paLast - pbLast) - minDiff[1 - paLast % 2][pbLast % 2]);
            }
        }

        return ans;
    }

    private List<Map.Entry<Character, Character>> getPermutations() {
        List<Map.Entry<Character, Character>> permutations = new ArrayList<>();
        for (char a : "01234".toCharArray()) {
            for (char b : "01234".toCharArray()) {
                if (a != b) {
                    permutations.add(new AbstractMap.SimpleEntry<>(a, b));
                }
            }
        }
        return permutations;
    }
}


or


// Prefix Sum + Fenwick Tree

class Solution {
    static class FenwickTree {
        int n;
        int[] tree;
        static final int INF = Integer.MAX_VALUE;

        FenwickTree(int n) {
            this.n = n;
            tree = new int[n + 1];
            Arrays.fill(tree, INF);
        }

        void update(int i, int val) {
            for (int pos = i + 1; pos <= n; pos += pos & -pos) {
                tree[pos] = Math.min(tree[pos], val);
            }
        }

        int query(int i) {
            int res = INF;
            for (int pos = i + 1; pos > 0; pos -= pos & -pos) {
                res = Math.min(res, tree[pos]);
            }
            return res;
        }
    }

    public static int maxDifference(String s, int k) {
        int n = s.length(), ans = Integer.MIN_VALUE;

        for (int a = 0; a < 5; a++) {
            for (int b = 0; b < 5; b++) {
                if (a == b) continue;

                int[] D = new int[n + 1];
                int[] pa = new int[n + 1];
                int[] pb = new int[n + 1];
                int[] countB = new int[n + 1];

                D[0] = 0;
                pa[0] = 0;
                pb[0] = 0;
                countB[0] = 0;

                for (int i = 1; i <= n; i++) {
                    int digit = s.charAt(i - 1) - '0';
                    D[i] = D[i - 1] + ((digit == a) ? 1 : 0) - ((digit == b) ? 1 : 0);
                    pa[i] = (pa[i - 1] + ((digit == a) ? 1 : 0)) & 1;
                    pb[i] = (pb[i - 1] + ((digit == b) ? 1 : 0)) & 1;
                    countB[i] = countB[i - 1] + ((digit == b) ? 1 : 0);
                }

                int size = n + 1;
                FenwickTree[][] trees = new FenwickTree[2][2];

                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 2; j++) {
                        trees[i][j] = new FenwickTree(size);
                    }
                }

                for (int j = 0; j <= n; j++) {
                    if (j >= k) {
                        int idx = j - k;
                        trees[pa[idx]][pb[idx]].update(countB[idx], D[idx]);
                    }

                    if (j > 0) {
                        int needP = 1 - pa[j];
                        int needQ = pb[j];

                        if (countB[j] > 0) {
                            int bestVal = trees[needP][needQ].query(countB[j] - 1);
                            if (bestVal != FenwickTree.INF) {
                                ans = Math.max(ans, D[j] - bestVal);
                            }
                        }
                    }
                }
            }
        }

        return ans;
    }
}

or


class Solution {
    static class FenwickTree {
        int n;
        int[] tree;
        static final int INF = Integer.MAX_VALUE;

        FenwickTree(int n) {
            this.n = n;
            tree = new int[n + 1];
            Arrays.fill(tree, INF);
        }

        void update(int i, int val) {
            for (int pos = i + 1; pos <= n; pos += pos & -pos) {
                tree[pos] = Math.min(tree[pos], val);
            }
        }

        int query(int i) {
            int res = INF;
            for (int pos = i + 1; pos > 0; pos -= pos & -pos) {
                res = Math.min(res, tree[pos]);
            }
            return res;
        }
    }

    public static int maxDifference(String s, int k) {
        int n = s.length(), ans = Integer.MIN_VALUE;

        for (int a = 0; a < 5; a++) {
            for (int b = 0; b < 5; b++) {
                if (a == b) continue;

                int[] D = new int[n + 1];
                int[] pa = new int[n + 1];
                int[] pb = new int[n + 1];
                int[] countB = new int[n + 1];

                D[0] = 0;
                pa[0] = 0;
                pb[0] = 0;
                countB[0] = 0;

                for (int i = 1; i <= n; i++) {
                    int digit = s.charAt(i - 1) - '0';
                    D[i] = D[i - 1] + ((digit == a) ? 1 : 0) - ((digit == b) ? 1 : 0);
                    pa[i] = (pa[i - 1] + ((digit == a) ? 1 : 0)) & 1;
                    pb[i] = (pb[i - 1] + ((digit == b) ? 1 : 0)) & 1;
                    countB[i] = countB[i - 1] + ((digit == b) ? 1 : 0);
                }

                int size = n + 1;
                FenwickTree[][] trees = new FenwickTree[2][2];

                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 2; j++) {
                        trees[i][j] = new FenwickTree(size);
                    }
                }

                for (int j = 0; j <= n; j++) {
                    if (j >= k) {
                        int idx = j - k;
                        trees[pa[idx]][pb[idx]].update(countB[idx], D[idx]);
                    }

                    if (j > 0) {
                        int needP = 1 - pa[j];
                        int needQ = pb[j];

                        if (countB[j] > 0) {
                            int bestVal = trees[needP][needQ].query(countB[j] - 1);
                            if (bestVal != FenwickTree.INF) {
                                ans = Math.max(ans, D[j] - bestVal);
                            }
                        }
                    }
                }
            }
        }

        return ans;
    }
}


or


class Solution {
    public int maxDifference(String s, int k) {
        int n = s.length();
        int[][] pre = new int[5][n];
        int[][] closestRight = new int[5][n];

        for (int x = 0; x < 5; x++) {
            Arrays.fill(closestRight[x], n);
            for (int i = 0; i < n; i++) {
                int num = s.charAt(i) - '0';
                pre[x][i] = (num == x) ? 1 : 0;
                if (i > 0) pre[x][i] += pre[x][i - 1];
            }
            for (int i = n - 1; i >= 0; i--) {
                int num = s.charAt(i) - '0';
                if (i < n - 1) closestRight[x][i] = closestRight[x][i + 1];
                if (num == x) closestRight[x][i] = i;
            }
        }

        int ans = Integer.MIN_VALUE;

        for (int odd = 0; odd <= 4; odd++) {
            for (int even = 0; even <= 4; even++) {
                if (odd == even) continue;

                int[][][] suf = new int[2][2][n];
                for (int[][] matrix : suf)
                    for (int[] row : matrix)
                        Arrays.fill(row, Integer.MIN_VALUE);

                for (int end = 0; end < n; end++) {
                    int oddParity = pre[odd][end] % 2;
                    int evenParity = pre[even][end] % 2;
                    if (pre[odd][end] > 0 && pre[even][end] > 0) {
                        suf[oddParity][evenParity][end] = pre[odd][end] - pre[even][end];
                    }
                }

                for (int op = 0; op < 2; op++) {
                    for (int ep = 0; ep < 2; ep++) {
                        for (int i = n - 2; i >= 0; i--) {
                            suf[op][ep][i] = Math.max(suf[op][ep][i], suf[op][ep][i + 1]);
                        }
                    }
                }

                for (int start = 0; start < n; start++) {
                    int minEnd = start + k - 1;
                    if (minEnd >= n) break;

                    int oddBelow = start == 0 ? 0 : pre[odd][start - 1];
                    int evenBelow = start == 0 ? 0 : pre[even][start - 1];
                    int goodOddParity = (oddBelow + 1) % 2;
                    int goodEvenParity = evenBelow % 2;

                    int query = Math.max(minEnd, Math.max(closestRight[odd][start], closestRight[even][start]));
                    if (query >= n) continue;

                    int val = suf[goodOddParity][goodEvenParity][query];
                    if (val == Integer.MIN_VALUE) continue;

                    ans = Math.max(ans, val - oddBelow + evenBelow);
                }
            }
        }

        return ans;
    }
}


or


import java.util.*;

class Solution {
    public int maxDifference(String s, int k) {
        int ans = Integer.MIN_VALUE;
        for (char a = '0'; a <= '4'; a++) {
            for (char b = '0'; b <= '4'; b++) {
                if (a == b) continue;

                // Use a map to simulate the defaultdict(lambda: inf) from Python
                Map<String, Integer> seen = new HashMap<>();
                int[] pa = new int[s.length() + 1];
                int[] pb = new int[s.length() + 1];
                int ii = 0;

                for (int i = 0; i < s.length(); i++) {
                    pa[i + 1] = pa[i] + (s.charAt(i) == a ? 1 : 0);
                    pb[i + 1] = pb[i] + (s.charAt(i) == b ? 1 : 0);

                    while (ii <= i - k + 1 && pa[ii] < pa[i + 1] && pb[ii] < pb[i + 1]) {
                        int keyA = pa[ii] % 2;
                        int keyB = pb[ii] % 2;
                        String key = keyA + "," + keyB;
                        int diff = pa[ii] - pb[ii];
                        seen.put(key, Math.min(seen.getOrDefault(key, Integer.MAX_VALUE), diff));
                        ii++;
                    }

                    int keyA = 1 - pa[i + 1] % 2;
                    int keyB = pb[i + 1] % 2;
                    String key = keyA + "," + keyB;
                    int diff = pa[i + 1] - pb[i + 1];
                    if (seen.containsKey(key)) {
                        ans = Math.max(ans, diff - seen.get(key));
                    }
                }
            }
        }
        return ans;
    }
}
