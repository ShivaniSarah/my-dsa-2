https://leetcode.com/problems/find-the-median-of-the-uniqueness-array/description/

3134. Find the Median of the Uniqueness Array
Hard
Topics
Companies
Hint
You are given an integer array nums. The uniqueness array of nums is the sorted array that contains the number of distinct elements of all the subarrays of nums. In other words, it is a sorted array consisting of distinct(nums[i..j]), for all 0 <= i <= j < nums.length.

Here, distinct(nums[i..j]) denotes the number of distinct elements in the subarray that starts at index i and ends at index j.

Return the median of the uniqueness array of nums.

Note that the median of an array is defined as the middle element of the array when it is sorted in non-decreasing order. If there are two choices for a median, the smaller of the two values is taken.

 

Example 1:

Input: nums = [1,2,3]

Output: 1

Explanation:

The uniqueness array of nums is [distinct(nums[0..0]), distinct(nums[1..1]), distinct(nums[2..2]), distinct(nums[0..1]), distinct(nums[1..2]), distinct(nums[0..2])] which is equal to [1, 1, 1, 2, 2, 3]. The uniqueness array has a median of 1. Therefore, the answer is 1.

Example 2:

Input: nums = [3,4,3,4,5]

Output: 2

Explanation:

The uniqueness array of nums is [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2.

Example 3:

Input: nums = [4,3,5,4]

Output: 2

Explanation:

The uniqueness array of nums is [1, 1, 1, 1, 2, 2, 2, 3, 3, 3]. The uniqueness array has a median of 2. Therefore, the answer is 2.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105


# java


class Solution {
    private long m;
    private int[] nums;

    public int medianOfUniquenessArray(int[] nums) {
        int n = nums.length;
        this.nums = nums;
        m = (1L + n) * n / 2;
        int l = 0, r = n;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(int mx) {
        Map<Integer, Integer> cnt = new HashMap<>();
        long k = 0;
        for (int l = 0, r = 0; r < nums.length; ++r) {
            int x = nums[r];
            cnt.merge(x, 1, Integer::sum);
            while (cnt.size() > mx) {
                int y = nums[l++];
                if (cnt.merge(y, -1, Integer::sum) == 0) {
                    cnt.remove(y);
                }
            }
            k += r - l + 1;
            if (k >= (m + 1) / 2) {
                return true;
            }
        }
        return false;
    }
}


or


class Solution {
  public int medianOfUniquenessArray(int[] nums) {
    final int n = nums.length;
    final long subarrayCount = n * (n + 1L) / 2;
    final long medianCount = (subarrayCount + 1) / 2;
    int l = 1;
    int r = n;

    while (l < r) {
      final int m = (l + r) / 2;
      if (subarrayWithAtMostKDistinct(nums, m) >= medianCount)
        r = m;
      else
        l = m + 1;
    }

    return l;
  }

  // Similar to 992. Subarrays with K Different Integers
  private long subarrayWithAtMostKDistinct(int[] nums, int k) {
    long res = 0;
    HashMap<Integer, Integer> count = new HashMap<>();

    for (int l = 0, r = 0; r < nums.length; ++r) {
      if (count.merge(nums[r], 1, Integer::sum) == 1)
        --k;
      while (k == -1)
        if (count.merge(nums[l++], -1, Integer::sum) == 0)
          ++k;
      res += r - l + 1; // nums[l..r], nums[l + 1..r], ..., nums[r]
    }

    return res;
  }
}


or


// Binary Search + Sliding Window


class Solution {
    public int medianOfUniquenessArray(int[] A) {
        int n = A.length, left = 1, right = n;
        long total = (long) n * (n + 1) / 2;
        while (left < right) {
            int k = (left + right) / 2;
            if (atmost(A, k) * 2 >= total) {
                right = k;
            } else {
                left = k + 1;
            }
        }
        return left;
    }

    private long atmost(int[] A, int k) {
        long res = 0;
        Map<Integer, Integer> count = new HashMap<>();
        int i = 0;
        for (int j = 0; j < A.length; j++) {
            count.put(A[j], count.getOrDefault(A[j], 0) + 1);
            while (count.size() > k) {
                count.put(A[i], count.get(A[i]) - 1);
                if (count.get(A[i]) == 0) {
                    count.remove(A[i]);
                }
                i++;
            }
            res += j - i + 1;
        }
        return res;
    }
}


or


class Solution {
    // counts number of substrings with less than or equal to max distinct values
    long lessThan(int max, int[] nums){
        int p = 0; // left pointer
        Map<Integer,Integer> cnt = new HashMap<>();// distinct numbers count
        long ans = 0;
        for(int i = 0; i<nums.length; i++){ // right pointer
            cnt.put(nums[i],cnt.getOrDefault(nums[i],0)+1);
            // too many distinct number, reducing window length
            while(cnt.size() > max){
                int g = cnt.get(nums[p]);
                if(g == 1) cnt.remove(nums[p]);
                else cnt.put(nums[p],g-1);
                p++;
            }
            ans+=i-p+1; // size of current window is i-p+1
        }
        return ans;
    }
    public int medianOfUniquenessArray(int[] nums) {
        long length = nums.length; // long avoids overflow
        long total = (length*(length+1))/2;
        long middle = 1+((total-1)/2);
        int lo = 0, hi = nums.length;
        while (lo < hi) { // binary search
            int mid = lo + (hi - lo + 1) / 2;
            if (lessThan(mid,nums) < middle){
                lo = mid; // too few or enough valid subarrays
            } else {
                hi = mid-1; // too many valid subarrays
            }
        }
        return lo+1;
    }
}


or


// binary search + sliding window


class Solution {
    public int medianOfUniquenessArray(int[] a) {
        int n = a.length;
        int l = 1, r = n;
        long tot = 1l * n * (n + 1) >>> 1;
        int[] cnt = new int[100001];
        while (l < r) {
            int m = l + r >>> 1;
            if (2 * atMost(a, cnt, m) >= tot) r = m;
            else l = m + 1;
        }
        return l;
    }

    long atMost(int[] a, int[] cnt, int m) {
        int n = a.length;
        int i = 0;
        long res = 0;
        for (int j = 0; j < n; j++) {
            if (++cnt[a[j]] == 1) m--;
            while (m < 0) {
                if (--cnt[a[i++]] == 0) m++;
            }
            res += j - i + 1;
        }
        while (i < n) --cnt[a[i++]];
        return res;
    }
}
