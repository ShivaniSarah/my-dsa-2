https://leetcode.com/problems/subsequence-with-the-minimum-score/description/

2565. Subsequence With the Minimum Score
Hard
Topics
Companies
Hint
You are given two strings s and t.

You are allowed to remove any number of characters from the string t.

The score of the string is 0 if no characters are removed from the string t, otherwise:

Let left be the minimum index among all removed characters.
Let right be the maximum index among all removed characters.
Then the score of the string is right - left + 1.

Return the minimum possible score to make t a subsequence of s.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

 

Example 1:

Input: s = "abacaba", t = "bzaa"
Output: 1
Explanation: In this example, we remove the character "z" at index 1 (0-indexed).
The string t becomes "baa" which is a subsequence of the string "abacaba" and the score is 1 - 1 + 1 = 1.
It can be proven that 1 is the minimum score that we can achieve.
Example 2:

Input: s = "cde", t = "xyz"
Output: 3
Explanation: In this example, we remove characters "x", "y" and "z" at indices 0, 1, and 2 (0-indexed).
The string t becomes "" which is a subsequence of the string "cde" and the score is 2 - 0 + 1 = 3.
It can be proven that 3 is the minimum score that we can achieve.
 

Constraints:

1 <= s.length, t.length <= 105
s and t consist of only lowercase English letters.


# java


class Solution {
    private int m;
    private int n;
    private int[] f;
    private int[] g;

    public int minimumScore(String s, String t) {
        m = s.length();
        n = t.length();
        f = new int[n];
        g = new int[n];
        for (int i = 0; i < n; ++i) {
            f[i] = 1 << 30;
            g[i] = -1;
        }
        for (int i = 0, j = 0; i < m && j < n; ++i) {
            if (s.charAt(i) == t.charAt(j)) {
                f[j] = i;
                ++j;
            }
        }
        for (int i = m - 1, j = n - 1; i >= 0 && j >= 0; --i) {
            if (s.charAt(i) == t.charAt(j)) {
                g[j] = i;
                --j;
            }
        }
        int l = 0, r = n;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(int len) {
        for (int k = 0; k < n; ++k) {
            int i = k - 1, j = k + len;
            int l = i >= 0 ? f[i] : -1;
            int r = j < n ? g[j] : m + 1;
            if (l < r) {
                return true;
            }
        }
        return false;
    }
}

or


class Solution {
    public int minimumScore(String s, String t) {
    int ss = s.length(), st = t.length(), k = st - 1;
    int[] dp = new int[st];
    Arrays.fill(dp, -1);
    for (int i = ss - 1; i >= 0 && k >= 0; --i)
        if (s.charAt(i) == t.charAt(k))
            dp[k--] = i;
    int res = k + 1;
    for (int i = 0, j = 0; i < ss && j < st && res > 0; ++i)
        if (s.charAt(i) == t.charAt(j)) {
            for (; k < st && dp[k] <= i; ++k);
            res = Math.min(res, k - (++j));
        }
    return res;
}
}


or


// greedy

class Solution {
    public int minimumScore(String s, String t) {
        int n = s.length(), m = t.length();
        
        // Check if t is a subsequence of s
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (j < m && s.charAt(i) == t.charAt(j)) j++;
            if (j == m) return 0;
        }

        int[] firstRemovedIndexFromLeft = new int[n];
        int left = 0;
        for (int i = 0; i < n; i++) {
            if (left < m && s.charAt(i) == t.charAt(left)) {
                left++;
            }
            firstRemovedIndexFromLeft[i] = left;
        }

        int res = m;
        int right = m - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (right >= firstRemovedIndexFromLeft[i]) {
                res = Math.min(res, right - firstRemovedIndexFromLeft[i] + 1);
            }
            if (right >= 0 && s.charAt(i) == t.charAt(right)) {
                right--;
            }
            res = Math.min(res, right + 1);
        }

        return res;
    }
}


or


class Solution {
    public int minimumScore(String s, String t) {
        int n = s.length(), m = t.length();
        
        // Check if t is a subsequence of s
        int j = 0;
        for (int i = 0; i < n; i++) {
            if (j < m && s.charAt(i) == t.charAt(j)) j++;
            if (j == m) return 0;
        }

        int[] firstRemovedIndexFromLeft = new int[n];
        int left = 0;
        for (int i = 0; i < n; i++) {
            if (left < m && s.charAt(i) == t.charAt(left)) {
                left++;
            }
            firstRemovedIndexFromLeft[i] = left;
        }

        int res = m;
        int right = m - 1;
        for (int i = n - 1; i >= 0; i--) {
            if (right >= firstRemovedIndexFromLeft[i]) {
                res = Math.min(res, right - firstRemovedIndexFromLeft[i] + 1);
            }
            if (right >= 0 && s.charAt(i) == t.charAt(right)) {
                right--;
            }
            res = Math.min(res, right + 1);
        }

        return res;
    }
}


or

// Binary Search + Sliding Window + Prefix array | O(N*log(N))

class Solution {
    public void makePrefix(int[] left, int[] right, String s, String t) {
        int n = s.length(), m = t.length();
        for (int i = 0, j = 0; i < n && j < m; i++) {
            if (s.charAt(i) == t.charAt(j)) {
                left[j] = i;
                j++;
            }
        }
        for (int i = n - 1, j = m - 1; i >= 0 && j >= 0; i--) {
            if (s.charAt(i) == t.charAt(j)) {
                right[j] = i;
                j--;
            }
        }
    }

    public boolean canRemove(int[] left, int[] right, int m, int len) {
        if (m == len) return true;
        if (right[m] != -1 || left[len - m - 1] != -1) return true;
        for (int i = 0, j = m + 1; j < len; i++, j++) {
            if (left[i] != -1 && right[j] != -1 && left[i] < right[j]) return true;
        }
        return false;
    }

    public int minimumScore(String s, String t) {
        int m = t.length();
        int[] left = new int[m];
        int[] right = new int[m];
        Arrays.fill(left, -1);
        Arrays.fill(right, -1);

        makePrefix(left, right, s, t);

        int l = 0, h = m, res = -1;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (canRemove(left, right, mid, m)) {
                res = mid;
                h = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
}
