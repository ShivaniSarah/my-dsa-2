https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones/description/

You are given an integer array, nums, and an integer k. nums comprises of only 0's and 1's. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that nums has k consecutive 1's.

 

Example 1:

Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.
Example 2:

Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].
Example 3:

Input: nums = [1,1,0,1], k = 2
Output: 0
Explanation: nums already has 2 consecutive 1's.
 

Constraints:

1 <= nums.length <= 105
nums[i] is 0 or 1.
1 <= k <= sum(nums)


# java

class Solution {
    public int minMoves(int[] nums, int k) {
        List<Integer> arr = new ArrayList<>();
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            if (nums[i] != 0) {
                arr.add(i);
            }
        }
        int m = arr.size();
        int[] s = new int[m + 1];
        for (int i = 0; i < m; ++i) {
            s[i + 1] = s[i] + arr.get(i);
        }
        long ans = 1 << 60;
        int x = (k + 1) / 2;
        int y = k - x;
        for (int i = x - 1; i < m - y; ++i) {
            int j = arr.get(i);
            int ls = s[i + 1] - s[i + 1 - x];
            int rs = s[i + 1 + y] - s[i + 1];
            long a = (j + j - x + 1L) * x / 2 - ls;
            long b = rs - (j + 1L + j + y) * y / 2;
            ans = Math.min(ans, a + b);
        }
        return (int) ans;
    }
}


or



class Solution {
  public int minMoves(int[] nums, int k) {
    List<Integer> ones = new ArrayList<>();

    for (int i = 0; i < nums.length; ++i)
      if (nums[i] == 1)
        ones.add(i);

    final int median = ones.get(getMedIndex(0, k));
    int moves = 0;
    for (int i = 0; i < k; ++i)
      moves += Math.abs(ones.get(i) - median);

    int ans = moves;

    for (int i = 1; i <= ones.size() - k; ++i) {
      final int oldMedianIndex = ones.get(getMedIndex(i - 1, k));
      final int newMedianIndex = ones.get(getMedIndex(i, k));
      if (k % 2 == 1)
        moves += newMedianIndex - oldMedianIndex;
      moves -= newMedianIndex - ones.get(i - 1);
      moves += ones.get(i + k - 1) - newMedianIndex;
      ans = Math.min(ans, moves);
    }

    return ans - nThSum((k - 1) / 2) - nThSum(k / 2);
  }

  // Returns the median index of [i..i + k).
  private int getMedIndex(int i, int k) {
    return (i + (i + k - 1)) / 2;
  }

  // Returns 1 + 2 + ... + n
  private int nThSum(int n) {
    return n * (n + 1) / 2;
  }
}



or


class Solution {
    public int minMoves(int[] nums, int k) {
        // Create a list to hold indices where nums[i] = 1
        List<Integer> indicesOfOnes = new ArrayList<>();
        int n = nums.length;
      
        // Collect indices of ones in the array
        for (int i = 0; i < n; ++i) {
            if (nums[i] == 1) {
                indicesOfOnes.add(i);
            }
        }
        int m = indicesOfOnes.size(); // Size of the subset array
        int[] prefixSums = new int[m + 1]; // Prefix sum array
      
        // Calculate prefix sums of indices
        for (int i = 0; i < m; ++i) {
            prefixSums[i + 1] = prefixSums[i] + indicesOfOnes.get(i);
        }
      
        long minMoves = Long.MAX_VALUE; // Initialize minMoves with a large value
        int leftHalf = (k + 1) / 2; // Number of elements in the left half
        int rightHalf = k - leftHalf; // Number of elements in the right half
      
        // Iterate through the array to find the minimum moves required
        for (int i = leftHalf - 1; i < m - rightHalf; ++i) {
            int currentIndex = indicesOfOnes.get(i); // Current index in original array
            int leftSum = prefixSums[i + 1] - prefixSums[i + 1 - leftHalf]; // Sum of left half
            int rightSum = prefixSums[i + 1 + rightHalf] - prefixSums[i + 1]; // Sum of right half
          
            // Calculate the left and right cost for current index
            long leftCost = (currentIndex + currentIndex - leftHalf + 1L) * leftHalf / 2 - leftSum;
            long rightCost = rightSum - (currentIndex + 1L + currentIndex + rightHalf) * rightHalf / 2;
          
            // Update minMoves if the sum of costs is smaller
            minMoves = Math.min(minMoves, leftCost + rightCost);
        }
      
        // Cast the long minMoves to int before returning
        return (int) minMoves;
    }
}


or

// two pointers with prefix sum

class Solution {
    public static int minMoves(int[] nums, int k) {
        ArrayList<Integer> ones = new ArrayList<>();
        for (int i=0; i<nums.length; i++) {
        	if (nums[i] == 1) ones.add(i);
        }
        int[] zeroespref = new int[nums.length];
        for (int i=0; i<nums.length; i++) {
        	if (i == 0) {
        		zeroespref[0] = (nums[0] == 0 ? 1 : 0);
        	}
        	else {
        		zeroespref[i] = zeroespref[i-1] + (nums[i] == 0 ? 1 : 0);
        	}
        }
        
        int n = ones.size();
        int right=k-1;
        int left=0;
        int mindist = 0;
        
        	// centered at 0
        for (int i=0; i<k; i++) {
        	mindist += zeroespref[ones.get(i)] - zeroespref[ones.get(0)];
        }
        
        int curdist = mindist;
        
        	// centered at i
        for (int i=1; i<n; i++) {
        	int zeroeschange = zeroespref[ones.get(i)] - zeroespref[ones.get(i-1)];
        	curdist += (i - left)*zeroeschange;
        	curdist -= (right - i + 1)*zeroeschange;
        	
        	while (right+1<n) {
        		int zeroesleft = zeroespref[ones.get(i)] - zeroespref[ones.get(left)];
        		int zeroesright = zeroespref[ones.get(right+1)] - zeroespref[ones.get(i)];
        		if (zeroesright < zeroesleft) {
        			curdist -= zeroesleft;
        			curdist += zeroesright;
            		right++;
            		left++;
        		}
        		else break;
        	}
        	mindist = Math.min(mindist, curdist);
        	
        	if (right == i && right+1 < n) {
        		int zeroesleft = zeroespref[ones.get(i)] - zeroespref[ones.get(left)];
        		int zeroesright = zeroespref[ones.get(right+1)] - zeroespref[ones.get(i)];
    			curdist -= zeroesleft;
    			curdist += zeroesright;
        		right++;
        		left++;
        	}
        }
        
        return mindist;
        
    }
}

or


class Solution {
    public int minMoves(int[] a, int k) {
		int n = a.length;
		ArrayList<Integer> oneInd = new ArrayList<>();
		for (int i = 0; i < n; i++)
			if (a[i] == 1)
				oneInd.add(i);
		int prfsm[] = new int[oneInd.size()];
		for (int i = 0; i < oneInd.size(); i++)
			prfsm[i] += oneInd.get(i) + (i == 0 ? 0 : prfsm[i - 1]);
		int ans = Integer.MAX_VALUE;
		int left = 0, right = k - 1;
		while (right < oneInd.size()) {
			if (k % 2 == 1) {
				int medianInd = left + (k + 1) / 2 - 1;
				int rad = medianInd - left;
				int res = (prfsm[right] - prfsm[medianInd])
						- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1])) - rad * (rad + 1);
				ans = Math.min(ans, res);
			} else {
				int medianInd = left + (k + 1) / 2 - 1;
				int rad = medianInd - left;
				int res = (prfsm[right] - prfsm[medianInd])
						- ((medianInd == 0 ? 0 : prfsm[medianInd - 1]) - (left == 0 ? 0 : prfsm[left - 1]))
						- oneInd.get(medianInd) - rad * (rad + 1) - (rad + 1);
				ans = Math.min(ans, res);
			}
			left++;
			right++;
		}
		return ans;
	}
}

or

// Sliding window, prefix sum

class Solution {
    private List<Integer> list;
    public int minMoves(int[] nums, int k) {
        if(nums.length == k) return 0;
        int Le = 0, Re = 0, mid, L = 0, R = 0, cost, minCost = Integer.MAX_VALUE, j;
        list = new ArrayList<>();
        for(int i = 0; i<nums.length; ++i){
            if(nums[i] == 1){
                list.add(i);
            }
        }
        int n = list.size(), prevMid;
        mid = 0 + ((k-1)-0)/2;
        Le = mid; Re = k-mid-1;
        for(int i = 0; i < mid; ++i){
            L += (list.get(mid) - list.get(i)) - (mid-i);
        }
        for(int i = mid + 1; i < k; ++i){
            R += (list.get(i) - list.get(mid)) - (i-mid);
        }
        minCost = L + R;
        
        for(int i = 1; i <= n-k; ++i){
            j = i + k - 1;
            prevMid = mid;
            mid = mid + 1;
            L = L - cost(i-1, prevMid) + Le * cost(prevMid, mid);

            R = R - Re * cost(prevMid, mid) + cost(mid, j);
            cost = L + R;
            minCost = (int)Math.min(cost, minCost);
        }
        return minCost;
    }
    

    private int cost(int i, int j){
        return list.get(j) - list.get(i) - (j-i);
    }
}

or


// greedy

import java.util.ArrayList;
import java.util.List;

class Solution {
    public int minMoves(int[] nums, int k) {
      
        List<Integer> ones = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                ones.add(i);
            }
        }
        int prefSum[]=new int[ones.size()];
        prefSum[0] =ones.get(0);
        for(int i = 1; i < ones.size(); i++)
            prefSum[i] = prefSum[i - 1] + ones.get(i);

        
        int minMoves = Integer.MAX_VALUE;
        int left = 0;
        int right = k - 1;
        while(right<ones.size()){
            if(k%2==0){
                int mid = (left + right) / 2;
                int radius=mid-left;
                int excessMoves;int total=0;
               int lsum=(mid == 0 ? 0 : prefSum[mid-1]) - (left == 0 ? 0 : prefSum[left-1]);
              int rsum=prefSum[right]-prefSum[mid] ;
               excessMoves=radius*(radius+1)+(radius+1);
               total=rsum-lsum-ones.get(mid)-(excessMoves);
               minMoves=Math.min(minMoves,total);
            }
            else{
                int mid = (left + right) / 2;
                int radius=mid-left;
                int excessMoves;int total=0;
               int lsum=(mid == 0 ? 0 : prefSum[mid - 1]) - (left == 0 ? 0 : prefSum[left - 1]);
              int rsum=prefSum[right]-prefSum[mid] ;
               excessMoves=radius*(radius+1);
               total=rsum-lsum-(excessMoves);
                minMoves=Math.min(minMoves,total);
            }
            left+=1;
            right+=1;
        }
       
   return minMoves;
    }
}

or


// gaps pitcher pouring

class Solution {
    public int minMoves(int[] nums, int k) {
        var gaps = new ArrayList<Integer>();
        for(int i = 0, last = -1; i < nums.length; ++i){
            if (nums[i] == 1){
                if (last > -1){
                    gaps.add(i-1-last);
                }
                last = i;
            }
        }
        int lsum = 0, rsum = 0, wlsum = 0, wrsum = 0;
        for(int i = k/2-1; i >= 0; --i){
            lsum += gaps.get(i);//lsum = 3+0
            wlsum += lsum;//wlsum = 1*3+2*0
        }
        for(int i = k/2; i < k-1; ++i){
            rsum += gaps.get(i);//rsum = 2+5
            wrsum += rsum;//wrsum = 2*2+1*5
        }
        int ans = wlsum+wrsum;
        for(int p = 0, q = k/2, r = k-1; r < gaps.size(); ++p, ++q, ++r){
            wlsum += (k/2)*gaps.get(q) - lsum;
            lsum += gaps.get(q) - gaps.get(p);
            
            rsum += gaps.get(r) - gaps.get(q);
            wrsum += rsum-((k-1)/2)*gaps.get(q);
            
            ans = Math.min(ans,wlsum+wrsum);
        }
        return ans;
    }
}


or

// greedy+ sliding window+ prefix sum

class Solution {
  public int minMoves(int[] nums, int k) {
    if (k == 1) {
      return 0;
    }

    List<Integer> gaps = new ArrayList<>();

    int prev = -1, i = 0;

    while (i < nums.length) {
      if (nums[i] == 1) {
        if (prev == -1) {
          gaps.add(0);
        } else {
          gaps.add(gaps.get(gaps.size() - 1) + (i - prev - 1));
        }
        prev = i;
      }
      i++;
    }

    int minimumMoves = Integer.MAX_VALUE;
    int j = 0;
    i = 0;
    int countMoves = 0;
    while (j < gaps.size() - 1) {
      if (j < k - 1) {
        countMoves += (gaps.get(j + 1) - gaps.get(j)) * Math.min(j + 1, k - j - 1);
        j++;
        if (j == k - 1) {
          minimumMoves = Math.min(minimumMoves, countMoves);
        }
        continue;
      }

      int deltaL = gaps.get(i + k / 2) - gaps.get(i);
      int deltaR = gaps.get(j + 1) - gaps.get(j + 1 - k / 2);
      countMoves += deltaR - deltaL;

      minimumMoves = Math.min(minimumMoves, countMoves);
      i++;
      j++;
    }

    return minimumMoves;
  }
}
