https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/description/


2472. Maximum Number of Non-overlapping Palindrome Substrings
Hard
Topics
Companies
Hint
You are given a string s and a positive integer k.

Select a set of non-overlapping substrings from the string s that satisfy the following conditions:

The length of each substring is at least k.
Each substring is a palindrome.
Return the maximum number of substrings in an optimal selection.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "abaccdbbd", k = 3
Output: 2
Explanation: We can select the substrings underlined in s = "abaccdbbd". Both "aba" and "dbbd" are palindromes and have a length of at least k = 3.
It can be shown that we cannot find a selection with more than two valid substrings.
Example 2:

Input: s = "adbcda", k = 2
Output: 0
Explanation: There is no palindrome substring of length at least 2 in the string.
 

Constraints:

1 <= k <= s.length <= 2000
s consists of lowercase English letters.


# java


class Solution {
    private boolean[][] dp;
    private int[] f;
    private String s;
    private int n;
    private int k;

    public int maxPalindromes(String s, int k) {
        n = s.length();
        f = new int[n];
        this.s = s;
        this.k = k;
        dp = new boolean[n][n];
        for (int i = 0; i < n; ++i) {
            Arrays.fill(dp[i], true);
            f[i] = -1;
        }
        for (int i = n - 1; i >= 0; --i) {
            for (int j = i + 1; j < n; ++j) {
                dp[i][j] = s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1];
            }
        }
        return dfs(0);
    }

    private int dfs(int i) {
        if (i >= n) {
            return 0;
        }
        if (f[i] != -1) {
            return f[i];
        }
        int ans = dfs(i + 1);
        for (int j = i + k - 1; j < n; ++j) {
            if (dp[i][j]) {
                ans = Math.max(ans, 1 + dfs(j + 1));
            }
        }
        f[i] = ans;
        return ans;
    }
}


or

class Solution {
  public int maxPalindromes(String s, int k) {
    final int n = s.length();
    // dp[i] := the maximum number of substrings in the first i chars of s
    int[] dp = new int[n + 1];

    // If a palindrome is a subString of another palindrome, then considering
    // the longer palindrome won't increase the number of non-overlapping
    // palindromes. So, we only need to consider the shorter one. Also,
    // considering palindromes with both k length and k + 1 length ensures that
    // we look for both even and odd length palindromes.
    for (int i = k; i <= n; ++i) {
      dp[i] = dp[i - 1];
      // Consider palindrome with length k.
      if (isPalindrome(s, i - k, i - 1))
        dp[i] = Math.max(dp[i], 1 + dp[i - k]);
      // Consider palindrome with length k + 1.
      if (isPalindrome(s, i - k - 1, i - 1))
        dp[i] = Math.max(dp[i], 1 + dp[i - k - 1]);
    }

    return dp[n];
  }

  // Returns true is s[i..j) is a palindrome.
  private boolean isPalindrome(String s, int l, int r) {
    if (l < 0)
      return false;
    while (l < r)
      if (s.charAt(l++) != s.charAt(r--))
        return false;
    return true;
  }
}

or

class Solution {
  public int maxPalindromes(String s, int k) {
    int n = s.length(), ans = 0, start = 0;
    for (int center = 0; center < 2 * n; center++) {
        int left = center / 2;
        int right = left + center % 2;
        while (left >= start && right < n && s.charAt(left) == s.charAt(right)) {
            if (right + 1 - left >= k) {
                ans++;
                start = right + 1;
                break;
            }
            left--; right++;
        }
    }
    return ans;
}
}


or

class Solution {
    public int maxPalindromes(String s, int k) {
        int n = s.length(), last = Integer.MIN_VALUE, ans = 0;
        List<List<Integer>> intervals = new ArrayList();
        for (int center = 0; center < 2 * n; center++) {
            int left = center / 2;
            int right = left + center % 2;
            while (left >= 0 && right < n && s.charAt(left) == s.charAt(right)) {
                if (right + 1 - left >= k) {
                    intervals.add(new ArrayList<Integer>(Arrays.asList(left, right + 1)));
                    break;
                }
                left--;
                right++;
            }
        }
        for (List<Integer> v : intervals) {
            if (v.get(0) >= last) {
                last = v.get(1);
                ans++;
            } else if (v.get(1) < last)
                last = v.get(1);
        }
        return ans;
    }
}


or


// greedy


class Solution {
    public int maxPalindromes(String s, int k) {
        int count = 0;
        int idx = 0;
        
        // greedily check for palindromes of length k or k + 1
        while (idx <= s.length() - k) {
            if (isPalindrome(s, idx, idx + k - 1)) {
                count++;
                idx += k;
            } else if (idx < s.length() - k && isPalindrome(s, idx, idx + k)) {
                count++;
                idx += k + 1;
            } else {
                idx++;
            }
        }
        return count;
    }
    
    private boolean isPalindrome(String s, int left, int right) {
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}


or

// dp

class Solution {
    public int maxPalindromes(String s, int k) {
        int ans = 0, n = s.length();
        int[] dp = new int[n + 1];
        for (int i = k - 1; i < n; i++) {
            dp[i + 1] = dp[i];
            if (helper(s, i-k+1, i))       dp[i + 1] = Math.max(dp[i + 1], 1 + dp[i - k + 1]);
            if (i-k>=0 && helper(s,i-k,i)) dp[i + 1] = Math.max(dp[i + 1], 1 + dp[i - k]);
        }
        return dp[n];
    }
    boolean helper(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l) != s.charAt(r)) return false;
            l++; r--;
        }
        return true;
    }
}


or



class Solution {
    public int maxPalindromes(String s, int k) {
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                int len = (j - i) + 1;
                if (len > k + 1) break; // this is the key 
                if (len >= k && isPalindrome(s, i, j)) {
                    ans++; i = j;  break;
                }
            }
        }
        return ans;
    }

    boolean isPalindrome(String s, int l, int r) {
        while (l < r) {
            if (s.charAt(l++) != s.charAt(r--))  return false;
        }
        return true;
    }
}
