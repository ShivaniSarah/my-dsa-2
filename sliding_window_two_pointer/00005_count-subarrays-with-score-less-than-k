https://leetcode.com/problems/count-subarrays-with-score-less-than-k/description/


2302. Count Subarrays With Score Less Than K

The score of an array is defined as the product of its sum and its length.

For example, the score of [1, 2, 3, 4, 5] is (1 + 2 + 3 + 4 + 5) * 5 = 75.
Given a positive integer array nums and an integer k, return the number of non-empty subarrays of nums whose score is strictly less than k.

A subarray is a contiguous sequence of elements within an array.

 

Example 1:

Input: nums = [2,1,4,3,5], k = 10
Output: 6
Explanation:
The 6 subarrays having scores less than 10 are:
- [2] with score 2 * 1 = 2.
- [1] with score 1 * 1 = 1.
- [4] with score 4 * 1 = 4.
- [3] with score 3 * 1 = 3. 
- [5] with score 5 * 1 = 5.
- [2,1] with score (2 + 1) * 2 = 6.
Note that subarrays such as [1,4] and [4,3,5] are not considered because their scores are 10 and 36 respectively, while we need scores strictly less than 10.
Example 2:

Input: nums = [1,1,1], k = 5
Output: 5
Explanation:
Every subarray except [1,1,1] has a score less than 5.
[1,1,1] has a score (1 + 1 + 1) * 3 = 9, which is greater than 5.
Thus, there are 5 subarrays having scores less than 5.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 1015



# java

// best O(n)- sliding window

class Solution {
  public long countSubarrays(int[] nums, long k) {
    long ans = 0;
    long sum = 0;

    for (int l = 0, r = 0; r < nums.length; ++r) {
      sum += nums[r];
      while (sum * (r - l + 1) >= k)
        sum -= nums[l++];
      ans += r - l + 1;
    }

    return ans;
  }
}


or



class Solution {
    public long countSubarrays(int[] nums, long k) {
        int n = nums.length;
        long[] s = new long[n + 1];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + nums[i];
        }
        long ans = 0;
        for (int i = 1; i <= n; ++i) {
            int left = 0, right = i;
            while (left < right) {
                int mid = (left + right + 1) >> 1;
                if ((s[i] - s[i - mid]) * mid < k) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            ans += left;
        }
        return ans;
    }
}


or





class Solution {
    public long countSubarrays(int[] nums, long k) {
        long count = 0; // To store the number of subarrays
        long sum = 0; // Sum of the elements in the current subarray
        int start = 0; // Start index for the current subarray

        // Traverse through the array starting from the 0th element
        for (int end = 0; end < nums.length; ++end) {
            sum += nums[end]; // Add the current element to sum
          
            // Shrink the subarray from the left if the condition is violated
            // sum * length should be less than k
            while (sum * (end - start + 1) >= k) {
                sum -= nums[start]; // Removing the element from the start of subarray
                start++; // Increment the start index
            }
          
            // At this point, for each element nums[end], we find how many subarrays ending at 'end' are valid
            // The number of valid subarrays is given by the difference btw current end and the new start position
            count += end - start + 1;
        }
        return count; // Return the total count of valid subarrays
    }
}


or


class Solution {
    public long countSubarrays(int[] nums, long k) {
    long sum = 0, res = 0;
    for (int i = 0, j = 0; i < nums.length; ++i) {
        sum += nums[i];
        while (sum * (i - j + 1) >= k)
            sum -= nums[j++];
        res += i - j + 1;
    }
    return res;
}
}

