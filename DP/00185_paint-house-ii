https://leetcode.com/problems/paint-house-ii/description/



265 - Paint House II



There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an n x k cost matrix costs.

For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on...
Return the minimum cost to paint all houses.

 

Example 1:

Input: costs = [[1,5,3],[2,9,4]]
Output: 5
Explanation:
Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.
Example 2:

Input: costs = [[1,3],[2,4]]
Output: 5
 

Constraints:

costs.length == n
costs[i].length == k
1 <= n <= 100
2 <= k <= 20
1 <= costs[i][j] <= 20
 

Follow up: Could you solve it in O(nk) runtime?





# java








class Solution {
  public int minCostII(int[][] costs) {
    int prevIndex = -1; // the previous minimum index
    int prevMin1 = 0;   // the minimum cost so far
    int prevMin2 = 0;   // the second minimum cost so far

    for (int[] cost : costs) { // O(n)
      // the painted index that will achieve the minimum cost after painting the
      // current house
      int index = -1;
      // the minimum cost after painting the current house
      int min1 = Integer.MAX_VALUE;
      // the second minimum cost after painting the current house
      int min2 = Integer.MAX_VALUE;
      for (int i = 0; i < cost.length; ++i) { // O(k)
        final int theCost = cost[i] + (i == prevIndex ? prevMin2 : prevMin1);
        if (theCost < min1) {
          index = i;
          min2 = min1;
          min1 = theCost;
        } else if (theCost < min2) { // min1 <= theCost < min2
          min2 = theCost;
        }
      }
      prevIndex = index;
      prevMin1 = min1;
      prevMin2 = min2;
    }

    return prevMin1;
  }
}



or



 class Solution {
        public int minCostII(int[][] costs) {
            if (costs.length == 0 || costs[0].length == 0)
                return 0;
            int length = costs.length, colors = costs[0].length;
            int[][] dp = new int[length][colors];
            for (int i = 0; i < colors; i++)
                dp[0][i] = costs[0][i];
            for (int i = 1; i < length; i++) {
                for (int j = 0; j < colors; j++) {
                    int curCost = costs[i][j];
                    int prevMinSum = Integer.MAX_VALUE;
                    for (int k = 0; k < colors; k++) {
                        if (j == k)
                            continue;
                        prevMinSum = Math.min(prevMinSum, dp[i - 1][k]);
                    }
                    dp[i][j] = prevMinSum + curCost;
                }
            }
            int minCost = Integer.MAX_VALUE;
            for (int i = 0; i < colors; i++)
                minCost = Math.min(minCost, dp[length - 1][i]);
            return minCost;
        }
    }


or




 public class Solution {
        public int minCostII(int[][] costs) {

            if(costs != null && costs.length == 0) {
                return 0;
            }

            int prevMin = 0, prevSecondMin = 0, prevIdx = -1;

            for(int i = 0; i < costs.length; i++){

                int currMin = Integer.MAX_VALUE;
                int currSecondMin = Integer.MAX_VALUE;
                int currIdx = -1;

                for(int j = 0; j < costs[0].length; j++){ // go over all colors

                    costs[i][j] = costs[i][j] + (prevIdx == j ? prevSecondMin : prevMin);

                    if(costs[i][j] < currMin){
                        currSecondMin = currMin;
                        currMin = costs[i][j];
                        currIdx = j;
                    } else if (costs[i][j] < currSecondMin){
                        currSecondMin = costs[i][j];
                    }
                }
                prevMin = currMin;
                prevSecondMin = currSecondMin;
                prevIdx = currIdx;
            }
            return prevMin;
        }
    }


or



 public class Solution {
        public int minCostII(int[][] costs) {

            if(costs != null && costs.length == 0) {
                return 0;
            }

            int[][] dp = costs;
            int min1 = -1, min2 = -1;

            for (int i = 0; i < dp.length; i++) {
                int last1 = min1;
                int last2 = min2;
                min1 = -1; min2 = -1;
                for (int j = 0; j < dp[i].length; j++) {
                    if (j != last1) {
                        dp[i][j] += last1 < 0 ? 0 : dp[i - 1][last1];
                    } else {
                        dp[i][j] += last2 < 0 ? 0 : dp[i - 1][last2];
                    }

                    if (min1 < 0 || dp[i][j] < dp[i][min1]) {
                        min2 = min1;
                        min1 = j;
                    } else if (min2 < 0 || dp[i][j] < dp[i][min2]) {
                        min2 = j;
                    }
                }
            }

            return dp[dp.length - 1][min1];
        }
    }




or



class Solution {
    public int minCostII(int[][] costs) {
        int n = costs.length, k = costs[0].length;
        int[] f = costs[0].clone();
        for (int i = 1; i < n; ++i) {
            int[] g = costs[i].clone();
            for (int j = 0; j < k; ++j) {
                int t = Integer.MAX_VALUE;
                for (int h = 0; h < k; ++h) {
                    if (h != j) {
                        t = Math.min(t, f[h]);
                    }
                }
                g[j] += t;
            }
            f = g;
        }
        return Arrays.stream(f).min().getAsInt();
    }
}





or




class Solution {
  public int minCostII(int[][] costs) {
    int prevIndex = -1; // the previous minimum index
    int prevMin1 = 0;   // the minimum cost so far
    int prevMin2 = 0;   // the second minimum cost so far

    for (int[] cost : costs) { // O(n)
      // the painted index that will achieve the minimum cost after painting the
      // current house
      int index = -1;
      // the minimum cost after painting the current house
      int min1 = Integer.MAX_VALUE;
      // the second minimum cost after painting the current house
      int min2 = Integer.MAX_VALUE;
      for (int i = 0; i < cost.length; ++i) { // O(k)
        final int theCost = cost[i] + (i == prevIndex ? prevMin2 : prevMin1);
        if (theCost < min1) {
          index = i;
          min2 = min1;
          min1 = theCost;
        } else if (theCost < min2) { // min1 <= theCost < min2
          min2 = theCost;
        }
      }
      prevIndex = index;
      prevMin1 = min1;
      prevMin2 = min2;
    }

    return prevMin1;
  }
}




