https://leetcode.com/problems/constructing-two-increasing-arrays/description/


3269. Constructing Two Increasing Arrays ðŸ”’
Description
Given 2 integer arrays nums1 and nums2 consisting only of 0 and 1, your task is to calculate the minimum possible largest number in arrays nums1 and nums2, after doing the following.

Replace every 0 with an even positive integer and every 1 with an odd positive integer. After replacement, both arrays should be increasing and each integer should be used at most once.

Return the minimum possible largest number after applying the changes.

 

Example 1:

Input: nums1 = [], nums2 = [1,0,1,1]

Output: 5

Explanation:

After replacing, nums1 = [], and nums2 = [1, 2, 3, 5].

Example 2:

Input: nums1 = [0,1,0,1], nums2 = [1,0,0,1]

Output: 9

Explanation:

One way to replace, having 9 as the largest element is nums1 = [2, 3, 8, 9], and nums2 = [1, 4, 6, 7].

Example 3:

Input: nums1 = [0,1,0,0,1], nums2 = [0,0,0,1]

Output: 13

Explanation:

One way to replace, having 13 as the largest element is nums1 = [2, 3, 4, 6, 7], and nums2 = [8, 10, 12, 13].

 

Constraints:

0 <= nums1.length <= 1000
1 <= nums2.length <= 1000
nums1 and nums2 consist only of 0 and 1.



# java





class Solution {
  public int minLargest(int[] nums1, int[] nums2) {
    final int m = nums1.length;
    final int n = nums2.length;
    // dp[i][j] := the minimum largest number for the first i nums1 and the
    // first j nums2
    int[][] dp = new int[m + 1][n + 1];

    Arrays.stream(dp).forEach(A -> Arrays.fill(A, Integer.MAX_VALUE));
    dp[0][0] = 0;

    for (int i = 0; i <= m; ++i)
      for (int j = 0; j <= n; ++j) {
        if (i > 0)
          dp[i][j] = Math.min(dp[i][j], f(dp[i - 1][j], nums1[i - 1]));
        if (j > 0)
          dp[i][j] = Math.min(dp[i][j], f(dp[i][j - 1], nums2[j - 1]));
      }

    return dp[m][n];
  }

  // Returns the next number to fill in the array based on the previous number
  // and the current number.
  private int f(int prev, int num) {
    return prev + (prev % 2 == num ? 2 : 1);
  }
}



or



class Solution {
    public int minLargest(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        int[][] f = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            f[i][0] = nxt(f[i - 1][0], nums1[i - 1]);
        }
        for (int j = 1; j <= n; ++j) {
            f[0][j] = nxt(f[0][j - 1], nums2[j - 1]);
        }
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int x = nxt(f[i - 1][j], nums1[i - 1]);
                int y = nxt(f[i][j - 1], nums2[j - 1]);
                f[i][j] = Math.min(x, y);
            }
        }
        return f[m][n];
    }

    private int nxt(int x, int y) {
        return (x & 1 ^ y) == 1 ? x + 1 : x + 2;
    }
}




