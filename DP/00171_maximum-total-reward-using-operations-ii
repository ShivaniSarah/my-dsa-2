https://leetcode.com/problems/maximum-total-reward-using-operations-ii/description/


3181. Maximum Total Reward Using Operations II
Hard
Topics
Companies
Hint
You are given an integer array rewardValues of length n, representing the values of rewards.

Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:

Choose an unmarked index i from the range [0, n - 1].
If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.
Return an integer denoting the maximum total reward you can collect by performing the operations optimally.

 

Example 1:

Input: rewardValues = [1,1,3,3]

Output: 4

Explanation:

During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.

Example 2:

Input: rewardValues = [1,6,4,3,2]

Output: 11

Explanation:

Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.

 

Constraints:

1 <= rewardValues.length <= 5 * 104
1 <= rewardValues[i] <= 5 * 104

# java

// tle

import java.math.BigInteger;

class Solution {
  // Same as 3180. Maximum Total Reward Using Operations I
  public int maxTotalReward(int[] rewardValues) {
    BigInteger one = BigInteger.ONE;
    BigInteger dp = one; // the possible rewards (initially, 0 is achievable)

    Arrays.sort(rewardValues);

    for (final int num : rewardValues) {
      // Remove the numbers >= the current number.
      BigInteger maskBitsLessThanNum = one.shiftLeft(num).subtract(one);
      BigInteger bitsLessThanNum = dp.and(maskBitsLessThanNum);
      dp = dp.or(bitsLessThanNum.shiftLeft(num));
    }

    return dp.bitLength() - 1;
  }
}

or


import java.math.BigInteger;
import java.util.Arrays;

class Solution {
    public int maxTotalReward(int[] rewardValues) {
        int[] nums = Arrays.stream(rewardValues).distinct().sorted().toArray();
        BigInteger f = BigInteger.ONE;
        for (int v : nums) {
            BigInteger mask = BigInteger.ONE.shiftLeft(v).subtract(BigInteger.ONE);
            BigInteger shifted = f.and(mask).shiftLeft(v);
            f = f.or(shifted);
        }
        return f.bitLength() - 1;
    }
}


or


class Solution {
    
    Map<Integer, Integer> dp = new HashMap<>();
    
    public int maxTotalReward(int[] arr) {        
        arr = removeDups(arr);
        return arr[arr.length-1] + rec(arr, arr[arr.length-1] - 1);
    }
    
    private int rec(int[] arr, int lim) {
        if (lim == 0) {
            return 0;
        }
        if (dp.get(lim) != null) {
            return dp.get(lim);
        }
        int ind = find(arr, lim);
        if (ind == -1) {
            return lim;
        }
        int res = 0;
        for (int i = 0; i < ind; i++) {
            if (arr[i] * 2 - 1 <= res) {
                break;
            }
            res = Math.max(res, arr[i] + rec(arr, Math.min(lim - arr[i], arr[i] - 1)));
        }
        dp.put(lim, res);
        return res;
    }
    
    private int find(int[] arr, int x) {
        int lo = 0;
        int hi = arr.length - 1;
        int res = -1;
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            if (arr[mid] == x) {
                return -1;
            } else if (arr[mid] < x) {
                lo = mid + 1;
            } else {
                res = mid;
                hi = mid - 1;
            }
        }
        return res;
    }
    
    private int[] removeDups(int[] arr) {
        Set<Integer> set = new HashSet<>();
        for (int num: arr) {
            set.add(num);
        }
        int[] res = new int[set.size()];
        int i =0;
        for (int num: set) {
            res[i++] = num;
        }
        Arrays.sort(res);
        return res;
    }
}
