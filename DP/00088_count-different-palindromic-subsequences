https://leetcode.com/problems/count-different-palindromic-subsequences/


730. Count Different Palindromic Subsequences
Hard
Topics
Companies
Hint
Given a string s, return the number of different non-empty palindromic subsequences in s. Since the answer may be very large, return it modulo 109 + 7.

A subsequence of a string is obtained by deleting zero or more characters from the string.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences a1, a2, ... and b1, b2, ... are different if there is some i for which ai != bi.

 

Example 1:

Input: s = "bccb"
Output: 6
Explanation: The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.
Note that 'bcb' is counted only once, even though it occurs twice.
Example 2:

Input: s = "abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba"
Output: 104860361
Explanation: There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 109 + 7.
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a', 'b', 'c', or 'd'.


# java

class Solution {
    private final int MOD = (int) 1e9 + 7;

    public int countPalindromicSubsequences(String s) {
        int n = s.length();
        long[][][] dp = new long[n][n][4];
        for (int i = 0; i < n; ++i) {
            dp[i][i][s.charAt(i) - 'a'] = 1;
        }
        for (int l = 2; l <= n; ++l) {
            for (int i = 0; i + l <= n; ++i) {
                int j = i + l - 1;
                for (char c = 'a'; c <= 'd'; ++c) {
                    int k = c - 'a';
                    if (s.charAt(i) == c && s.charAt(j) == c) {
                        dp[i][j][k] = 2 + dp[i + 1][j - 1][0] + dp[i + 1][j - 1][1]
                            + dp[i + 1][j - 1][2] + dp[i + 1][j - 1][3];
                        dp[i][j][k] %= MOD;
                    } else if (s.charAt(i) == c) {
                        dp[i][j][k] = dp[i][j - 1][k];
                    } else if (s.charAt(j) == c) {
                        dp[i][j][k] = dp[i + 1][j][k];
                    } else {
                        dp[i][j][k] = dp[i + 1][j - 1][k];
                    }
                }
            }
        }
        long ans = 0;
        for (int k = 0; k < 4; ++k) {
            ans += dp[0][n - 1][k];
        }
        return (int) (ans % MOD);
    }
}

or

class Solution {
    public int countPalindromicSubsequences(String s) {
    int n = s.length();
    if(n == 0) return 0;
    char[] chars = s.toCharArray();
    long[][] dp = new long[n][n];
    long mod = 1_000_000_007;
    for(int i = n - 1; i >= 0; i--){
        dp[i][i] = 1;
        for(int j = i + 1; j < n; j++){
            if(chars[i] != chars[j]){
                dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1];
            } else {
                dp[i][j] = 2 * dp[i + 1][j - 1];
                int left = i + 1;
                int right = j - 1;
                while(left <= right && chars[left] != chars[i]){
                    left++;
                }
                while(left <= right && chars[right] != chars[i]){
                    right--;
                }
                if(left > right){
                    dp[i][j] += 2;
                } else if(left == right){
                    dp[i][j] += 1;
                } else {
                    dp[i][j] -= dp[left + 1][right - 1];
                }
            }
            dp[i][j] = (dp[i][j] + mod) % mod; // avoid negative mod

        }
    }
    return (int) dp[0][n-1];
}
}
