https://leetcode.com/problems/minimum-operations-to-make-character-frequencies-equal/description/


3389. Minimum Operations to Make Character Frequencies Equal
Hard
Topics
Companies
Hint
You are given a string s.

A string t is called good if all characters of t occur the same number of times.

You can perform the following operations any number of times:

Delete a character from s.
Insert a character in s.
Change a character in s to its next letter in the alphabet.
Note that you cannot change 'z' to 'a' using the third operation.

Return the minimum number of operations required to make s good.

 

Example 1:

Input: s = "acab"

Output: 1

Explanation:

We can make s good by deleting one occurrence of character 'a'.

Example 2:

Input: s = "wddw"

Output: 0

Explanation:

We do not need to perform any operations since s is initially good.

Example 3:

Input: s = "aaabc"

Output: 2

Explanation:

We can make s good by applying these operations:

Change one occurrence of 'a' to 'b'
Insert one occurrence of 'c' into s
 

Constraints:

3 <= s.length <= 2 * 104
s contains only lowercase English letters.


# java


class Solution {
  public int makeStringGood(String s) {
    int ans = s.length();
    int[] count = new int[26];

    for (final char c : s.toCharArray())
      ++count[c - 'a'];

    final int maxCount = Arrays.stream(count).max().getAsInt();
    for (int target = 1; target <= maxCount; ++target)
      ans = Math.min(ans, getMinOperations(count, target));

    return ans;
  }

  private int getMinOperations(int[] count, int target) {
    // dp[i] represents the minimum number of operations to make the frequency of
    // (i..25)-th (0-indexed) letters equal to `target`.
    int[] dp = new int[27];

    for (int i = 25; i >= 0; --i) {
      // 1. Delete all the i-th letters.
      int deleteAllToZero = count[i];
      // 2. Insert/delete the i-th letters to have `target` number of letters.
      int deleteOrInsertToTarget = Math.abs(target - count[i]);
      dp[i] = Math.min(deleteAllToZero, deleteOrInsertToTarget) + dp[i + 1];
      if (i + 1 < 26 && count[i + 1] < target) {
        final int nextDeficit = target - count[i + 1];
        // Make the frequency of the i-th letter equal to the `target` or 0.
        final int needToChange = count[i] <= target ? count[i] : count[i] - target;
        final int changeToTarget = (nextDeficit > needToChange)
                                       // 3. Change all the i-th letters to the next letter and then
                                       // insert the remaining deficit for the next letter.
                                       ? needToChange + (nextDeficit - needToChange)
                                       // 4. Change `nextDeficit` i-th letters to the next letter
                                       // and then delete the remaining i-th letters.
                                       : nextDeficit + (needToChange - nextDeficit);
        dp[i] = Math.min(dp[i], changeToTarget + dp[i + 2]);
      }
    }

    return dp[0];
  }
}


or


class Solution {
    public int makeStringGood(String s) {
        int n = s.length();
        int[] f = new int[26];
        for(int i = 0; i < n; i++) f[s.charAt(i)-'a']++;

        int ans = n;
        for(int m = 1; m <= n; m++){
            int res = 0;
            int dp1 = 0;
            int dp2 = 0;
            int free = 0;
            for(int i = 0; i < 26; i++){
                int ndp1, ndp2, nfree;
                if(f[i] >= m){
                    ndp1 = Math.min(dp1, dp2) + (f[i] - m);
                    ndp2 = n;
                    nfree = f[i] - m;
                }
                else{
                    ndp1 = Math.min(dp1, dp2) + f[i];
                    ndp2 = Math.min(dp1 + Math.max(0, m - f[i] - free), dp2 + m - f[i]);
                    nfree = f[i];
                }
                dp1 = ndp1;
                dp2 = ndp2;
                free = nfree;
            }
            res = Math.min(dp1, dp2);
            ans = Math.min(ans, res);
        }
        return ans;
    }
}


or


class Solution {
    public int makeStringGood(String s) {
        char[] str = s.toCharArray();
        int n = str.length;
        int[] cnt = new int[26];
        for (char c : str) {
            cnt[c - 'a']++;
        }
        int mn = n, mx = 0;
        for (int c : cnt) {
            if (c > 0) {
                mn = Math.min(mn, c);
                mx = Math.max(mx, c);
            }
        }
        if (mn == mx) {
            return 0;
        }
        int[][] dp = new int[26][2];
        int ans = n - 1;
        for (int i = mn; i <= mx; i++) {
            dp[0][0] = cnt[0];
            dp[0][1] = cnt[0] <= i ? i - cnt[0] : cnt[0] - i;
            for (int j = 1; j < 26; j++) {
                dp[j][0] = Math.min(dp[j - 1][0], dp[j - 1][1]) + cnt[j];
                if (cnt[j] >= i) {
                    dp[j][1] = Math.min(dp[j - 1][0], dp[j - 1][1]) + (cnt[j] - i);
                } else {
                    dp[j][1] = Math.min(dp[j - 1][0] + i - Math.min(i, cnt[j] + cnt[j - 1]), dp[j - 1][1] + i - Math.min(i, cnt[j] + Math.max(0, cnt[j - 1] - i)));
                }
            }
            ans = Math.min(ans, Math.min(dp[25][0], dp[25][1]));
        }
        return ans;
    }
}
