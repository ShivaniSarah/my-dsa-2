https://leetcode.com/problems/select-cells-in-grid-with-maximum-score/description/

3276. Select Cells in Grid With Maximum Score
Hard
Topics
Companies
Hint
You are given a 2D matrix grid consisting of positive integers.

You have to select one or more cells from the matrix such that the following conditions are satisfied:

No two selected cells are in the same row of the matrix.
The values in the set of selected cells are unique.
Your score will be the sum of the values of the selected cells.

Return the maximum score you can achieve.

 

Example 1:

Input: grid = [[1,2,3],[4,3,2],[1,1,1]]

Output: 8

Explanation:



We can select the cells with values 1, 3, and 4 that are colored above.

Example 2:

Input: grid = [[8,7,6],[8,3,2]]

Output: 15

Explanation:



We can select the cells with values 7 and 8 that are colored above.

 

Constraints:

1 <= grid.length, grid[i].length <= 10
1 <= grid[i][j] <= 100


# java

class Solution {
  public int maxScore(List<List<Integer>> grid) {
    Map<Integer, Set<Integer>> numToIndices = new HashMap<>();
    for (int index = 0; index < grid.size(); ++index)
      for (final int num : grid.get(index)) {
        numToIndices.putIfAbsent(num, new HashSet<>());
        numToIndices.get(num).add(index);
      }
    int[][] mem = new int[numToIndices.size()][1 << grid.size()];
    return maxScore(new ArrayList<>(numToIndices.entrySet()), 0, 0, mem);
  }

  // Returns the maximum score by selecting numbers from numToIndices[i..],
  // where `mask` is the bitmask of the used row indices.
  private int maxScore(List<Map.Entry<Integer, Set<Integer>>> numToIndices, int i, int mask,
                       int[][] mem) {
    if (i == numToIndices.size())
      return 0;
    if (mem[i][mask] != 0)
      return mem[i][mask];
    // Skip numToIndices[i].getKey().
    int res = maxScore(numToIndices, i + 1, mask, mem);
    for (int index : numToIndices.get(i).getValue())
      if ((mask >> index & 1) == 0)
        // Take numToIndices[i].getKey().
        res = Math.max(res, numToIndices.get(i).getKey() +
                                maxScore(numToIndices, i + 1, mask | (1 << index), mem));
    return mem[i][mask] = res;
  }
}


or


class Solution {
    public int maxScore(List<List<Integer>> grid) {
        int m = grid.size();
        int mx = 0;
        boolean[][] g = new boolean[101][m + 1];
        for (int i = 0; i < m; ++i) {
            for (int x : grid.get(i)) {
                g[x][i] = true;
                mx = Math.max(mx, x);
            }
        }
        int[][] f = new int[mx + 1][1 << m];
        for (int i = 1; i <= mx; ++i) {
            for (int j = 0; j < 1 << m; ++j) {
                f[i][j] = f[i - 1][j];
                for (int k = 0; k < m; ++k) {
                    if (g[i][k] && (j >> k & 1) == 1) {
                        f[i][j] = Math.max(f[i][j], f[i - 1][j ^ 1 << k] + i);
                    }
                }
            }
        }
        return f[mx][(1 << m) - 1];
    }
}
