https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-i/description/

3256. Maximum Value Sum by Placing Three Rooks I
Hard
Topics
Companies
Hint
You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j).

Rooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other.

Return the maximum sum of the cell values on which the rooks are placed.

 

Example 1:

Input: board = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]

Output: 4

Explanation:



We can place the rooks in the cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4.

Example 2:

Input: board = [[1,2,3],[4,5,6],[7,8,9]]

Output: 15

Explanation:

We can place the rooks in the cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15.

Example 3:

Input: board = [[1,1,1],[1,1,1],[1,1,1]]

Output: 3

Explanation:

We can place the rooks in the cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3.

 

Constraints:

3 <= m == board.length <= 100
3 <= n == board[i].length <= 100
-109 <= board[i][j] <= 109


# java

// 1 test case integer overflow

class Solution {
  public long maximumValueSum(int[][] board) {
    final int m = board.length;
    final int n = board[0].length;
    long ans = Long.MIN_VALUE;
    List<int[]>[] rows = new ArrayList[m];
    List<int[]>[] cols = new ArrayList[n];
    Set<int[]> rowSet = new HashSet<>();
    Set<int[]> colSet = new HashSet<>();
    Set<int[]> boardSet = new HashSet<>();

    for (int i = 0; i < m; ++i)
      rows[i] = new ArrayList<>();

    for (int j = 0; j < n; ++j)
      cols[j] = new ArrayList<>();

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        int[] cell = new int[] {board[i][j], i, j};
        rows[i].add(cell);
        cols[j].add(cell);
      }

    Comparator<int[]> comparator = Comparator.comparingInt(a -> - a[0]);

    for (List<int[]> row : rows) {
      row.sort(comparator);
      rowSet.addAll(row.subList(0, Math.min(3, row.size())));
    }

    for (List<int[]> col : cols) {
      col.sort(comparator);
      colSet.addAll(col.subList(0, Math.min(3, col.size())));
    }

    boardSet.addAll(rowSet);
    boardSet.retainAll(colSet);

    // At least 9 positions are required on the board to place 3 rooks such that
    // none can attack another.
    List<int[]> topNine = new ArrayList<>(boardSet);
    topNine.sort(comparator);
    topNine = topNine.subList(0, Math.min(9, topNine.size()));

    for (int i = 0; i < topNine.size(); ++i)
      for (int j = i + 1; j < topNine.size(); ++j)
        for (int k = j + 1; k < topNine.size(); ++k) {
          int[] t1 = topNine.get(i);
          int[] t2 = topNine.get(j);
          int[] t3 = topNine.get(k);
          if (t1[1] == t2[1] || t1[1] == t3[1] || t2[1] == t3[1] || //
              t1[2] == t2[2] || t1[2] == t3[2] || t2[2] == t3[2])
            continue;
          ans = Math.max(ans, (long) t1[0] + t2[0] + t3[0]);
        }

    return ans;
  }
}


or



class Solution {
    public long max = Long.MIN_VALUE;
    public long maximumValueSum(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        List<List<Integer>> valuesList = new ArrayList<>(m*n);
        //Get max 3 row values for all rows
        for(int i=0; i<m; ++i){
            List<List<Integer>> rowValues = new ArrayList<>(n);
            int max1 = -1;
            int max2 = -1;
            int max3 = -1;
            for(int j=0; j<n; ++j){
                rowValues.add(new ArrayList<Integer>(3));
                List<Integer> value = rowValues.get(rowValues.size()-1);
                value.add(board[i][j]);
                value.add(i);
                value.add(j);
                if(max1 == -1 || board[i][j] >= rowValues.get(max1).get(0)){
                    max3 = max2;
                    max2 = max1;
                    max1 = j;
                }else if(max2 == -1 || board[i][j] >= rowValues.get(max2).get(0)){
                    max3 = max2;
                    max2 = j;
                }else if(max3 == -1 || board[i][j] >= rowValues.get(max3).get(0)){
                    max3 = j;
                }
            }
            valuesList.add(rowValues.get(max1));
            valuesList.add(rowValues.get(max2));
            valuesList.add(rowValues.get(max3));
        }
        //Sort all the possible values
        Collections.sort(valuesList, new Comparator<List<Integer>>(){
            @Override
            public int compare(List<Integer> a, List<Integer> b){
                return b.get(0) - a.get(0);
            }
        });
        boolean[] rows = new boolean[m];
        boolean[] cols = new boolean[n];
        
        backtrack(0, 0, 0, valuesList, rows, cols);

        return max;
    }
    public void backtrack(int idx, long curSum, int nums, List<List<Integer>> valuesList, boolean[] rows, boolean[] cols){
        if(nums == 3){
            if(curSum > max){
                max = curSum;
            }
            return;
        }
        if(idx >= valuesList.size()){
            return;
        }
        long value = valuesList.get(idx).get(0);

        //Check if it is possible to get new max from here. If not, return.
        if(curSum + value * (3 - nums) < max){
            return;
        }

        //Pick
        int row = valuesList.get(idx).get(1);
        int col = valuesList.get(idx).get(2);
        if(!rows[row] && !cols[col]){
            rows[row] = true;
            cols[col] = true;
            backtrack(idx+1, curSum+value, nums+1, valuesList, rows, cols);
            rows[row] = false;
            cols[col] = false;
        }

        //Dont pick
        backtrack(idx+1, curSum, nums, valuesList, rows, cols);

    }
}


or

class Solution {
    // Helper method to find the maximum sum of values in 3 rows with no common columns
    private long helper(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        long maxSum = Long.MIN_VALUE;

        // Initialize arrays to store top 3 values and their columns
        long[][] topValues = new long[rows][3];
        int[][] topColumns = new int[rows][3];
        for (int i = 0; i < rows; i++) {
            Arrays.fill(topValues[i], Long.MIN_VALUE);
            Arrays.fill(topColumns[i], -1);
        }

        // Process each row to find top 3 values and their columns
        for (int row = 0; row < rows; row++) {
            List<Pair<Long, Integer>> columnValues = new ArrayList<>();
            for (int col = 0; col < cols; col++) {
                columnValues.add(new Pair<>((long) matrix[row][col], col));
            }
            columnValues.sort((a, b) -> Long.compare(b.getKey(), a.getKey()));

            for (int rank = 0; rank < 3 && rank < cols; rank++) {
                topColumns[row][rank] = columnValues.get(rank).getValue();
                topValues[row][rank] = columnValues.get(rank).getKey();
            }
        }

        // Check all combinations of rows and columns
        for (int row1 = 0; row1 < rows; row1++) {
            for (int row2 = row1 + 1; row2 < rows; row2++) {
                for (int row3 = row2 + 1; row3 < rows; row3++) {
                    for (int col1 = 0; col1 < 3; col1++) {
                        for (int col2 = 0; col2 < 3; col2++) {
                            if (topColumns[row2][col2] == topColumns[row1][col1]) continue;
                            for (int col3 = 0; col3 < 3; col3++) {
                                if (topColumns[row3][col3] == topColumns[row1][col1] || topColumns[row3][col3] == topColumns[row2][col2]) continue;

                                long currentSum = topValues[row1][col1] + topValues[row2][col2] + topValues[row3][col3];
                                maxSum = Math.max(maxSum, currentSum);
                            }
                        }
                    }
                }
            }
        }
        return maxSum;
    }

    // Method to call the helper method
    public long maximumValueSum(int[][] matrix) {
        return helper(matrix);
    }
}

