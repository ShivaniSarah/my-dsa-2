https://leetcode.com/problems/longest-increasing-subsequence-ii/description/


2407. Longest Increasing Subsequence II
Hard
Topics
Companies
Hint
You are given an integer array nums and an integer k.

Find the longest subsequence of nums that meets the following requirements:

The subsequence is strictly increasing and
The difference between adjacent elements in the subsequence is at most k.
Return the length of the longest subsequence that meets the requirements.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,2,1,4,3,4,5,8,15], k = 3
Output: 5
Explanation:
The longest subsequence that meets the requirements is [1,3,4,5,8].
The subsequence has a length of 5, so we return 5.
Note that the subsequence [1,3,4,5,8,15] does not meet the requirements because 15 - 8 = 7 is larger than 3.
Example 2:

Input: nums = [7,4,5,1,8,12,4,7], k = 5
Output: 4
Explanation:
The longest subsequence that meets the requirements is [4,5,8,12].
The subsequence has a length of 4, so we return 4.
Example 3:

Input: nums = [1,5], k = 1
Output: 1
Explanation:
The longest subsequence that meets the requirements is [1].
The subsequence has a length of 1, so we return 1.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i], k <= 105


# java


class Solution {
    public int lengthOfLIS(int[] nums, int k) {
        int mx = nums[0];
        for (int v : nums) {
            mx = Math.max(mx, v);
        }
        SegmentTree tree = new SegmentTree(mx);
        int ans = 0;
        for (int v : nums) {
            int t = tree.query(1, v - k, v - 1) + 1;
            ans = Math.max(ans, t);
            tree.modify(1, v, t);
        }
        return ans;
    }
}

class Node {
    int l;
    int r;
    int v;
}

class SegmentTree {
    private Node[] tr;

    public SegmentTree(int n) {
        tr = new Node[4 * n];
        for (int i = 0; i < tr.length; ++i) {
            tr[i] = new Node();
        }
        build(1, 1, n);
    }

    public void build(int u, int l, int r) {
        tr[u].l = l;
        tr[u].r = r;
        if (l == r) {
            return;
        }
        int mid = (l + r) >> 1;
        build(u << 1, l, mid);
        build(u << 1 | 1, mid + 1, r);
    }

    public void modify(int u, int x, int v) {
        if (tr[u].l == x && tr[u].r == x) {
            tr[u].v = v;
            return;
        }
        int mid = (tr[u].l + tr[u].r) >> 1;
        if (x <= mid) {
            modify(u << 1, x, v);
        } else {
            modify(u << 1 | 1, x, v);
        }
        pushup(u);
    }

    public void pushup(int u) {
        tr[u].v = Math.max(tr[u << 1].v, tr[u << 1 | 1].v);
    }

    public int query(int u, int l, int r) {
        if (tr[u].l >= l && tr[u].r <= r) {
            return tr[u].v;
        }
        int mid = (tr[u].l + tr[u].r) >> 1;
        int v = 0;
        if (l <= mid) {
            v = query(u << 1, l, r);
        }
        if (r > mid) {
            v = Math.max(v, query(u << 1 | 1, l, r));
        }
        return v;
    }
}


or


class Solution {
    class Node{
        int val;
        Node left;
        Node right;
        int start;
        int end;
    }
    public int lengthOfLIS(int[] nums, int k) {
        int max = 0;
        for(int num : nums){
            max = Math.max(max,num);
        }
        
        Node root = construct(1,max);
        
        int res = 0;
        for(int num : nums){
            int lo = (num - k) < 1 ? 1 : (num - k);
            int hi = num - 1;
            
            int len = query(root,lo,hi) + 1;
            
            update(root,num,len);
            res = Math.max(res,len);
        }                
        return res;
    }
    
    Node construct(int ss,int se){
        if(ss == se){
            Node node = new Node();
            node.start = ss;
            node.end = se;
            node.val = 0;
            return node;
        }
        
        int mid = (ss + se) / 2;
        Node node = new Node();
        node.start = ss;
        node.end = se;
        node.left = construct(ss,mid);
        node.right = construct(mid+1,se);
        node.val = Math.max(node.left.val,node.right.val);
        
        return node;
    }
    
    void update(Node node,int idx,int val){
        if(node.start == node.end){
            node.val = val;
            return;
        }
        
        int mid = (node.start + node.end) / 2;
        if(idx <= mid){
            update(node.left,idx,val);
        }else{
            update(node.right,idx,val);
        }
        
        node.val = Math.max(node.left.val,node.right.val);
    }
    
    int query(Node node,int qs,int qe){
        if(node.start > qe || node.end < qs){
            return 0;
        }else if(node.start >= qs && node.end <= qe){
            return node.val;
        }else{
            int lval = query(node.left,qs,qe);
            int rval = query(node.right,qs,qe);
            return Math.max(lval,rval);
        }
    }
}

