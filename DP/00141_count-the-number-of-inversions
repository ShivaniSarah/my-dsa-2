https://leetcode.com/problems/count-the-number-of-inversions/description/

3193. Count the Number of Inversions
Hard
Topics
Companies
Hint
You are given an integer n and a 2D array requirements, where requirements[i] = [endi, cnti] represents the end index and the inversion count of each requirement.

A pair of indices (i, j) from an integer array nums is called an inversion if:

i < j and nums[i] > nums[j]
Return the number of permutations perm of [0, 1, 2, ..., n - 1] such that for all requirements[i], perm[0..endi] has exactly cnti inversions.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, requirements = [[2,2],[0,0]]

Output: 2

Explanation:

The two permutations are:

[2, 0, 1]
Prefix [2, 0, 1] has inversions (0, 1) and (0, 2).
Prefix [2] has 0 inversions.
[1, 2, 0]
Prefix [1, 2, 0] has inversions (0, 2) and (1, 2).
Prefix [1] has 0 inversions.
Example 2:

Input: n = 3, requirements = [[2,2],[1,1],[0,0]]

Output: 1

Explanation:

The only satisfying permutation is [2, 0, 1]:

Prefix [2, 0, 1] has inversions (0, 1) and (0, 2).
Prefix [2, 0] has an inversion (0, 1).
Prefix [2] has 0 inversions.
Example 3:

Input: n = 2, requirements = [[0,0],[1,0]]

Output: 1

Explanation:

The only satisfying permutation is [0, 1]:

Prefix [0] has 0 inversions.
Prefix [0, 1] has an inversion (0, 1).
 

Constraints:

2 <= n <= 300
1 <= requirements.length <= n
requirements[i] = [endi, cnti]
0 <= endi <= n - 1
0 <= cnti <= 400
The input is generated such that there is at least one i such that endi == n - 1.
The input is generated such that all endi are unique.


# java


class Solution {
    public int numberOfPermutations(int n, int[][] requirements) {
        int[] req = new int[n];
        Arrays.fill(req, -1);
        int m = 0;
        for (var r : requirements) {
            req[r[0]] = r[1];
            m = Math.max(m, r[1]);
        }
        if (req[0] > 0) {
            return 0;
        }
        req[0] = 0;
        final int mod = (int) 1e9 + 7;
        int[][] f = new int[n][m + 1];
        f[0][0] = 1;
        for (int i = 1; i < n; ++i) {
            int l = 0, r = m;
            if (req[i] >= 0) {
                l = r = req[i];
            }
            for (int j = l; j <= r; ++j) {
                for (int k = 0; k <= Math.min(i, j); ++k) {
                    f[i][j] = (f[i][j] + f[i - 1][j - k]) % mod;
                }
            }
        }
        return f[n - 1][req[n - 1]];
    }
}

or

class Solution {
    static int mod = 1_000_000_007;
    static Integer[][] dp;
    
    public int numberOfPermutations(int n, int[][] requirements) {
        dp = new Integer[n + 1][n * (n - 1) / 2 + 1];
        Arrays.sort(requirements, (a, b) -> a[0] - b[0]);
        for (int[] r : requirements) {
            if (count(r[0], r[1]) == 0) {
                return 0;
            }
            // enforce the current req
            for (int i = 0; i < dp[r[0]].length; i++) {
                if (i != r[1]) {
                    dp[r[0]][i] = 0;
                }
            }
        }
        int[] last = requirements[requirements.length - 1];
        return dp[last[0]][last[1]];
    }
    
    static int count(int pos, int inv) {
        if (inv < 0) {
            return 0;
        }
        if (pos == 0) {
            return inv == 0 ? 1 : 0;
        }
        if (dp[pos][inv] != null) {
            return dp[pos][inv];
        }
        int res = 0;
        for (int i = 0; i <= pos; i++) {
            res = (res + count(pos - 1, inv - i)) % mod;
        }
        return dp[pos][inv] = res;
    }
}
