https://leetcode.com/problems/minimum-skips-to-arrive-at-meeting-on-time/

1883. Minimum Skips to Arrive at Meeting On Time
Solved
Hard
Topics
Companies
Hint
You are given an integer hoursBefore, the number of hours you have to travel to your meeting. To arrive at your meeting, you have to travel through n roads. The road lengths are given as an integer array dist of length n, where dist[i] describes the length of the ith road in kilometers. In addition, you are given an integer speed, which is the speed (in km/h) you will travel at.

After you travel road i, you must rest and wait for the next integer hour before you can begin traveling on the next road. Note that you do not have to rest after traveling the last road because you are already at the meeting.

For example, if traveling a road takes 1.4 hours, you must wait until the 2 hour mark before traveling the next road. If traveling a road takes exactly 2 hours, you do not need to wait.
However, you are allowed to skip some rests to be able to arrive on time, meaning you do not need to wait for the next integer hour. Note that this means you may finish traveling future roads at different hour marks.

For example, suppose traveling the first road takes 1.4 hours and traveling the second road takes 0.6 hours. Skipping the rest after the first road will mean you finish traveling the second road right at the 2 hour mark, letting you start traveling the third road immediately.
Return the minimum number of skips required to arrive at the meeting on time, or -1 if it is impossible.

 

Example 1:

Input: dist = [1,3,2], speed = 4, hoursBefore = 2
Output: 1
Explanation:
Without skipping any rests, you will arrive in (1/4 + 3/4) + (3/4 + 1/4) + (2/4) = 2.5 hours.
You can skip the first rest to arrive in ((1/4 + 0) + (3/4 + 0)) + (2/4) = 1.5 hours.
Note that the second rest is shortened because you finish traveling the second road at an integer hour due to skipping the first rest.
Example 2:

Input: dist = [7,3,5,5], speed = 2, hoursBefore = 10
Output: 2
Explanation:
Without skipping any rests, you will arrive in (7/2 + 1/2) + (3/2 + 1/2) + (5/2 + 1/2) + (5/2) = 11.5 hours.
You can skip the first and third rest to arrive in ((7/2 + 0) + (3/2 + 0)) + ((5/2 + 0) + (5/2)) = 10 hours.
Example 3:

Input: dist = [7,3,5,5], speed = 1, hoursBefore = 10
Output: -1
Explanation: It is impossible to arrive at the meeting on time even if you skip all the rests.
 

Constraints:

n == dist.length
1 <= n <= 1000
1 <= dist[i] <= 105
1 <= speed <= 106
1 <= hoursBefore <= 107



# java

class Solution {
   public int minSkips(int[] dist, int speed, int hoursBefore) {
//         Max Skips taken can be a skip taken at every distance
        int maxSkips = dist.length;
        double[][] dp = new double[dist.length][maxSkips+1];
        double eps = 1e-9;
        for(int skip = 0; skip <= maxSkips; skip++) {
//             For the first distance the time taken will be the same regardless of skips
            dp[0][skip] = dist[0]*1.0/(speed) - eps;
        }
        
        for(int i = 1; i < dist.length; i++) {
//             If i'm taking 0 skips then time will be time taken for current distance and time of before distances before current distance and ceil due to wait for the completion of hour
            dp[i][0] =Math.ceil(dp[i-1][0]) + dist[i]*1.0/(speed) - eps;
            for(int skip = 1; skip <= maxSkips; skip++) {
//                 If i'm taking jth skip then i can retrieve the answer for (j-1)th skip and add time required for current distance
                double time = dp[i-1][skip-1] + dist[i]*1.0/(speed) - eps;
//                 Second choice is if i'm not taking jth skip at current i then i'll take the ans of j skips till (i-1)th index and add with ceil of current time (due to the wait till the hour completes)
                dp[i][skip] = Math.min(time, Math.ceil(dp[i-1][skip]) + dist[i]*1.0/(speed)-eps);
            }
        }
        
        for(int skip=0;skip<=maxSkips;skip++){
//             Check for every skip from minimum skip to maximum skip and return skip as soon as you find  a valid skip.
            if(dp[dist.length-1][skip]<=1.0*hoursBefore){
                return skip;
            }
        }
        
//         If it's not possible to reach with any number of skips then return -1
        
        return -1;
    }
}


or



class Solution {
  public int minSkips(int[] dist, int speed, int hoursBefore) {
    final double INF = 1e7;
    final double EPS = 1e-9;
    final int n = dist.length;
    // dp[i][j] := the minimum time, where i is the number of roads we traversed
    // so far and j is the number of skips we did
    double[][] dp = new double[n + 1][n + 1];
    Arrays.stream(dp).forEach(A -> Arrays.fill(A, INF));
    dp[0][0] = 0;

    for (int i = 1; i <= n; ++i) {
      final double d = dist[i - 1];
      dp[i][0] = Math.ceil(dp[i - 1][0] + d / speed - EPS);
      for (int j = 1; j <= i; ++j)
        dp[i][j] =
            Math.min(dp[i - 1][j - 1] + d / speed, Math.ceil(dp[i - 1][j] + d / speed - EPS));
    }

    for (int j = 0; j <= n; ++j)
      if (dp[n][j] <= hoursBefore)
        return j;

    return -1;
  }
}





or



class Solution {
    public int minSkips(int[] dist, int speed, int hoursBefore) {
        int n = dist.length;
        double[][] f = new double[n + 1][n + 1];
        for (int i = 0; i <= n; i++) {
            Arrays.fill(f[i], 1e20);
        }
        f[0][0] = 0;
        double eps = 1e-8;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= i; ++j) {
                if (j < i) {
                    f[i][j] = Math.min(
                        f[i][j], Math.ceil(f[i - 1][j]) + 1.0 * dist[i - 1] / speed - eps);
                }
                if (j > 0) {
                    f[i][j] = Math.min(f[i][j], f[i - 1][j - 1] + 1.0 * dist[i - 1] / speed);
                }
            }
        }
        for (int j = 0; j <= n; ++j) {
            if (f[n][j] <= hoursBefore + eps) {
                return j;
            }
        }
        return -1;
    }
}
