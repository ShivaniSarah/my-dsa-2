https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid/description/


1411. Number of Ways to Paint N Ã— 3 Grid
Hard
Topics
Companies
Hint
You have a grid of size n x 3 and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given n the number of rows of the grid, return the number of ways you can paint this grid. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:


Input: n = 1
Output: 12
Explanation: There are 12 possible way to paint the grid as shown.
Example 2:

Input: n = 5000
Output: 30228214
 

Constraints:

n == grid.length
1 <= n <= 5000


# java

class Solution {
    int [][] colors = {{0,1,0}, {1,0,1}, {2,0,1}, {0,1,2}, {1,0,2}, {2,0,2}, {0,2,0}, {1,2,0}, {2,1,0}, {0,2,1},{1,2,1}, {2,1,2}}; // States for n = 1
    public int numOfWays(int n) {
        int[] init = {-1, -1, -1};
        return dfs(n, init, 0);
    }
    int mod = 1000000007;
    HashMap<String, Integer> memo = new HashMap<>();
    public int dfs(int n, int[] curr, int idx) {
        if (idx == n) {
            return 1;
        }
        String key = curr.toString() + "," + idx;
        if (memo.containsKey(key)) return memo.get(key);
        int result = 0;
        for (int i = 0; i < 12; i++) {
            int []next = colors[i];
            if (next[0] == curr[0] || next[1] == curr[1] || next[2] == curr[2]) continue;
            result = (result%mod + dfs(n, next, idx+1)%mod)%mod;
        }
        memo.put(key, result%mod);
        return memo.get(key);
    }
}



or


class Solution {
  public int numOfWays(int n) {
    final int MOD = 1_000_000_007;
    long color2 = 6; // 121, 131, 212, 232, 313, 323
    long color3 = 6; // 123, 132, 213, 231, 312, 321

    for (int i = 1; i < n; ++i) {
      final long nextColor2 = color2 * 3 + color3 * 2;
      final long nextColor3 = color2 * 2 + color3 * 2;
      color2 = nextColor2 % MOD;
      color3 = nextColor3 % MOD;
    }

    return (int) ((color2 + color3) % MOD);
  }
}


or


class Solution {
    public int numOfWays(int n) {
        int mod = (int) 1e9 + 7;
        long f0 = 6, f1 = 6;
        for (int i = 0; i < n - 1; ++i) {
            long g0 = (3 * f0 + 2 * f1) % mod;
            long g1 = (2 * f0 + 2 * f1) % mod;
            f0 = g0;
            f1 = g1;
        }
        return (int) (f0 + f1) % mod;
    }
}

