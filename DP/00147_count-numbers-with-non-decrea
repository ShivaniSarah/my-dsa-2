https://leetcode.com/problems/count-numbers-with-non-decreasing-digits/description/


3519. Count Numbers with Non-Decreasing Digits 
Hard
Topics
Companies
Hint
You are given two integers, l and r, represented as strings, and an integer b. Return the count of integers in the inclusive range [l, r] whose digits are in non-decreasing order when represented in base b.

An integer is considered to have non-decreasing digits if, when read from left to right (from the most significant digit to the least significant digit), each digit is greater than or equal to the previous one.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: l = "23", r = "28", b = 8

Output: 3

Explanation:

The numbers from 23 to 28 in base 8 are: 27, 30, 31, 32, 33, and 34.
Out of these, 27, 33, and 34 have non-decreasing digits. Hence, the output is 3.
Example 2:

Input: l = "2", r = "7", b = 2

Output: 2

Explanation:

The numbers from 2 to 7 in base 2 are: 10, 11, 100, 101, 110, and 111.
Out of these, 11 and 111 have non-decreasing digits. Hence, the output is 2.
 

Constraints:

1 <= l.length <= r.length <= 100
2 <= b <= 10
l and r consist only of digits.
The value represented by l is less than or equal to the value represented by r.
l and r do not contain leading zeros.


# java


class Solution {
      public static int countNumbers(String l, String r, int b) {
        long ans1 = find(r.toCharArray(), b);
        char[] start = subTractOne(l.toCharArray());
        long ans2 = find(start, b);
        return (int) ((ans1 - ans2) % 1000000007l);
    }

    static long find(char[] arr, int b) {
        int[] nums = convertNumToBase(arr, b);
        Long[][][] dp = new Long[nums.length][2][11];
        long ans = solve(0, nums, 1, b, 0, dp) - 1;
        return ans;
    }

    static long solve(int i, int[] arr, int tight, int base, int last, Long[][][] dp) {
        if (i == arr.length) return 1l;
        
        if(dp[i][tight][last] != null) return dp[i][tight][last];

        int till = base - 1;
        if (tight == 1) till = arr[i];

        long ans = 0;
        for (int j = 0; j <= till; j++) {
            if (j >= last) ans = (ans + solve(i + 1, arr, tight & (j == arr[i] ? 1 : 0), base, j, dp)) ;
        }

        return dp[i][tight][last] = ans ;
    }

    static char[] subTractOne(char[] arr) {
        int n = arr.length, i = n - 1;
        while (i >= 0 && arr[i] == '0') arr[i--] = '9';
         
        int x = (int) (arr[i] - '0') - 1;
        arr[i] = (char) (x + '0');
        int j = 0, idx = 0;

        while (j < n && arr[j] == '0') j++;
        char[] res = new char[n - j];
        for (int k = j; k < n; k++) res[idx++] = arr[k];

        return res;
    }

    public static int[] convertNumToBase(char[] arr, int base) {
        int n = arr.length;
        int[] num = new int[n];
        int i = 0;
        while (i < n) num[i] = arr[i++] - '0';
        List<Integer> temp = new ArrayList<>();
        int len = n;
        while (len > 0) {
            int rem = 0;
            int[] next = new int[len];
            int newLen = 0;
            int j = 0;
            while (j < len) {
                long cur = rem * 10L + num[j];
                int q = (int) (cur / base);
                rem = (int) (cur % base);
                if (newLen > 0 || q != 0) {
                    next[newLen] = q;
                    newLen++;
                }
                j++;
            }
            temp.add(rem);
            num = next;
            len = newLen;
        }

        int[] res = new int[temp.size()];
        int k = 0, size = temp.size();
        while (k < size) {
            res[k] = temp.get(size - 1 - k);
            k++;
        }
        return res;
    }
}

or


// digit dp


class Solution {
    private static final long MOD = 1000000007;
    
    private List<Integer> convertToBaseRepresentation(String number, int base) {
        List<Integer> result = new ArrayList<>();
        while (!number.equals("0")) {
            int remainder = 0;
            StringBuilder newNumber = new StringBuilder();
            for (char digit : number.toCharArray()) {
                int current = remainder * 10 + (digit - '0');
                int quotient = current / base;
                remainder = current % base;
                if (newNumber.length() > 0 || quotient > 0) newNumber.append((char)(quotient + '0'));
            }
            result.add(remainder);
            number = newNumber.length() == 0 ? "0" : newNumber.toString();
        }
        Collections.reverse(result);
        if (result.isEmpty()) result.add(0);
        return result;
    }
    
    private String decrementString(String number) {
        char[] digits = number.toCharArray();
        int index = digits.length - 1;
        while (index >= 0 && digits[index] == '0') {
            digits[index] = '9';
            index--;
        }
        if (index >= 0) digits[index] = (char)(digits[index] - 1);
        number = new String(digits);
        while (number.length() > 1 && number.charAt(0) == '0') number = number.substring(1);
        return number;
    }
    
    private long calculateDPCount(int position, int tight, int started, int prev, List<Integer> digits, int base, long[][][][] memo) {
        if (position == digits.size()) return 1;
        if (memo[position][tight][started][prev] != -1) return memo[position][tight][started][prev];
        
        int upperLimit = tight == 1 ? digits.get(position) : base - 1;
        long count = 0;
        
        for (int digit = 0; digit <= upperLimit; digit++) {
            if (started == 1 && digit < prev) continue;
            int newTight = (tight == 1 && digit == upperLimit) ? 1 : 0;
            int newStarted = started, newPrev = prev;
            
            if (started == 0) {
                if (digit > 0) {
                    newStarted = 1;
                    newPrev = digit;
                }
            } else {
                newPrev = digit;
            }
            
            count = (count + calculateDPCount(position + 1, newTight, newStarted, newPrev, digits, base, memo)) % MOD;
        }
        
        return memo[position][tight][started][prev] = count;
    }
    
    private long countValidNumbersUpTo(String number, int base) {
        List<Integer> digits = convertToBaseRepresentation(number, base);
        int length = digits.size();
        
        long[][][][] memo = new long[length][2][2][base];
        for (int i = 0; i < length; i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 2; k++) {
                    Arrays.fill(memo[i][j][k], -1);
                }
            }
        }
        
        return calculateDPCount(0, 1, 0, 0, digits, base, memo);
    }
    
    public int countNumbers(String left, String right, int base) {
        long rightCount = countValidNumbersUpTo(right, base);
        long leftCount = left.equals("0") ? 0 : countValidNumbersUpTo(decrementString(left), base);
        return (int)((rightCount - leftCount + MOD) % MOD);
    }
}
