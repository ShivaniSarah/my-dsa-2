https://leetcode.com/problems/find-the-number-of-subsequences-with-equal-gcd/description/


3336. Find the Number of Subsequences With Equal GCD
Hard
Topics
Companies
Hint
You are given an integer array nums.

Your task is to find the number of pairs of non-empty subsequences (seq1, seq2) of nums that satisfy the following conditions:

The subsequences seq1 and seq2 are disjoint, meaning no index of nums is common between them.
The GCD of the elements of seq1 is equal to the GCD of the elements of seq2.
Return the total number of such pairs.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4]

Output: 10

Explanation:

The subsequence pairs which have the GCD of their elements equal to 1 are:

([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
([1, 2, 3, 4], [1, 2, 3, 4])
Example 2:

Input: nums = [10,20,30]

Output: 2

Explanation:

The subsequence pairs which have the GCD of their elements equal to 10 are:

([10, 20, 30], [10, 20, 30])
([10, 20, 30], [10, 20, 30])
Example 3:

Input: nums = [1,1,1,1]

Output: 50

 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 200


# java


class Solution {
  public int subsequencePairCount(int[] nums) {
    final int maxNum = Arrays.stream(nums).max().getAsInt();
    Integer[][][] mem = new Integer[nums.length][maxNum + 1][maxNum + 1];
    return subsequencePairCount(nums, 0, 0, 0, mem);
  }

  private static final int MOD = 1_000_000_007;

  private int subsequencePairCount(int[] nums, int i, int x, int y, Integer[][][] mem) {
    if (i == nums.length)
      return (x > 0 && x == y) ? 1 : 0;
    if (mem[i][x][y] != null)
      return mem[i][x][y];
    // 1. Skip nums[i]
    final int skip = subsequencePairCount(nums, i + 1, x, y, mem);
    // 2. Pick nums[i] in the first subsequence
    final int take1 = subsequencePairCount(nums, i + 1, gcd(x, nums[i]), y, mem);
    // 3. Pick nums[i] in the second subsequence
    final int take2 = subsequencePairCount(nums, i + 1, x, gcd(y, nums[i]), mem);
    return mem[i][x][y] = (int) (((long) skip + take1 + take2) % MOD);
  }

  private int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}


or


class Solution {
  public int subsequencePairCount(int[] nums) {
    final int MOD = 1_000_000_007;
    final int n = nums.length;
    final int maxNum = Arrays.stream(nums).max().getAsInt();
    // dp[i][x][y] := number of disjoint pairs `seq1` and `seq2` of
    // nums[0..i - 1], where GCD(seq1) == x and GCD(seq2) == y
    int[][][] dp = new int[n + 1][maxNum + 1][maxNum + 1];
    dp[0][0][0] = 1;

    for (int i = 0; i < n; ++i)
      for (int x = 0; x <= maxNum; ++x)
        for (int y = 0; y <= maxNum; ++y) {
          // 1. Skip nums[i].
          dp[i + 1][x][y] += dp[i][x][y];
          dp[i + 1][x][y] %= MOD;
          // 2. Pick nums[i] in the first subsequence.
          final int newX = gcd(x, nums[i]);
          dp[i + 1][newX][y] += dp[i][x][y];
          dp[i + 1][newX][y] %= MOD;
          // 3. Pick nums[i] in the second subsequence.
          final int newY = gcd(y, nums[i]);
          dp[i + 1][x][newY] += dp[i][x][y];
          dp[i + 1][x][newY] %= MOD;
        }

    int ans = 0;
    for (int g = 1; g <= maxNum; ++g) {
      ans += dp[n][g][g];
      ans %= MOD;
    }
    return ans;
  }

  private int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}


or


class Solution {
  public int subsequencePairCount(int[] nums) {
    final int MOD = 1_000_000_007;
    final int n = nums.length;
    final int maxNum = Arrays.stream(nums).max().getAsInt();
    // dp[x][y] := number of disjoint pairs `seq1` and `seq2` of
    // nums so far, where GCD(seq1) == x and GCD(seq2) == y
    int[][] dp = new int[maxNum + 1][maxNum + 1];
    dp[0][0] = 1;

    for (final int num : nums) {
      int[][] newDp = new int[maxNum + 1][maxNum + 1];
      for (int x = 0; x <= maxNum; ++x)
        for (int y = 0; y <= maxNum; ++y) {
          // 1. Skip `num`.
          newDp[x][y] += dp[x][y];
          newDp[x][y] %= MOD;
          // 2. Pick `num` in the first subsequence.
          final int newX = gcd(x, num);
          newDp[newX][y] += dp[x][y];
          newDp[newX][y] %= MOD;
          // 3. Pick `num` in the second subsequence.
          final int newY = gcd(y, num);
          newDp[x][newY] += dp[x][y];
          newDp[x][newY] %= MOD;
        }
      dp = newDp;
    }

    int ans = 0;
    for (int g = 1; g <= maxNum; ++g) {
      ans += dp[g][g];
      ans %= MOD;
    }
    return ans;
  }

  private int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
  }
}


or


class Solution {
    long mod= (long)1e9 + 7;
    public int gcd(int a, int b){
        if(b==0) return a;
        return gcd(b,a%b);
    }
    public long helper(int[] nums, int i ,int gcd1, int gcd2, long dp[][][]){
        if(i>=nums.length){
            // System.out.println(gcd1+" "+gcd2);
            if(gcd1==201 || gcd2==201){
                return 0;
            }
            else if(gcd1==gcd2) return 1;
            else return 0;
        }
        if(dp[i][gcd1][gcd2]!=-1) return dp[i][gcd1][gcd2];
        long ans=0;
        // pick for 1st
        if(gcd1==201){
            ans+=helper(nums, i+1,nums[i], gcd2,dp);
        }
        else{
            ans+=helper(nums,i+1, gcd(nums[i],gcd1), gcd2,dp);
        }
        // pick for 2st 
        if(gcd2==201){
            ans+=helper(nums, i+1,gcd1,nums[i],dp);
        }
        else{
            ans+=helper(nums,i+1, gcd1, gcd(nums[i],gcd2),dp);
        }
        // not pick 
        ans+=helper(nums,i+1, gcd1, gcd2,dp);
        return dp[i][gcd1][gcd2]=(ans%mod);
    }
    
    public int subsequencePairCount(int[] nums) {
        long dp[][][]=new long[nums.length+1][202][202];
        for(long arr[][]:dp){
            for(long ar[]:arr){
                Arrays.fill(ar,-1);
            }
        }
        return (int)helper(nums, 0,201, 201,dp);
    }
}

