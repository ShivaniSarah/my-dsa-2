https://leetcode.com/problems/maximize-subarray-sum-after-removing-all-occurrences-of-one-element/description/

3410. Maximize Subarray Sum After Removing All Occurrences of One Element
Hard
Topics
Companies
Hint
You are given an integer array nums.

You can do the following operation on the array at most once:

Choose any integer x such that nums remains non-empty on removing all occurrences of x.
Remove all occurrences of x from the array.
Return the maximum subarray sum across all possible resulting arrays.

 

Example 1:

Input: nums = [-3,2,-2,-1,3,-2,3]

Output: 7

Explanation:

We can have the following arrays after at most one operation:

The original array is nums = [-3, 2, -2, -1, 3, -2, 3]. The maximum subarray sum is 3 + (-2) + 3 = 4.
Deleting all occurences of x = -3 results in nums = [2, -2, -1, 3, -2, 3]. The maximum subarray sum is 3 + (-2) + 3 = 4.
Deleting all occurences of x = -2 results in nums = [-3, 2, -1, 3, 3]. The maximum subarray sum is 2 + (-1) + 3 + 3 = 7.
Deleting all occurences of x = -1 results in nums = [-3, 2, -2, 3, -2, 3]. The maximum subarray sum is 3 + (-2) + 3 = 4.
Deleting all occurences of x = 3 results in nums = [-3, 2, -2, -1, -2]. The maximum subarray sum is 2.
The output is max(4, 4, 7, 4, 2) = 7.

Example 2:

Input: nums = [1,2,3,4]

Output: 10

Explanation:

It is optimal to not perform any operations.

 

Constraints:

1 <= nums.length <= 105
-106 <= nums[i] <= 106


# java


class Solution {
  public long maxSubarraySum(int[] nums) {
    long ans = Arrays.stream(nums).max().getAsInt();
    long prefix = 0;
    long minPrefix = 0;
    // the minimum prefix sum that can have a negative number removed
    long modifiedMinPrefix = 0;
    Map<Integer, Integer> count = new HashMap<>();
    // minPrefixPlusRemoval[num] := the minimum prefix sum plus removed `num`
    Map<Integer, Long> minPrefixPlusRemoval = new HashMap<>();

    for (int num : nums) {
      prefix += num;
      ans = Math.max(ans, prefix - modifiedMinPrefix);
      if (num < 0) {
        count.merge(num, 1, Integer::sum);
        minPrefixPlusRemoval.put(
            num, Math.min(minPrefixPlusRemoval.getOrDefault(num, 0L), minPrefix) + num);
        modifiedMinPrefix = Math.min(modifiedMinPrefix,
                                     Math.min(count.get(num) * num, minPrefixPlusRemoval.get(num)));
      }
      minPrefix = Math.min(minPrefix, prefix);
      modifiedMinPrefix = Math.min(modifiedMinPrefix, minPrefix);
    }

    return ans;
  }
}


or


import java.util.*;

class Solution {

    class SegmentData {
        long totalSum, prefixSum, suffixSum, maxSum;

        public SegmentData() {
            totalSum = 0;
            maxSum = Integer.MIN_VALUE;
            prefixSum = Integer.MIN_VALUE;
            suffixSum = Integer.MIN_VALUE;
        }

        public SegmentData(int value) {
            totalSum = value;
            maxSum = value;
            prefixSum = value;
            suffixSum = value;
        }
    }

    private List<SegmentData> segmentTree;

    private SegmentData merge(SegmentData left, SegmentData right) {
        SegmentData result = new SegmentData();
        result.totalSum = left.totalSum + right.totalSum;
        result.prefixSum = Math.max(left.prefixSum, left.totalSum + right.prefixSum);
        result.suffixSum = Math.max(right.suffixSum, right.totalSum + left.suffixSum);
        result.maxSum = Math.max(left.maxSum, right.maxSum);
        result.maxSum = Math.max(result.maxSum, result.prefixSum);
        result.maxSum = Math.max(result.maxSum, result.suffixSum);
        result.maxSum = Math.max(result.maxSum, left.suffixSum + right.prefixSum);
        return result;
    }

    private void buildTree(int left, int right, int index, int[] arr) {
        if (left == right) {
            segmentTree.set(index, new SegmentData(arr[left]));
            return;
        }
        int mid = (left + right) / 2;
        buildTree(left, mid, 2 * index + 1, arr);
        buildTree(mid + 1, right, 2 * index + 2, arr);
        segmentTree.set(index, merge(segmentTree.get(2 * index + 1), segmentTree.get(2 * index + 2)));
    }

    private void updateTree(int left, int right, int index, int position, int value) {
        if (position < left || position > right) return;
        if (left == right && position == left) {
            segmentTree.get(index).totalSum = segmentTree.get(index).prefixSum = segmentTree.get(index).suffixSum = segmentTree.get(index).maxSum = value;
            return;
        }
        int mid = (left + right) / 2;
        updateTree(left, mid, 2 * index + 1, position, value);
        updateTree(mid + 1, right, 2 * index + 2, position, value);
        segmentTree.set(index, merge(segmentTree.get(2 * index + 1), segmentTree.get(2 * index + 2)));
    }

    public long maxSubarraySum(int[] arr) {
        int n = arr.length;
        segmentTree = new ArrayList<>(4 * n);
        for (int i = 0; i < 4 * n; i++) {
            segmentTree.add(new SegmentData());
        }

        // Using TreeMap to store indices by value
        TreeMap<Integer, List<Integer>> valueToIndices = new TreeMap<>();
        buildTree(0, n - 1, 0, arr);
        long maxSubarraySum = segmentTree.get(0).maxSum;

        for (int i = 0; i < n; i++) {
            valueToIndices.computeIfAbsent(arr[i], k -> new ArrayList<>()).add(i);
        }

        // If the largest value in the map is negative, return that value
        if (!valueToIndices.isEmpty() && valueToIndices.lastEntry().getKey() < 0) {
            return valueToIndices.lastEntry().getKey();
        }

        for (Map.Entry<Integer, List<Integer>> entry : valueToIndices.entrySet()) {
            int value = entry.getKey();
            List<Integer> indices = entry.getValue();
            if (indices.size() == n) continue;

            // Set elements at indices to 0 temporarily
            for (int idx : indices) updateTree(0, n - 1, 0, idx, 0);
            maxSubarraySum = Math.max(maxSubarraySum, segmentTree.get(0).maxSum);

            // Restore original values
            for (int idx : indices) updateTree(0, n - 1, 0, idx, value);
        }

        return maxSubarraySum;
    }
}
