https://leetcode.com/problems/concatenated-divisibility/description/


3533. Concatenated Divisibility
Hard
Topics
Companies
Hint
You are given an array of positive integers nums and a positive integer k.

A permutation of nums is said to form a divisible concatenation if, when you concatenate the decimal representations of the numbers in the order specified by the permutation, the resulting number is divisible by k.

Return the lexicographically smallest permutation (when considered as a list of integers) that forms a divisible concatenation. If no such permutation exists, return an empty list.

 

Example 1:

Input: nums = [3,12,45], k = 5

Output: [3,12,45]

Explanation:

Permutation	Concatenated Value	Divisible by 5
[3, 12, 45]	31245	Yes
[3, 45, 12]	34512	No
[12, 3, 45]	12345	Yes
[12, 45, 3]	12453	No
[45, 3, 12]	45312	No
[45, 12, 3]	45123	No
The lexicographically smallest permutation that forms a divisible concatenation is [3,12,45].

Example 2:

Input: nums = [10,5], k = 10

Output: [5,10]

Explanation:

Permutation	Concatenated Value	Divisible by 10
[5, 10]	510	Yes
[10, 5]	105	No
The lexicographically smallest permutation that forms a divisible concatenation is [5,10].

Example 3:

Input: nums = [1,2,3], k = 5

Output: []

Explanation:

Since no permutation of nums forms a valid divisible concatenation, return an empty list.

 

Constraints:

1 <= nums.length <= 13
1 <= nums[i] <= 105
1 <= k <= 100




# java



class Solution {
    int n, k;
    int[] nums;
    int[] pow10;
    Boolean[][] dp;
    int[][] next; // next[mask][mod] = which index chosen at this state
    
    public int[] concatenatedDivisibility(int[] nums, int k) {
        this.nums = nums;
        this.k = k;
        this.n = nums.length;
        
        // Precompute powers of 10 mod k
        pow10 = new int[7];
        pow10[0] = 1 % k;
        for (int i = 1; i <= 6; i++) {
            pow10[i] = (pow10[i-1] * 10) % k;
        }
        
        // Initialize DP table and next move table
        dp = new Boolean[1<<n][k];
        next = new int[1<<n][k];
        for (int[] row : next) Arrays.fill(row, -1); // initialize to -1
        
        Arrays.sort(nums); // important for lex smallest
        
        if (!dfs(0, 0)) return new int[0];
        
        // Reconstruct the answer from 'next' table
        int[] res = new int[n];
        int mask = 0, mod = 0;
        for (int i = 0; i < n; i++) {
            int idx = next[mask][mod];
            res[i] = nums[idx];
            int digits = countDigits(nums[idx]);
            mod = (int)(((long)mod * pow10[digits] + nums[idx]) % k);
            mask |= (1 << idx);
        }
        
        return res;
    }
    
    private boolean dfs(int mask, int mod) {
        if (mask == (1<<n) - 1) return mod == 0;
        if (dp[mask][mod] != null) return dp[mask][mod];
        
        for (int i = 0; i < n; i++) {
            if ((mask & (1 << i)) != 0) continue;
            
            int digits = countDigits(nums[i]);
            int newMod = (int)(((long)mod * pow10[digits] + nums[i]) % k);
            
            if (dfs(mask | (1 << i), newMod)) {
                next[mask][mod] = i; // record move
                return dp[mask][mod] = true;
            }
        }
        
        return dp[mask][mod] = false;
    }
    
    private int countDigits(int num) {
        if (num == 0) return 1;
        int digits = 0;
        while (num > 0) {
            digits++;
            num /= 10;
        }
        return digits;
    }
}





