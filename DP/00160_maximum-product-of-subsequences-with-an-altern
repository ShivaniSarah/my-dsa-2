https://leetcode.com/problems/maximum-product-of-subsequences-with-an-alternating-sum-equal-to-k/description/

3509. Maximum Product of Subsequences With an Alternating Sum Equal to K
Hard
Topics
Companies
Hint
You are given an integer array nums and two integers, k and limit. Your task is to find a non-empty subsequence of nums that:

Has an alternating sum equal to k.
Maximizes the product of all its numbers without the product exceeding limit.
Return the product of the numbers in such a subsequence. If no subsequence satisfies the requirements, return -1.

The alternating sum of a 0-indexed array is defined as the sum of the elements at even indices minus the sum of the elements at odd indices.

 

Example 1:

Input: nums = [1,2,3], k = 2, limit = 10

Output: 6

Explanation:

The subsequences with an alternating sum of 2 are:

[1, 2, 3]
Alternating Sum: 1 - 2 + 3 = 2
Product: 1 * 2 * 3 = 6
[2]
Alternating Sum: 2
Product: 2
The maximum product within the limit is 6.

Example 2:

Input: nums = [0,2,3], k = -5, limit = 12

Output: -1

Explanation:

A subsequence with an alternating sum of exactly -5 does not exist.

Example 3:

Input: nums = [2,2,3,3], k = 0, limit = 9

Output: 9

Explanation:

The subsequences with an alternating sum of 0 are:

[2, 2]
Alternating Sum: 2 - 2 = 0
Product: 2 * 2 = 4
[3, 3]
Alternating Sum: 3 - 3 = 0
Product: 3 * 3 = 9
[2, 2, 3, 3]
Alternating Sum: 2 - 2 + 3 - 3 = 0
Product: 2 * 2 * 3 * 3 = 36
The subsequence [2, 2, 3, 3] has the greatest product with an alternating sum equal to k, but 36 > 9. The next greatest product is 9, which is within the limit.

 

Constraints:

1 <= nums.length <= 150
0 <= nums[i] <= 12
-105 <= k <= 105
1 <= limit <= 5000


# java


class Solution {
    static HashMap<Long, Integer> dp;
    static Boolean[][][][] dp2;

    public int maxProduct(int[] nums, int k, int limit) {
        dp = new HashMap<>();
        dp2 = new Boolean[nums.length + 1][1801][2][2];
        int ans = -1;
        if(k > -36 && k < 36) ans = solve(0, 0, 1, 1, nums, k, limit, 0); 

        boolean doesContainsZero = canBe(0, 0, 0, nums, 1, k);
        return ans == -1 ? (doesContainsZero ? 0 : ans) : ans;
    }

    static boolean canBe(int i, int sum, int zeroTaken, int[] arr, int isOdd, int req) {
        if (i >= arr.length) return (sum == req && zeroTaken == 1);

        if (dp2[i][sum + 900][zeroTaken][isOdd] != null) return dp2[i][sum + 900][zeroTaken][isOdd];

        boolean take;
        if (isOdd == 1) {
            take = canBe(i + 1, sum + arr[i], zeroTaken | (arr[i] == 0 ? 1 : 0), arr, 0, req);
        } else {
            take = canBe(i + 1, sum - arr[i], zeroTaken | (arr[i] == 0 ? 1 : 0), arr, 1, req);
        }

        boolean notTake = canBe(i + 1, sum, zeroTaken, arr, isOdd, req);
        return dp2[i][sum + 900][zeroTaken][isOdd] = (take || notTake);
    }

    static int solve(int i, int sum, int pro, int isOdd, int[] arr, int req, int limit, int start) {
        if (sum <= -40 || sum >= 40 || pro > limit) return -1;

        if (i >= arr.length) return (sum == req && pro <= limit && start == 1) ? pro : -1;

        long key = encodeState(i, sum, pro, isOdd, start, limit);
        if (dp.containsKey(key)) return dp.get(key);

        int pick = -1;
        if (arr[i] != 0) {
            if (isOdd == 1) {
                pick = solve(i + 1, sum + arr[i], pro * arr[i], 0, arr, req, limit, 1);
            } else {
                pick = solve(i + 1, sum - arr[i], pro * arr[i], 1, arr, req, limit, 1);
            }
        }
        
        int notPick = solve(i + 1, sum, pro, isOdd, arr, req, limit, start);
        int res = Math.max(pick, notPick);
        dp.put(key, res);
        return res;
    }

    static long encodeState(int i, int sum, int pro, int isOdd, int start, int limit) {
        long F3 = 4L;
        long F2 = ((long) limit + 1) * F3;
        long F1 = 81L * F2;
        return i * F1 + (sum + 40) * F2 + pro * F3 + (isOdd * 2L + start);
    }
}


or


public class Solution {
    public int maxProduct(int[] a, int k, int l) {
        int I = Integer.MAX_VALUE;
        Map<String, Set<Integer>> d = new HashMap<>();

        for (int xd : a) {
            Map<String, Set<Integer>> nd = new HashMap<>();

            for (Map.Entry<String, Set<Integer>> e : d.entrySet()) {
                nd.put(e.getKey(), new HashSet<>(e.getValue()));
            }

            if (xd == 0) {
                String key = "1#0";
                nd.computeIfAbsent(key, z -> new HashSet<>()).add(0);
            } else {
                if (xd <= l) {
                    String key = "1#" + xd;
                    nd.computeIfAbsent(key, z -> new HashSet<>()).add(xd);
                } else {
                    String key = "1#" + I;
                    nd.computeIfAbsent(key, z -> new HashSet<>()).add(xd);
                }
            }

            for (Map.Entry<String, Set<Integer>> e : d.entrySet()) {
                String[] p = e.getKey().split("#");
                int pr = Integer.parseInt(p[0]);
                int pd = Integer.parseInt(p[1]);
                for (int s : e.getValue()) {
                    int np = 1 - pr;
                    int na = pr == 0 ? s + xd : s - xd;
                    int npd;

                    if (xd == 0) {
                        npd = 0;
                    } else {
                        if (pd == I || (long) pd * xd > l) {
                            npd = I;
                        } else {
                            npd = pd * xd;
                        }
                    }

                    String key = np + "#" + npd;
                    nd.computeIfAbsent(key, z -> new HashSet<>()).add(na);
                }
            }

            d = nd;
        }

        int rs = -1;
        for (Map.Entry<String, Set<Integer>> e : d.entrySet()) {
            String[] p = e.getKey().split("#");
            int pd = Integer.parseInt(p[1]);
            if (pd != I && e.getValue().contains(k)) {
                rs = Math.max(rs, pd);
            }
        }

        return rs;
    }
}
