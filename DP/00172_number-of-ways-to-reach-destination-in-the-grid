https://leetcode.com/problems/number-of-ways-to-reach-destination-in-the-grid/description/


2912. Number of Ways to Reach Destination in the Grid
Description
You are given two integers n and m which represent the size of a 1-indexed grid. You are also given an integer k, a 1-indexed integer array source and a 1-indexed integer array dest, where source and dest are in the form [x, y] representing a cell on the given grid.

You can move through the grid in the following way:

You can go from cell [x1, y1] to cell [x2, y2] if either x1 == x2 or y1 == y2.
Note that you can't move to the cell you are already in e.g. x1 == x2 and y1 == y2.
Return the number of ways you can reach dest from source by moving through the grid exactly k times.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, m = 2, k = 2, source = [1,1], dest = [2,2]
Output: 2
Explanation: There are 2 possible sequences of reaching [2,2] from [1,1]:
- [1,1] -> [1,2] -> [2,2]
- [1,1] -> [2,1] -> [2,2]
Example 2:

Input: n = 3, m = 4, k = 3, source = [1,2], dest = [2,3]
Output: 9
Explanation: There are 9 possible sequences of reaching [2,3] from [1,2]:
- [1,2] -> [1,1] -> [1,3] -> [2,3]
- [1,2] -> [1,1] -> [2,1] -> [2,3]
- [1,2] -> [1,3] -> [3,3] -> [2,3]
- [1,2] -> [1,4] -> [1,3] -> [2,3]
- [1,2] -> [1,4] -> [2,4] -> [2,3]
- [1,2] -> [2,2] -> [2,1] -> [2,3]
- [1,2] -> [2,2] -> [2,4] -> [2,3]
- [1,2] -> [3,2] -> [2,2] -> [2,3]
- [1,2] -> [3,2] -> [3,3] -> [2,3]
 

Constraints:

2 <= n, m <= 109
1 <= k <= 105
source.length == dest.length == 2
1 <= source[1], dest[1] <= n
1 <= source[2], dest[2] <= m






# java




class Solution {
  public int numberOfWays(int n, int m, int k, int[] source, int[] dest) {
    final int MOD = 1_000_000_007;
    // dp[i][0] := the the number of ways of `source` to `dest` using i steps
    // dp[i][1] := the the number of ways of `source` to dest's row using i steps
    // dp[i][2] := the the number of ways of `source` to dest's col using i steps
    // dp[i][3] := the the number of ways of `source` to others using i steps
    int[][] dp = new int[k + 1][4];
    if (Arrays.equals(source, dest))
      dp[0][0] = 1;
    else if (source[0] == dest[0])
      dp[0][1] = 1;
    else if (source[1] == dest[1])
      dp[0][2] = 1;
    else
      dp[0][3] = 1;

    for (int i = 1; i <= k; i++) {
      dp[i][0] = (dp[i - 1][1] + dp[i - 1][2]) % MOD;
      dp[i][1] = (int) ((dp[i - 1][0] * (m - 1L) + // -self
                         dp[i - 1][1] * (m - 2L) + // -self, -center
                         dp[i - 1][3]) %
                        MOD);
      dp[i][2] = (int) ((dp[i - 1][0] * (n - 1L) + // -self
                         dp[i - 1][2] * (n - 2L) + // -self, -center
                         dp[i - 1][3]) %
                        MOD);
      dp[i][3] = (int) ((dp[i - 1][1] * (n - 1L) +        // -self
                         dp[i - 1][2] * (m - 1L) +        // -self
                         dp[i - 1][3] * (m + n - 1 - 3L)) // -self, -row, -col
                        % MOD);
    }

    return dp[k][0];
  }
}



or



class Solution {
  public int numberOfWays(int n, int m, int k, int[] source, int[] dest) {
    final int MOD = 1_000_000_007;
    // the number of ways of `source` to `dest` using steps so far
    int ans = (source[0] == dest[0] && source[1] == dest[1]) ? 1 : 0;
    // the number of ways of `source` to dest's row using steps so far
    int row = (source[0] == dest[0] && source[1] != dest[1]) ? 1 : 0;
    // the number of ways of `source` to dest's col using steps so far
    int col = (source[0] != dest[0] && source[1] == dest[1]) ? 1 : 0;
    // the number of ways of `source` to others using steps so far
    int others = (source[0] != dest[0] && source[1] != dest[1]) ? 1 : 0;

    for (int i = 0; i < k; ++i) {
      final int nextAns = (row + col) % MOD;
      final int nextRow = (int) ((ans * (m - 1L) + // -self
                                  row * (m - 2L) + //-self, -center
                                  others) %
                                 MOD);
      final int nextCol = (int) ((ans * (n - 1L) + // -self
                                  col * (n - 2L) + // -self, -center
                                  others) %
                                 MOD);
      final int nextOthers = (int) ((row * (n - 1L) +             // -self
                                     col * (m - 1L) +             // -self
                                     others * (m + n - 1 - 3L)) % // -self, -row, -col
                                    MOD);
      ans = nextAns;
      row = nextRow;
      col = nextCol;
      others = nextOthers;
    }

    return ans;
  }
}



or


class Solution {
    public int numberOfWays(int n, int m, int k, int[] source, int[] dest) {
        final int mod = 1000000007;
        long[] f = new long[4];
        f[0] = 1;
        while (k-- > 0) {
            long[] g = new long[4];
            g[0] = ((n - 1) * f[1] + (m - 1) * f[2]) % mod;
            g[1] = (f[0] + (n - 2) * f[1] + (m - 1) * f[3]) % mod;
            g[2] = (f[0] + (m - 2) * f[2] + (n - 1) * f[3]) % mod;
            g[3] = (f[1] + f[2] + (n - 2) * f[3] + (m - 2) * f[3]) % mod;
            f = g;
        }
        if (source[0] == dest[0]) {
            return source[1] == dest[1] ? (int) f[0] : (int) f[2];
        }
        return source[1] == dest[1] ? (int) f[1] : (int) f[3];
    }
}



