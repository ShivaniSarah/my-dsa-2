https://leetcode.com/problems/string-transformation/description/


2851. String Transformation
Hard
Topics
Companies
Hint
You are given two strings s and t of equal length n. You can perform the following operation on the string s:

Remove a suffix of s of length l where 0 < l < n and append it at the start of s.
For example, let s = 'abcd' then in one operation you can remove the suffix 'cd' and append it in front of s making s = 'cdab'.
You are also given an integer k. Return the number of ways in which s can be transformed into t in exactly k operations.

Since the answer can be large, return it modulo 109 + 7.

 

Example 1:

Input: s = "abcd", t = "cdab", k = 2
Output: 2
Explanation: 
First way:
In first operation, choose suffix from index = 3, so resulting s = "dabc".
In second operation, choose suffix from index = 3, so resulting s = "cdab".

Second way:
In first operation, choose suffix from index = 1, so resulting s = "bcda".
In second operation, choose suffix from index = 1, so resulting s = "cdab".
Example 2:

Input: s = "ababab", t = "ababab", k = 1
Output: 2
Explanation: 
First way:
Choose suffix from index = 2, so resulting s = "ababab".

Second way:
Choose suffix from index = 4, so resulting s = "ababab".
 

Constraints:

2 <= s.length <= 5 * 105
1 <= k <= 1015
s.length == t.length
s and t consist of only lowercase English alphabets.


# java

class Solution {
  // This dynamic programming table dp[k][i] represents the number of ways to
  // rearrange the String s after k steps such that it starts with s[i].
  // A String can be rotated from 1 to n - 1 times. The transition rule is
  // dp[k][i] = sum(dp[k - 1][j]) for all j != i. For example, when n = 4 and
  // k = 3, the table looks like this:
  //
  // -----------------------------------------------------------
  // |       | i = 0 | i = 1 | i = 2 | i = 3 | sum = (n - 1)^k |
  // -----------------------------------------------------------
  // | k = 0 |   1   |   0   |   0   |   0   |        1        |
  // | k = 1 |   0   |   1   |   1   |   1   |        3        |
  // | k = 2 |   3   |   2   |   2   |   2   |        9        |
  // | k = 3 |   6   |   7   |   7   |   7   |       27        |
  // -----------------------------------------------------------
  //
  // By observation, we have
  //   * dp[k][!0] = ((n - 1)^k - (-1)^k) / n
  //   * dp[k][0] = dp[k][!0] + (-1)^k
  public int numberOfWays(String s, String t, long k) {
    final int n = s.length();
    final int negOnePowK = (k % 2 == 0 ? 1 : -1); // (-1)^k
    final int[] z = zFunction(s + t + t);
    final List<Integer> indices = getIndices(z, n);
    int[] dp = new int[2]; // dp[0] := dp[k][0]; dp[1] := dp[k][!0]
    dp[1] = (int) ((modPow(n - 1, k) - negOnePowK + MOD) % MOD * modPow(n, MOD - 2) % MOD);
    dp[0] = (int) ((dp[1] + negOnePowK + MOD) % MOD);
    int ans = 0;
    for (final int index : getIndices(z, n)) {
      ans += dp[index == 0 ? 0 : 1];
      ans %= MOD;
    }
    return ans;
  }

  private static final int MOD = 1_000_000_007;

  private long modPow(long x, long n) {
    if (n == 0)
      return 1;
    if (n % 2 == 1)
      return x * modPow(x, n - 1) % MOD;
    return modPow(x * x % MOD, n / 2);
  }

  // Returns the z array, where z[i] is the length of the longest prefix of
  // s[i..n) which is also a prefix of s.
  //
  // https://cp-algorithms.com/string/z-function.html#implementation
  private int[] zFunction(final String s) {
    final int n = s.length();
    int[] z = new int[n];
    int l = 0;
    int r = 0;
    for (int i = 1; i < n; ++i) {
      if (i < r)
        z[i] = Math.min(r - i, z[i - l]);
      while (i + z[i] < n && s.charAt(z[i]) == s.charAt(i + z[i]))
        ++z[i];
      if (i + z[i] > r) {
        l = i;
        r = i + z[i];
      }
    }
    return z;
  }

  // Returns the indices in `s` s.t. for each `i` in the returned indices,
  // `s[i..n) + s[0..i) = t`.
  private List<Integer> getIndices(int[] z, int n) {
    List<Integer> indices = new ArrayList<>();
    for (int i = n; i < n + n; ++i)
      if (z[i] >= n)
        indices.add(i - n);
    return indices;
  }
}


or


class StringAlgorithm {
    public List<Integer> kmp(String s, String t) {
        int m = s.length(), n = t.length();
        int []pi = new int[n];
        for (int i = 1; i < n; ++i) {
            int j = pi[i-1];
            while (j > 0 && t.charAt(j) != t.charAt(i)) j = pi[j - 1];
            if (j == 0 && t.charAt(0) != t.charAt(i)) pi[i] = 0;
            else pi[i] = j + 1;
        }
        int j = 0;
        List<Integer> res = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            while (j >= n || (j > 0 && s.charAt(i) != t.charAt(j))) j = pi[j - 1];
            if (s.charAt(i) == t.charAt(j)) j++;
            if (j == n) res.add(i-n+1);
        }
        return res;
    }
}
class Solution {
    public long pow(long a, long b, int M) {
        if (b == 0) return 1;
        if ((b & 1) == 0) return pow(a * a % M, b >> 1, M);
        return a * pow(a * a % M, b >> 1, M) % M;
    }
    public int numberOfWays(String s, String t, long k) {
        int n = s.length(), M = 1000000007;
        List<Integer> pos = new StringAlgorithm().kmp(s + s.substring(0, n-1), t);
        long []f_k = {0, 0};
        f_k[1] = (pow(n-1, k, M) + (k % 2 * 2 - 1) + M) % M * pow(n, M-2, M) % M;
        f_k[0] = (f_k[1] - (k % 2 * 2 - 1) + M) % M;
        int res = 0;
        for (Integer p: pos) {
            if (p == 0) res = (res + (int)f_k[0]) % M;
            else res = (res + (int)f_k[1]) % M;
        }
        return res;
    }
}

or


class Solution {
    private static final int M = 1000000007;

    private int add(int x, int y) {
        if ((x += y) >= M) {
            x -= M;
        }
        return x;
    }

    private int mul(long x, long y) {
        return (int) (x * y % M);
    }

    private int[] getZ(String s) {
        int n = s.length();
        int[] z = new int[n];
        for (int i = 1, left = 0, right = 0; i < n; ++i) {
            if (i <= right && z[i - left] <= right - i) {
                z[i] = z[i - left];
            } else {
                int z_i = Math.max(0, right - i + 1);
                while (i + z_i < n && s.charAt(i + z_i) == s.charAt(z_i)) {
                    z_i++;
                }
                z[i] = z_i;
            }
            if (i + z[i] - 1 > right) {
                left = i;
                right = i + z[i] - 1;
            }
        }
        return z;
    }

    private int[][] matrixMultiply(int[][] a, int[][] b) {
        int m = a.length, n = a[0].length, p = b[0].length;
        int[][] r = new int[m][p];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < p; ++j) {
                for (int k = 0; k < n; ++k) {
                    r[i][j] = add(r[i][j], mul(a[i][k], b[k][j]));
                }
            }
        }
        return r;
    }

    private int[][] matrixPower(int[][] a, long y) {
        int n = a.length;
        int[][] r = new int[n][n];
        for (int i = 0; i < n; ++i) {
            r[i][i] = 1;
        }
        int[][] x = new int[n][n];
        for (int i = 0; i < n; ++i) {
            System.arraycopy(a[i], 0, x[i], 0, n);
        }
        while (y > 0) {
            if ((y & 1) == 1) {
                r = matrixMultiply(r, x);
            }
            x = matrixMultiply(x, x);
            y >>= 1;
        }
        return r;
    }

    public int numberOfWays(String s, String t, long k) {
        int n = s.length();
        int[] dp = matrixPower(new int[][] { {0, 1}, {n - 1, n - 2} }, k)[0];
        s += t + t;
        int[] z = getZ(s);
        int m = n + n;
        int result = 0;
        for (int i = n; i < m; ++i) {
            if (z[i] >= n) {
                result = add(result, dp[i - n == 0 ? 0 : 1]);
            }
        }
        return result;
    }
}
