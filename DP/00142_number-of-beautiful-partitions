https://leetcode.com/problems/number-of-beautiful-partitions/description/

2478. Number of Beautiful Partitions
Hard
Topics
Companies
Hint
You are given a string s that consists of the digits '1' to '9' and two integers k and minLength.

A partition of s is called beautiful if:

s is partitioned into k non-intersecting substrings.
Each substring has a length of at least minLength.
Each substring starts with a prime digit and ends with a non-prime digit. Prime digits are '2', '3', '5', and '7', and the rest of the digits are non-prime.
Return the number of beautiful partitions of s. Since the answer may be very large, return it modulo 109 + 7.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "23542185131", k = 3, minLength = 2
Output: 3
Explanation: There exists three ways to create a beautiful partition:
"2354 | 218 | 5131"
"2354 | 21851 | 31"
"2354218 | 51 | 31"
Example 2:

Input: s = "23542185131", k = 3, minLength = 3
Output: 1
Explanation: There exists one way to create a beautiful partition: "2354 | 218 | 5131".
Example 3:

Input: s = "3312958", k = 3, minLength = 1
Output: 1
Explanation: There exists one way to create a beautiful partition: "331 | 29 | 58".
 

Constraints:

1 <= k, minLength <= s.length <= 1000
s consists of the digits '1' to '9'.


# java


class Solution {
  public int beautifulPartitions(String s, int k, int minLength) {
    if (!isPrime(s.charAt(0)) || isPrime(s.charAt(s.length() - 1)))
      return 0;
    Integer[][] mem = new Integer[s.length()][k];
    return beautifulPartitions(s, minLength, k - 1, minLength, mem);
  }

  private static final int MOD = 1_000_000_007;

  // Returns the number of beautiful partitions of s[i..n) with k bars (|) left.
  private int beautifulPartitions(final String s, int i, int k, int minLength, Integer[][] mem) {
    if (i <= s.length() && k == 0)
      return 1;
    if (i >= s.length())
      return 0;
    if (mem[i][k] != null)
      return mem[i][k];

    // Don't split between s[i - 1] and s[i].
    int ans = beautifulPartitions(s, i + 1, k, minLength, mem) % MOD;

    // Split between s[i - 1] and s[i].
    if (isPrime(s.charAt(i)) && !isPrime(s.charAt(i - 1)))
      ans += beautifulPartitions(s, i + minLength, k - 1, minLength, mem);

    return mem[i][k] = ans % MOD;
  }

  private boolean isPrime(char c) {
    return c == '2' || c == '3' || c == '5' || c == '7';
  }
}




or



class Solution {
    private static final int MOD = (int) 1e9 + 7;

    public int beautifulPartitions(String s, int k, int minLength) {
        int n = s.length();
        if (!prime(s.charAt(0)) || prime(s.charAt(n - 1))) {
            return 0;
        }
        int[][] f = new int[n + 1][k + 1];
        int[][] g = new int[n + 1][k + 1];
        f[0][0] = 1;
        g[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            if (i >= minLength && !prime(s.charAt(i - 1)) && (i == n || prime(s.charAt(i)))) {
                for (int j = 1; j <= k; ++j) {
                    f[i][j] = g[i - minLength][j - 1];
                }
            }
            for (int j = 0; j <= k; ++j) {
                g[i][j] = (g[i - 1][j] + f[i][j]) % MOD;
            }
        }
        return f[n][k];
    }

    private boolean prime(char c) {
        return c == '2' || c == '3' || c == '5' || c == '7';
    }
}
