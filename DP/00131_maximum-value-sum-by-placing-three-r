https://leetcode.com/problems/maximum-value-sum-by-placing-three-rooks-ii/

3257. Maximum Value Sum by Placing Three Rooks II
Hard
Topics
Companies
Hint
You are given a m x n 2D array board representing a chessboard, where board[i][j] represents the value of the cell (i, j).

Rooks in the same row or column attack each other. You need to place three rooks on the chessboard such that the rooks do not attack each other.

Return the maximum sum of the cell values on which the rooks are placed.

 

Example 1:

Input: board = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]

Output: 4

Explanation:



We can place the rooks in the cells (0, 2), (1, 3), and (2, 1) for a sum of 1 + 1 + 2 = 4.

Example 2:

Input: board = [[1,2,3],[4,5,6],[7,8,9]]

Output: 15

Explanation:

We can place the rooks in the cells (0, 0), (1, 1), and (2, 2) for a sum of 1 + 5 + 9 = 15.

Example 3:

Input: board = [[1,1,1],[1,1,1],[1,1,1]]

Output: 3

Explanation:

We can place the rooks in the cells (0, 2), (1, 1), and (2, 0) for a sum of 1 + 1 + 1 = 3.

 

Constraints:

3 <= m == board.length <= 500
3 <= n == board[i].length <= 500
-109 <= board[i][j] <= 109


# java


class Solution {
    class Cell {
        int i;
        int j;
        int val;
        
        public Cell(int i, int j, int val) {
            this.i = i;
            this.j = j;
            this.val = val;
        }
    }
    
    public long maximumValueSum(int[][] board) {
        int rows = board.length;
        int cols = board[0].length;
        
        //Step 1: Prepare Cell List with at most 3 cells per row
        List<Cell> cellList = new ArrayList<>();
        for (int i = 0; i < rows; i++) {
            PriorityQueue<Cell> minHeap = new PriorityQueue<>((a, b) -> a.val - b.val);
            for (int j = 0; j < cols; j++) {
                minHeap.offer(new Cell(i, j, board[i][j]));
                if (minHeap.size() > 3) {
                    minHeap.poll();
                }
            }
            
            while (!minHeap.isEmpty()) {
                cellList.add(minHeap.poll());
            }
        }
        
        //Step 2: Prepare Cell List with at most 3 cells per column
        Collections.sort(cellList, (a, b) -> b.val - a.val);
        List<Cell> filteredList = new ArrayList<>();
        Map<Integer, Integer> columnCount = new HashMap<>();
        for (Cell cell : cellList) {
            int j = cell.j;
            if (columnCount.getOrDefault(j, 0) < 3) {
                filteredList.add(cell);
                columnCount.put(j, columnCount.getOrDefault(j, 0) + 1);
            }
        }
        
        //Step 3: Final ans
        long ans = Long.MIN_VALUE;
        for (int i = 0; i < Math.min(filteredList.size(), 15); i++) {
            for (int j = i+1; j < Math.min(filteredList.size(), 15); j++) {
                for (int k = j+1; k < Math.min(filteredList.size(), 15); k++) {
                    Cell cellI = filteredList.get(i);
                    Cell cellJ = filteredList.get(j);
                    Cell cellK = filteredList.get(k);
                    
                    if (cellI.i == cellJ.i || cellI.i == cellK.i || cellJ.i == cellK.i ||
                       cellI.j == cellJ.j || cellI.j == cellK.j || cellJ.j == cellK.j) {
                        continue;
                    }
                    
                    ans = Math.max(ans, 0L + cellI.val + cellJ.val + cellK.val);
                }
            }
        }
        
        return ans;
    }
}

or


public class Solution {

    // A cell in the grid: stores row idx, column idx, value
    public class Cell {
        public int i;
        public int j;
        public int val;
        public Cell(int i, int j, int val){
            this.i= i;
            this.j = j;
            this.val = val;
        }
    }

    // A structure for storing the k cells with the highest values
    public class TopK {
        // ordered list of cells
        public Cell[] cells;

        public TopK(int k) {
            cells = new Cell[k];
        }

        // if newcell.val is in the top k, insert it into cells and swap it into its sorted position
        public void Add(Cell newcell) {
            if (cells[0] == null || newcell.val > cells[0].val) {
                cells[0] = newcell;
                for(int i = 1; i < cells.length && (cells[i] == null || cells[i-1].val > cells[i].val); ++i) {
                    Cell tmp = cells[i];
                    cells[i] = cells[i-1];
                    cells[i-1] = tmp;
                }
            }
        }
    }

    public long maximumValueSum(int[][] board) {
        int m = board.length;
        int n = board[0].length;
        
        // find top 4 cells
        TopK top4 = new TopK(4);
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                top4.Add(new Cell(i, j, board[i][j]));
            }
        }

        long maxsum = Long.MIN_VALUE;

        // for each of the top 4 cells for the first rook, find the optimal position for the other two rooks
        for(Cell cell1 : top4.cells) {
            // cell1 is selected for first rook
            
            // find top 2 cells excluding row and column of cell1
            TopK top2 = new TopK(2);
            for(int i = 0; i < m; ++i){
                for(int j = 0; j < n; ++j) {
                    if (i != cell1.i && j != cell1.j) {
                        top2.Add(new Cell(i, j, board[i][j]));
                    }
                }
            }

            // for each of the top 2 cells for second rook, find the max cell for the final rook
            for(Cell cell2 : top2.cells) {

                // find top cell excluding rows and columns of cell1 and cell2
                int max = Integer.MIN_VALUE;
                for(int i = 0; i < m; ++i){
                    for(int j = 0; j < n; ++j){
                        if (i != cell1.i && i != cell2.i && j != cell1.j && j != cell2.j && board[i][j] > max) {
                            max = board[i][j];
                        }
                    }
                }

                // all three rooks have been placed, so update maxsum
                long sum = (long)cell1.val + (long)cell2.val + (long)max;
                if (sum > maxsum){
                    maxsum = sum;
                }
            }
        }

        return maxsum;

    }
}

