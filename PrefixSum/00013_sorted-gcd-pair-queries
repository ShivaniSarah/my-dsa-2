https://leetcode.com/problems/sorted-gcd-pair-queries/description/

3312. Sorted GCD Pair Queries
Hard
Topics
Companies
Hint
You are given an integer array nums of length n and an integer array queries.

Let gcdPairs denote an array obtained by calculating the GCD of all possible pairs (nums[i], nums[j]), where 0 <= i < j < n, and then sorting these values in ascending order.

For each query queries[i], you need to find the element at index queries[i] in gcdPairs.

Return an integer array answer, where answer[i] is the value at gcdPairs[queries[i]] for each query.

The term gcd(a, b) denotes the greatest common divisor of a and b.

 

Example 1:

Input: nums = [2,3,4], queries = [0,2,2]

Output: [1,2,2]

Explanation:

gcdPairs = [gcd(nums[0], nums[1]), gcd(nums[0], nums[2]), gcd(nums[1], nums[2])] = [1, 2, 1].

After sorting in ascending order, gcdPairs = [1, 1, 2].

So, the answer is [gcdPairs[queries[0]], gcdPairs[queries[1]], gcdPairs[queries[2]]] = [1, 2, 2].

Example 2:

Input: nums = [4,4,2,1], queries = [5,3,1,0]

Output: [4,2,1,1]

Explanation:

gcdPairs sorted in ascending order is [1, 1, 1, 2, 2, 4].

Example 3:

Input: nums = [2,2], queries = [0,0]

Output: [2,2]

Explanation:

gcdPairs = [2].

 

Constraints:

2 <= n == nums.length <= 105
1 <= nums[i] <= 5 * 104
1 <= queries.length <= 105
0 <= queries[i] < n * (n - 1) / 2


# java

class Solution {
  public int[] gcdValues(int[] nums, long[] queries) {
    int maxNum = Arrays.stream(nums).max().getAsInt();
    int[] ans = new int[queries.length];
    // countDivisor[d] := the number of `nums` having `num % d == 0`
    int[] countDivisor = new int[maxNum + 1];
    // countGcdPair[g] := the number of pairs having gcd == g
    long[] countGcdPair = new long[maxNum + 1];
    // prefixCountGcdPair[g] := the number of pairs having gcd <= g
    long[] prefixCountGcdPair = new long[maxNum + 1];

    for (final int num : nums)
      for (int i = 1; i * i <= num; ++i)
        if (num % i == 0) {
          ++countDivisor[i];
          if (i != num / i)
            ++countDivisor[num / i];
        }

    for (int gcd = maxNum; gcd >= 1; --gcd) {
      // There are C(countDivisor[gcd], 2) pairs that have a common divisor
      // that's a multiple of `gcd` (including the one that equals to `gcd`).
      // So, substract the multiples of `gcd` to have the number of pairs with a
      // gcd that's exactly `gcd`.
      countGcdPair[gcd] = (long) countDivisor[gcd] * (countDivisor[gcd] - 1) / 2;
      for (int largerGcd = 2 * gcd; largerGcd <= maxNum; largerGcd += gcd)
        countGcdPair[gcd] -= countGcdPair[largerGcd];
    }

    for (int gcd = 1; gcd <= maxNum; ++gcd)
      prefixCountGcdPair[gcd] = prefixCountGcdPair[gcd - 1] + countGcdPair[gcd];

    for (int i = 0; i < queries.length; ++i)
      ans[i] = getNthGcdPair(queries[i], prefixCountGcdPair);

    return ans;
  }

  // Returns the `query`-th gcd pair.
  private int getNthGcdPair(long query, long[] prefixCountGcdPair) {
    int l = 1;
    int r = prefixCountGcdPair.length - 1;
    while (l < r) {
      int m = (l + r) / 2;
      if (prefixCountGcdPair[m] < query + 1)
        l = m + 1;
      else
        r = m;
    }
    return l;
  }
}


or

// Preprocessing + Prefix Sum + Binary Search

class Solution {
    public int[] gcdValues(int[] nums, long[] queries) {
        int mx = Arrays.stream(nums).max().getAsInt();
        int[] cnt = new int[mx + 1];
        long[] cntG = new long[mx + 1];
        for (int x : nums) {
            ++cnt[x];
        }
        for (int i = mx; i > 0; --i) {
            int v = 0;
            for (int j = i; j <= mx; j += i) {
                v += cnt[j];
                cntG[i] -= cntG[j];
            }
            cntG[i] += 1L * v * (v - 1) / 2;
        }
        for (int i = 2; i <= mx; ++i) {
            cntG[i] += cntG[i - 1];
        }
        int m = queries.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; ++i) {
            ans[i] = search(cntG, queries[i]);
        }
        return ans;
    }

    private int search(long[] nums, long x) {
        int n = nums.length;
        int l = 0, r = n;
        while (l < r) {
            int mid = l + r >> 1;
            if (nums[mid] > x) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}

or


import java.util.*;

class Solution {
    private List<Integer> primes;

    private void sieve(int max) {
        primes = new ArrayList<>();
        boolean[] isPrime = new boolean[max];
        Arrays.fill(isPrime, true);
        isPrime[0] = isPrime[1] = false;

        for (int i = 2; i < max; i++) {
            if (isPrime[i]) {
                primes.add(i);
                for (int j = i * 2; j < max; j += i) {
                    isPrime[j] = false;
                }
            }
        }
    }

    public int[] gcdValues(int[] nums, long[] queries) {
        int mx = Arrays.stream(nums).max().getAsInt() + 1;
        sieve(mx);

        long[] count = new long[mx];
        for (int num : nums) {
            count[num]++;
        }

        for (int p : primes) {
            for (int j = (mx - 1) / p; j >= 1; j--) {
                count[j] += count[j * p];
            }
        }

        for (int i = 1; i < mx; i++) {
            count[i] = count[i] * (count[i] - 1) / 2;
        }

        for (int p : primes) {
            for (int j = 1; j * p < mx; j++) {
                count[j] -= count[j * p];
            }
        }

        long[] acc = new long[mx];
        acc[0] = count[0];
        for (int i = 1; i < mx; i++) {
            acc[i] = acc[i - 1] + count[i];
        }

        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            res[i] = upperBound(acc, queries[i]);
        }

        return res;
    }

    private int upperBound(long[] arr, long target) {
        int lo = 0, hi = arr.length;
        while (lo < hi) {
            int mid = (lo + hi) / 2;
            if (arr[mid] <= target) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }
        return lo;
    }
}


or


import java.util.*;

class Solution {
        public int[] gcdValues(int[] A, long[] queries) {
        int m = Arrays.stream(A).max().getAsInt();
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int a : A) {
            cnt.put(a, cnt.getOrDefault(a, 0) + 1);
        }

        long[] gcd = new long[m + 1];
        for (int a = m; a > 0; --a) {
            long mul = 0;
            for (int b = a; b <= m; b += a) {
                mul += cnt.getOrDefault(b, 0);
            }
            gcd[a] = mul * (mul - 1) / 2;
            for (int b = a * 2; b <= m; b += a) {
                gcd[a] -= gcd[b];
            }
        }

        for (int i = 1; i <= m; ++i) {
            gcd[i] += gcd[i - 1]; // Prefix sum
        }

        int qn = queries.length, res[] = new int[qn];
        for (int i = 0; i < qn; i++) {
            res[i] = upper_bound(gcd, queries[i]); // find upper bound;
        }
        return res;
    }

    private int upper_bound(long[] arr, long target) {
        int left = 0, right = arr.length;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] <= target) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}


or


class Solution {
    public int[] gcdValues(int[] nums, long[] queries) {
        int n = nums.length;
        int maxValue = Arrays.stream(nums).max().orElse(0);
        int[] divisorCount = new int[maxValue + 1];

        for (int number : nums) {
            for (int i = 1; i * i <= number; i++) {
                if (number % i == 0) {
                    divisorCount[i]++;
                    if (i != number / i) {
                        divisorCount[number / i]++;
                    }
                }
            }
        }

        long[] gcdPairCount = new long[maxValue + 1];

        for (int gcd = maxValue; gcd >= 1; gcd--) {
            long count = divisorCount[gcd];
            gcdPairCount[gcd] = count * (count - 1) / 2;
            for (int multiple = 2 * gcd; multiple <= maxValue; multiple += gcd) {
                gcdPairCount[gcd] -= gcdPairCount[multiple];
            }
        }

        long[] prefixSum = new long[maxValue + 1];
        for (int gcd = 1; gcd <= maxValue; gcd++) {
            prefixSum[gcd] = prefixSum[gcd - 1] + gcdPairCount[gcd];
        }

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            long query = queries[i];
            long left = 1, right = maxValue, answer = -1;
            while (left <= right) {
                long mid = (left + right) / 2;
                if (prefixSum[(int) mid] > query) {
                    answer = mid;
                    right = mid - 1;
                } else {
                    left = mid + 1;
                }
            }
            result[i] = (int) answer;
        }

        return result;
    }
}
