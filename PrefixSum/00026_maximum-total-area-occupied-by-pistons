https://leetcode.com/problems/maximum-total-area-occupied-by-pistons/description/


3279. Maximum Total Area Occupied by Pistons ðŸ”’
Description
There are several pistons in an old car engine, and we want to calculate the maximum possible area under the pistons.

You are given:

An integer height, representing the maximum height a piston can reach.
An integer array positions, where positions[i] is the current position of piston i, which is equal to the current area under it.
A string directions, where directions[i] is the current moving direction of piston i, 'U' for up, and 'D' for down.
Each second:

Every piston moves in its current direction 1 unit. e.g., if the direction is up, positions[i] is incremented by 1.
If a piston has reached one of the ends, i.e., positions[i] == 0 or positions[i] == height, its direction will change.
Return the maximum possible area under all the pistons.

 

Example 1:

Input: height = 5, positions = [2,5], directions = "UD"

Output: 7

Explanation:

The current position of the pistons has the maximum possible area under it.

Example 2:

Input: height = 6, positions = [0,0,6,3], directions = "UUDU"

Output: 15

Explanation:

After 3 seconds, the pistons will be in positions [3, 3, 3, 6], which has the maximum possible area under it.

 

Constraints:

1 <= height <= 106
1 <= positions.length == directions.length <= 105
0 <= positions[i] <= height
directions[i] is either 'U' or 'D'.



# java



class Solution {
    public long maxArea(int height, int[] positions, String directions) {
        Map<Integer, Integer> delta = new TreeMap<>();
        int diff = 0;
        long res = 0;
        for (int i = 0; i < positions.length; ++i) {
            int pos = positions[i];
            char dir = directions.charAt(i);
            res += pos;
            if (dir == 'U') {
                ++diff;
                delta.merge(height - pos, -2, Integer::sum);
                delta.merge(height * 2 - pos, 2, Integer::sum);
            } else {
                --diff;
                delta.merge(pos, 2, Integer::sum);
                delta.merge(height + pos, -2, Integer::sum);
            }
        }
        long ans = res;
        int pre = 0;
        for (var e : delta.entrySet()) {
            int cur = e.getKey();
            int d = e.getValue();
            res += (long) (cur - pre) * diff;
            pre = cur;
            diff += d;
            ans = Math.max(ans, res);
        }
        return ans;
    }
}



or

class Solution {
  public long maxArea(int height, int[] positions, String directions) {
    long area = Arrays.stream(positions).asLongStream().sum();
    long ans = area;
    long diffPerSecond = 0;
    TreeMap<Integer, List<Integer>> timeToIndices = new TreeMap<>();

    for (int i = 0; i < positions.length; ++i) {
      if (directions.charAt(i) == 'U') {
        timeToIndices.computeIfAbsent(height - positions[i], k -> new ArrayList<>()).add(i);
        timeToIndices.computeIfAbsent(height - positions[i] + height, k -> new ArrayList<>())
            .add(i);
        ++diffPerSecond;
      } else {
        timeToIndices.computeIfAbsent(positions[i], k -> new ArrayList<>()).add(i);
        timeToIndices.computeIfAbsent(positions[i] + height, k -> new ArrayList<>()).add(i);
        --diffPerSecond;
      }
    }

    char[] directionsChars = directions.toCharArray();
    int prevTime = 0;

    for (Map.Entry<Integer, List<Integer>> entry : timeToIndices.entrySet()) {
      final int time = entry.getKey();
      List<Integer> indices = entry.getValue();
      area += (time - prevTime) * diffPerSecond;
      ans = Math.max(ans, area);
      prevTime = time;
      for (final int i : indices)
        if (directionsChars[i] == 'U') {
          directionsChars[i] = 'D';
          diffPerSecond -= 2;
        } else {
          directionsChars[i] = 'U';
          diffPerSecond += 2;
        }
    }

    return ans;
  }
}
