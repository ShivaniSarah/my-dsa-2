https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k/


363. Max Sum of Rectangle No Larger Than K
Hard
Topics
Companies
Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.

It is guaranteed that there will be a rectangle with a sum no larger than k.

 

Example 1:


Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).
Example 2:

Input: matrix = [[2,2,-1]], k = 3
Output: 3
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-100 <= matrix[i][j] <= 100
-105 <= k <= 105



# java

class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int m = matrix.length;
        int n = matrix[0].length;
        final int inf = 1 << 30;
        int ans = -inf;
        for (int i = 0; i < m; ++i) {
            int[] nums = new int[n];
            for (int j = i; j < m; ++j) {
                for (int h = 0; h < n; ++h) {
                    nums[h] += matrix[j][h];
                }
                int s = 0;
                TreeSet<Integer> ts = new TreeSet<>();
                ts.add(0);
                for (int x : nums) {
                    s += x;
                    Integer y = ts.ceiling(s - k);
                    if (y != null) {
                        ans = Math.max(ans, s - y);
                    }
                    ts.add(s);
                }
            }
        }
        return ans;
    }
}


or


class Solution {
  public int maxSumSubmatrix(int[][] matrix, int k) {
    final int m = matrix.length;
    final int n = matrix[0].length;
    int ans = Integer.MIN_VALUE;

    for (int baseCol = 0; baseCol < n; ++baseCol) {
      // sums[i] := sum(matrix[i][baseCol..j])
      int[] sums = new int[m];
      for (int j = baseCol; j < n; ++j) {
        for (int i = 0; i < m; ++i)
          sums[i] += matrix[i][j];
        // Find the maximum sum <= k of all the subarrays.
        TreeSet<Integer> accumulate = new TreeSet<>(Arrays.asList(0));
        int prefix = 0;
        for (final int sum : sums) {
          prefix += sum;
          final Integer lo = accumulate.ceiling(prefix - k);
          if (lo != null)
            ans = Math.max(ans, prefix - lo);
          accumulate.add(prefix);
        }
      }
    }

    return ans;
  }
}

or


class Solution {
    public int maxSumSubmatrix(int[][] arr, int k) {
        int rows = arr.length;
        int cols = arr[0].length;
        int maxK = Integer.MIN_VALUE;
        for(int i = 0; i < cols; i++){
            int dp[] = new int[rows];
            for(int j = i; j < cols; j++){
                for(int l = 0; l < rows; l++){
                    dp[l] += arr[l][j];
                }
                int currSum = maxSubArray(dp, k);
                maxK = Math.max(maxK, currSum);                 
                if(maxK == k)
                    return k;
            }
        }
        return maxK;
    }
    public int maxSubArray(int[] arr, int k) {
        int max = Integer.MIN_VALUE;
        int currSum = 0;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        for (int i = 0; i < arr.length; i++) {
            currSum += arr[i];
            Integer ceilValue = set.ceiling(currSum - k);
            if(ceilValue != null) {
                max = Math.max(max, currSum - ceilValue);
            }
            set.add(currSum);
        }
        return max;
    }
}

or


//Kadane's Algorithm Approach
//600ms+  explained in video

class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int result = Integer.MIN_VALUE;
        
        for(int left =0 ;left<matrix[0].length; left++){
            
            int[] rSum = new int[matrix.length];
            
            for(int right = left;right<matrix[0].length;right++){
                for(int row=0; row < matrix.length; row++)
                    rSum[row] += matrix[row][right];
					
					//explanation of these 3 loops starts from 02:00 in Video
                
                TreeSet<Integer> set = new TreeSet<>();
                
                set.add(0);
                int cs = 0;
                
                for(int a: rSum){
                    cs += a;
					
                    //if you don't understand what exactly is going on here
					// then watch the video from 12:27
					
                    Integer target = set.ceiling(cs-k);
                    
                    if(target !=null)
                        result = Math.max(result,cs-target);
                    set.add(cs);
                }
            }
        }
        return result;
    }
}

or


class Solution {

    public int maxSumSubmatrix(int[][] matrix, int k) {
        final int rows = matrix.length;
        final int cols = matrix[0].length;
        final int[][] prefixSum = new int[rows + 1][cols + 1];

        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                prefixSum[r + 1][c + 1] = prefixSum[r][c + 1] + prefixSum[r + 1][c] - prefixSum[r][c] + matrix[r][c];
            }
        }

        int max = Integer.MIN_VALUE;

        for (int rowSize = 0; rowSize < rows; rowSize++) {
            for (int colSize = 0; colSize < cols; colSize++) {
                for (int rStart = 0; rStart + rowSize < rows; rStart++) {
                    for (int cStart = 0; cStart + colSize < cols; cStart++) {
                        final int r1 = rStart;
                        final int c1 = cStart;
                        final int r2 = rStart + rowSize;
                        final int c2 = cStart + colSize;
                        final int sum = prefixSum[r2 + 1][c2 + 1] + prefixSum[r1][c1] - prefixSum[r1][c2 + 1] - prefixSum[r2 + 1][c1];

                        if (sum == k) return k;
                        else if (sum < k) max = Math.max(max, sum);
                    }
                }
            }
        }

        return max;
    }
}
/**

Complexity Analysis: 

M : No of rows
N : No of cols

Time Complexity : 

To Build prefix Sum : O(M*N)
To Calculate Size of all rectangles : O(M^2*N^2)


Space Complexity : 

To Build prefix Sum : O(M*N)

*/


or

// fastest

class Solution {

private int maxSumSubarray(int[] A) {
    int min = 0, res = Integer.MIN_VALUE;
    for(int sum: A) {
        res = Math.max(res, sum - min);
        min = Math.min(min, sum);
    }
    return res;
}
private int maxSumSubarray(int[] A, int k) {
    int res = maxSumSubarray(A);
    if(res <= k) return res;
    res = Integer.MIN_VALUE;
    TreeSet<Integer> set = new TreeSet<>();
    set.add(0);
    for(int sum: A) {
        Integer old = set.ceiling(sum - k);
        if(old != null) {
            if(sum - old > res) {
                res = sum - old;
                if(res == k) return res;
            }
        }
        set.add(sum);
    }
    return res;
}
public int maxSumSubmatrix(int[][] matrix, int k) {
    int m = matrix.length, n = m == 0 ? 0 : matrix[0].length, res = Integer.MIN_VALUE;
    boolean groupingRows = true;
    if(m > n) {
        int temp = m; m = n; n = temp;
        groupingRows = false;
    }
    int[] sum = new int[n];
    for(int i = 0; i < m; i++) {
        Arrays.fill(sum, 0);
        for(int j = i; j < m; j++) {
            int pre = 0;
            if(groupingRows) {
                for(int t = 0; t < n; t++) sum[t] += pre += matrix[j][t];
            } else {
                for(int t = 0; t < n; t++) sum[t] += pre += matrix[t][j];
            }
            res = Math.max(res, maxSumSubarray(sum, k));
            if(res == k) return res;
        }
    }
    return res;
}
}

or


class Solution {
  public int maxSumSubmatrix(int[][] matrix, int k) {
    final int m = matrix.length;
    final int n = matrix[0].length;
    int ans = Integer.MIN_VALUE;
    for (int baseCol = 0; baseCol < n; ++baseCol) {
      int[] sums = new int[m];
      for (int j = baseCol; j < n; ++j) {
        for (int i = 0; i < m; ++i)
          sums[i] += matrix[i][j];
        TreeSet<Integer> accumulate = new TreeSet<>(Arrays.asList(0));
        int prefix = 0;
        for (final int sum : sums) {
          prefix += sum;
          final Integer lo = accumulate.ceiling(prefix - k);
          if (lo != null)
            ans = Math.max(ans, prefix - lo);
          accumulate.add(prefix);
        }
      }
    }
    return ans;
  }
}
