https://leetcode.com/problems/smallest-rotation-with-highest-score/

798. Smallest Rotation with Highest Score
Hard
Topics
Companies
You are given an array nums. You can rotate it by a non-negative integer k so that the array becomes [nums[k], nums[k + 1], ... nums[nums.length - 1], nums[0], nums[1], ..., nums[k-1]]. Afterward, any entries that are less than or equal to their index are worth one point.

For example, if we have nums = [2,4,1,3,0], and we rotate by k = 2, it becomes [1,3,0,2,4]. This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].
Return the rotation index k that corresponds to the highest score we can achieve if we rotated nums by it. If there are multiple answers, return the smallest such index k.

 

Example 1:

Input: nums = [2,3,1,4,0]
Output: 3
Explanation: Scores for each k are listed below: 
k = 0,  nums = [2,3,1,4,0],    score 2
k = 1,  nums = [3,1,4,0,2],    score 3
k = 2,  nums = [1,4,0,2,3],    score 3
k = 3,  nums = [4,0,2,3,1],    score 4
k = 4,  nums = [0,2,3,1,4],    score 3
So we should choose k = 3, which has the highest score.
Example 2:

Input: nums = [1,3,0,2,4]
Output: 0
Explanation: nums will always have 3 points no matter how it shifts.
So we will choose the smallest k, which is 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] < nums.length


# java

class Solution {
    public int bestRotation(int[] nums) {
        int n = nums.length;
        int[] d = new int[n];
        for (int i = 0; i < n; ++i) {
            int l = (i + 1) % n;
            int r = (n + i + 1 - nums[i]) % n;
            ++d[l];
            --d[r];
        }
        int mx = -1;
        int s = 0;
        int ans = n;
        for (int k = 0; k < n; ++k) {
            s += d[k];
            if (s > mx) {
                mx = s;
                ans = k;
            }
        }
        return ans;
    }
}


or


class Solution {
  public int bestRotation(int[] nums) {
    final int n = nums.length;
    // rotate[i] := the number of points lost after rotating left i times
    int[] rotate = new int[n];

    // Rotating i - nums[i] times makes nums[i] == its new index.
    // So, rotating i - nums[i] + 1 times will "start" to make nums[i] > its
    // index, which is the starting index to lose point.
    for (int i = 0; i < n; ++i)
      --rotate[(i - nums[i] + 1 + n) % n];

    // Each time of the rotation, make index 0 to index n - 1 to get 1 point.
    for (int i = 1; i < n; ++i)
      rotate[i] += rotate[i - 1] + 1;

    int mx = Integer.MIN_VnumsLUE;
    int maxIndex = 0;

    for (int i = 0; i < n; ++i)
      if (rotate[i] > mx) {
        mx = rotate[i];
        maxIndex = i;
      }

    return maxIndex;
  }
}


or



class Solution {
   
    public int bestRotation(int[] nums) {
        int n = nums.length;
        int[] cnt = new int[2 * n];
        int max = 0;
        int res = 0;
        for(int r = 0, l = 0, sum = 0; r < 2 * n; r++) {
            int v = r - nums[r % n];
            if(v >= 0) {
                cnt[Math.min(2 * n - 1, v)]++;
                if(v >= l) {
                    sum++;
                }
            }
            if(r - l == n - 1) {
                if(sum > max) {
                    max = sum;
                    res = l;
                }
                sum -= cnt[l];
                l++;
            }
        }
        return res;
    }
}

 /*
        1. let's assume we have an array with 2 * n size
            from [2,3,1,4,0] to [2,3,1,4,0,2,3,1,4,0]
        2. loop through every element from left to right
            index 0 1 2 3 4 5 6 7 8 9
                 [2,3,1,4,0,2,3,1,4,0]
        3. we can find the different value between index and element, we only keep value >= 0
            index 0 1 2 3 4 5 6 7 8 9
                 [2,3,1,4,0,2,3,1,4,0]
            value     1   4 3 3 6 4 9
        4. we perform sliding window(size n) on this pattern
            l = left pointer of window, r = current right pointer
            index 0 1 2 3 4 5 6 7 8 9
                 [2,3,1,4,0,2,3,1,4,0]
            value     1   4 3 3 6 4 9 : if left pointer pass this value, this value cannot be counted in result
                  l       r
            value : if left pointer smaller than or equal to 1, we can keep it in window
                    (largest left pointer index to keep this element in our window)
        5. we use variable "sum" to keep tracking current count of valid elements
            but we need to remove invalid value from "sum"
        6. in order to remove invalid left pointer / value, we need count[] array to mark element count at that index
            before moving left pointer point to next index, we need to use sum - count[left]
   example   
            index 0 1 2 3 4 5 6 7 8 9
                 [2,3,1,4,0,2,3,1,4,0]
            value     1   4 3 3 6 4 9
    left = 0, right = 2, sum = 1, count = {{1:1}}
    left = 0, right = 4, sum = 2, count = {{1:1}, {4:1}}
    left = 1, right = 5, sum = 3, count = {{1:1}, {4:1}, {3:1}}
        after calculate max / possible result, we need to remove count[left] from sum
    left = 1, right = 5, sum = (3 - count[left]) = 2, count = {{1:1}, {4:1}, {3:1}}
    left = 2, right = 6, sum = 3, count = {{1:1}, {4:1}, {3:2}}
    left = 3, right = 7, sum = 4, count = {{1:1}, {4:1}, {3:2}, {6:1}}
        after calculate max / possible result, we need to remove count[left] from sum
    left = 3, right = 7, sum = (4 - count[left]) = 2, count = {{1:1}, {4:1}, {3:2}, {6:1}}
    left = 4, right = 8, sum = 3, count = {{1:1}, {4:2}, {3:2}, {6:1}}
        after calculate max / possible result, we need to remove count[left] from sum
    left = 4, right = 8, sum = (3 - count[left]) = 1, count = {{1:1}, {4:2}, {3:2}, {6:1}}    
    ....
    
    
    */


or


class Solution {
  public int bestRotation(int[] nums) {
    final int n = nums.length;
    // rotate[i] := the number of points lost after rotating left i times
    int[] rotate = new int[n];

    // Rotating i - nums[i] times makes nums[i] == its new index.
    // So, rotating i - nums[i] + 1 times will "start" to make nums[i] > its
    // index, which is the starting index to lose point.
    for (int i = 0; i < n; ++i)
      --rotate[(i - nums[i] + 1 + n) % n];

    // Each time of the rotation, make index 0 to index n - 1 to get 1 point.
    for (int i = 1; i < n; ++i)
      rotate[i] += rotate[i - 1] + 1;

    int mx = Integer.MIN_VALUE;
    int maxIndex = 0;

    for (int i = 0; i < n; ++i)
      if (rotate[i] > mx) {
        mx = rotate[i];
        maxIndex = i;
      }

    return maxIndex;
  }
}
